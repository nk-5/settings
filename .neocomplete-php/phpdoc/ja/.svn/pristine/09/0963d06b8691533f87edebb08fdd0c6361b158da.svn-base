<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: takagi Status: ready -->
<sect1 xml:id="internals2.pdo.pdo-dbh-t" xmlns="http://docbook.org/ns/docbook">
 <title>pdo_dbh_t の定義</title>
 <para>
  明示的に述べられている場合を除き、ドライバからはすべてのフィールドが
  読み込み専用となります。
 </para>
 <figure>
  <title>pdo_dbh_t</title>
  <programlisting role="c">
/* データベースへの接続を表す */
struct _pdo_dbh_t {
    /* ドライバ固有のメソッド */
    struct pdo_dbh_methods *methods;    <co xml:id="internals2.pdo.dbh.co.methods" linkends="internals2.pdo.dbh.co.methods-co"/>
    /* ドライバ固有のデータ */
    void *driver_data;                  <co xml:id="internals2.pdo.dbh.co.driver-data" linkends="internals2.pdo.dbh.co.driver-data-co"/>

    /* 認証データ */
    char *username, *password;          <co
    xml:id="internals2.pdo.dbh.co.credentials"
    linkends="internals2.pdo.dbh.co.credentials-co"/>

    /* true の場合は、このハンドルが指すデータはすべて
     * 持続的に割り当てられる */
    unsigned is_persistent:1;           <co
    xml:id="internals2.pdo.dbh.co.is-persist"
    linkends="internals2.pdo.dbh.co.is-persist-co"/>

    /* true の場合は、ステートメントを実行するたびに COMMIT を行うかのように
     * 動作する。それ以外の場合は COMMIT を手動で実行しなければならない
     * */
    unsigned auto_commit:1;             <co
    xml:id="internals2.pdo.dbh.co.auto-commit"
    linkends="internals2.pdo.dbh.co.auto-commit-co"/>

    /* true の場合は、返されるカラムのためのメモリを明示的に確保することが
     * 必要となる */
    unsigned alloc_own_columns:1;       <co
    xml:id="internals2.pdo.dbh.co.alloc-own"
    linkends="internals2.pdo.dbh.co.alloc-own-co"/>

    /* true の場合は、commit あるいは rollBack をコールすることができる */
    unsigned in_txn:1;                  

    /* しかるべきクォート処理をした後での 1 文字の長さの最大値 */
    unsigned max_escaped_char_length:3;   <co
    xml:id="internals2.pdo.dbh.co.max-esc"
    linkends="internals2.pdo.dbh.co.max-esc-co"/>

    /* このハンドルをオープンする際に使用されるデータソース文字列 */
    const char *data_source;            <co xml:id="internals2.pdo.dbh.co.dsn"
    linkends="internals2.pdo.dbh.co.dsn-co"/>
    unsigned long data_source_len;

    /* グローバルエラーコード */
    pdo_error_type error_code;          <co
    xml:id="internals2.pdo.dbh.co.error-code"
    linkends="internals2.pdo.dbh.co.error-code-co"/>

    enum pdo_case_conversion native_case<co xml:id="internals2.pdo.dbh.co-ncase"
    linkends="internals2.pdo.dbh.co-ncase-co"/>, desired_case;
};
  </programlisting>
 </figure>
 <calloutlist>
  <callout arearefs="internals2.pdo.dbh.co.methods"
  xml:id="internals2.pdo.dbh.co.methods-co">
   <para>
    ドライバは、<function>SKEL_handle_factory</function> の中で
    これを設定<emphasis>しなければなりません</emphasis>。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.driver-data"
  xml:id="internals2.pdo.dbh.co.driver-data-co">
   <para>
    この項目はドライバが使用します。想定される使用法は、データベースとの
    接続を保つために必要なインスタンスデータへのポインタを
    (<function>SKEL_handle_factory</function> 内で)
    格納することです。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.credentials"
  xml:id="internals2.pdo.dbh.co.credentials-co">
   <para>
    PDO のコンストラクタに渡すユーザー名およびパスワードです。
    データベースとの接続を初期化する際に、ドライバはこの値を
    使用しなければなりません。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.is-persist"
  xml:id="internals2.pdo.dbh.co.is-persist-co">
   <para>
    これが 1 に設定されている場合、dbh が参照しているすべてのデータや
    ドライバが割り当てた構造体はすべて持続的に
    確保<emphasis>しなければなりません</emphasis>。これを実現するのは
    簡単です。通常の <function>emalloc</function> の代わりに
    <function>pemalloc</function> を使用し、最後のパラメータとして
    このフラグの値を渡せばよいのです。メモリを適切に使用するように
    しないと深刻な問題を引き起こし、結果として (いちばんましな場合でも)
    プログラムをクラッシュさせ、最悪の場合には攻撃者が悪用可能な状態に
    なってしまうでしょう。
   </para>
   <para>
    どのような理由であれ、もしドライバを持続的に実行することができないのなら
    <function>SKEL_handle_factory</function> の中で<emphasis>必ず</emphasis>
    このフラグをチェックし、適切なエラーを発生させるようにしましょう。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.auto-commit"
  xml:id="internals2.pdo.dbh.co.auto-commit-co">
   <para>
    この値は、関数 <function>SKEL_handle_doer</function> および
    <function>SKEL_stmt_execute</function> の中でチェックする必要が
    あります。これが true の場合はクエリを実行するたびに commit
    しなければなりません。ほとんどのデータベースは自動コミットモードを
    提供しており、これを自動的に処理してくれます。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.alloc-own"
  xml:id="internals2.pdo.dbh.co.alloc-own-co">
   <para>
    データベースクライアントライブラリの API が、呼び出し元が提供する
    バッファに取得したデータを格納するようになっている場合、
    <function>SKEL_handle_factory</function> でこのフラグを 1 に
    設定する必要があります。設定しておくと、PDO は
    それ以外の場合より早く <function>SKEL_stmt_describer</function>
    をコールします。このことによりバッファの大きさを知ることができ、
    データベースクライアントライブラリに対して適切なコールが
    できるようになります。
   </para>
   <para>
    もしデータベースクライアントライブラリの API の実装が、
    ライブラリ自身の内部バッファに格納したデータへのポインタを返す
    実装になっており、フェッチコールの後でそれをコピーして使用すると
    いうことならば、この値は 0 のままにしておきます。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.max-esc"
  xml:id="internals2.pdo.dbh.co.max-esc-co">
   <para>
    もしドライバがネイティブのプリペアドステートメントをサポートしない
    (<parameter>supports_placeholders</parameter> が
    <constant>PDO_PLACEHOLDER_NONE</constant> となっている)
    場合、<function>SKEL_handle_quoter</function> 関数によって
    1 文字の長さが最大どれだけになるかをこの値に設定する必要があります。
    この値は、PDO がステートメントを実行する際に必要なバッファの領域を
    計算するために使用されます。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.dsn"
  xml:id="internals2.pdo.dbh.co.dsn-co">
   <para>
    これは、PDO のコンストラクタに渡す DSN の値を保持します。
    もし何らかの理由でドライバが DSN を変更する必要がある場合は、
    <function>SKEL_handle_factory</function> の中で更新しなければ
    なりません。このメンバを変更することは避けるべきです。
    もし変更する際には、<parameter>data_source_len</parameter>
    が正しい値であることを確かめる必要があります。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co.error-code"
   xml:id="internals2.pdo.dbh.co.error-code-co">
   <para>
    ドライバのメソッドのコール中にエラーが発生した場合は、エラーの内容に
    該当する SQLSTATE コードをこのメンバに設定し、エラーを返さなければ
    なりません。この HOW-TO では、エラーが検出された際には
    <function>SKEL_handle_error</function> をコールし、そこでエラーコードを
    設定するという手法を推奨します。
   </para>
  </callout>
  <callout arearefs="internals2.pdo.dbh.co-ncase"
  xml:id="internals2.pdo.dbh.co-ncase-co">
   <para>
    この値は <function>SKEL_handle_factory</function> の中で
    設定しなければなりません。この値は、結果セット内のカラム名を
    データベースがどのように返すかを表します。クエリで指定された
    とおりに大文字小文字を使用する場合は、この値を
    <constant>PDO_CASE_NATURAL</constant> (デフォルト値です)
    に設定します。カラム名をつねに大文字で返す場合は、この値を
    <constant>PDO_CASE_UPPER</constant> に設定します。
    カラム名をつねに小文字で返す場合は、この値を
    <constant>PDO_CASE_LOWER</constant> に設定します。
    ここで設定した値は、ユーザーが <constant>PDO_ATTR_CASE</constant>
    属性を設定した場合に PDO が大文字小文字変換をすべきかどうかを
    決定するために使用されます。
   </para>
  </callout>
 </calloutlist>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
