<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: takagi Status: ready -->
 <sect1 xml:id="internals2.structure.basics" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>基本構造</title>
  
  <simpara>
   C 言語は、非常に低レベルなレイヤーを今風に扱えるようにした言語です。
   PHP のように組み込みでさまざまな機能が用意されているわけではありません。
   リフレクションや動的モジュール読み込み、範囲チェック、
   スレッドセーフなデータ管理、さまざまなデータ構造
   (リンクリストやハッシュテーブルなど) は組み込みの機能としては用意されていません。
   と同時に、C 言語はプログラミング言語としての一般的な機能はすべて兼ね備えています。
   それなりに努力しさえすれば、先ほどあげた内容はすべて実現可能です。
   実際、Zend Engine ではこれらをすべて利用することができます。
  </simpara>

  <simpara>
   Zend API を、拡張しやすくかつわかりやすいものにするためにさまざまな努力を重ねてきました。
   しかし、C 言語はどんな拡張に対しても何らかの宣言が必要となるものであり、
   不慣れな人が見ると冗長に感じたり説明不足に感じたりすることは避けられません。
   これから説明していくこれらの言語構造は、Zend Engine 2 や 3 においては
   "一度書いたらあとは忘れてしまってよい" ものです。
   ここで示すのは、PHP 5.3 の <command>ext_skel</command> で生成したファイル
   <filename>php_counter.h</filename> および <filename>counter.c</filename>
   の抜粋です。どのような宣言が生成されるのかをごらんください。
  </simpara>

  <note>
   <simpara>
    勘のいい方ならお気づきでしょうが、
    実際のファイルにはここであげた以外にもいくつかの宣言があります。
    これらの宣言は Zend サブシステム群に固有のものであり、
    ここで説明するのは適切ではありません。
   </simpara>
  </note>

  <screen>
<![CDATA[
extern zend_module_entry counter_module_entry;
#define phpext_counter_ptr &counter_module_entry

#ifdef PHP_WIN32
#    define PHP_COUNTER_API __declspec(dllexport)
#elif defined(__GNUC__) && __GNUC__ >= 4
#    define PHP_COUNTER_API __attribute__ ((visibility("default")))
#else
#    define PHP_COUNTER_API
#endif

#ifdef ZTS
#include "TSRM.h"
#endif
]]></screen>
  <screen>
<![CDATA[
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_counter.h"

/* ... */

#ifdef COMPILE_DL_COUNTER
ZEND_GET_MODULE(counter)
#endif
]]></screen>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <literal>counter_module_entry</literal> の行では、
     グローバル変数とそれを指すポインタのマクロを宣言しています。
     ここにはその拡張モジュール用の
     <literal>zend_module_entry</literal> が格納されます。
     後で説明するように "真の" グローバル変数には弱点もありますが、
     ここでの使用は意図的なものです。
     この変数を誤用しないよう、Zend では予防措置を行っています。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PHP_COUNTER_API</constant> は、PHP 以外の関数から使用するために宣言しているものです。
     他のモジュールから使わせるためにエクスポートすることを想定しています。
     counter 拡張モジュールではこれを宣言していないので、
     最終版のヘッダファイルではこのマクロを取り除きます。
     <constant>PHPAPI</constant> マクロは完全に別の場所で宣言されており、
     標準のモジュールが <function>phpinfo</function>
     関数を実行する際に使用します。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     PHP あるいは拡張モジュールをスレッドセーフ環境でコンパイルしない場合は
     TSRM は使用しません。そのため <filename>TSRM.h</filename>
     のインクルードは不要です。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     標準のインクルードファイル群として、特にその拡張モジュール自身の
     <filename>php_counter.h</filename> が存在します。
     <filename>config.h</filename> は、<command>configure</command>
     が決定した結果にアクセスできるようにするものです。
     <filename>php.h</filename> は、
     PHP や Zend API との橋渡しを担当します。
     <filename>php_ini.h</filename> は、実行時設定 (INI)
     エントリ用の API を追加します。
     すべての拡張モジュールがこれを使うというわけではありません。
     最後に、<filename>ext/standard/info.h</filename> が上記の
     <function>phpinfo</function> API をインポートします。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>COMPILE_DL_COUNTER</constant> が <command>configure</command>
     で定義されるのは、counter 拡張モジュールが有効になっており、
     かつ PHP への静的リンクではなく動的ロードモジュールとしてビルドする場合のみです。
     <constant>ZEND_GET_MODULE</constant> で定義するちょっとした関数を使用して、
     Zend はその拡張モジュールの
     <literal>zend_module_entry</literal> を実行時に取得します。
    </simpara>
    <note>
     <simpara>
      counter モジュールを静的にビルドしようとして
      <filename>main/php_config.h</filename> を調べた人の中には
      <constant>HAVE_COUNTER</constant>
      という定数が定義されていることにお気づきのかたもおられるかもしれません。
      この定数はソースコードのどこでも用いられていません。
      理由は簡単で、このチェックは行われないからです。
      このチェックは不要なのです。
      拡張モジュールが有効になっていなければ、
      そのファイルがコンパイル対象となることはないからです。
     </simpara>
    </note>
   </listitem>
  </itemizedlist>
 
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
