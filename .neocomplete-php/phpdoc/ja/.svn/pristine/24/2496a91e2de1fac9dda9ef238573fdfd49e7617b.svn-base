<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297616 Maintainer: takagi Status: ready -->
 <sect1 xml:id="internals2.structure.lifecycle" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>拡張モジュールのライフサイクル</title>

  <simpara>
   PHP の拡張モジュールは、そのライフサイクルにおいていくつかの段階をたどります。
   これらの段階を通じて、開発者はさまざまな初期化や後処理そして情報の取得などを行います。
   Zend API には、拡張モジュールの 5 つの段階のそれぞれに対するフックがあります。
   これらは PHP の関数からコールされるのとは別のものです。
  </simpara>
  
  <sect2 xml:id="internals2.structure.lifecycle.mod-vs-req">
   <title>ロード、アンロードそしてリクエスト</title>
   
   <simpara>
    Zend エンジンは、クライアントからのひとつあるいは複数の "リクエスト"
    を処理します。昔ながらの CGI の実装では、
    このリクエストごとにひとつのプロセスを実行します。
    しかし、それ以外の多くの実装 (有名どころでは Apache モジュールなど)
    では、複数のリクエストを単一の PHP プロセスに関連付けることができます。
    したがって、PHP の拡張モジュールはその生存期間中に多くのリクエストを処理することもありえます。
   </simpara>
  </sect2>

  <sect2 xml:id="internals2.structure.lifecycle.overview">
   <title>概要</title>
   
   <itemizedlist>
    <listitem>
     <simpara>
      Zend API では、モジュールがメモリにロードされるのは対応する
      PHP プロセスが立ち上がる際だけです。
      各モジュールは、<constant>zend_module</constant>
      構造体で定義された "モジュール初期化"
      関数をロード時に実行します。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      対応する PHP プロセスがクライアントからのリクエストの処理を開始する
      (つまり、PHP インタプリタが動き始める) ときには、
      各モジュールは <constant>zend_module</constant>
      構造体で定義された "リクエスト初期化"
      関数を実行します。
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      対応する PHP プロセスがリクエストの処理を終了したときには、
      各モジュールは <constant>zend_module</constant>
      構造体で定義された "リクエスト後処理"
      関数を実行します。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      対応する PHP プロセスが終了する際に、
      モジュールも順にメモリからアンロードされます。そのときには、
      各モジュールは <constant>zend_module</constant>
      構造体で定義された "モジュール後処理"
      関数を実行します。
     </simpara>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 xml:id="internals2.structure.lifecycle.what-when">
   <title>何をどこでするのか</title>

   <simpara>
    これら 4 つのポイントでは、多くの作業が行われます。
    この表では、一般的な初期化と後処理がどこで行われるのかをまとめます。
   </simpara>
   
   <table>
    <title>何をどこでするのか</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>モジュールの初期化/後処理</entry>
       <entry>リクエストの初期化/後処理</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>モジュールグローバル変数の割り当て/解除と初期化</entry>
       <entry>
        リクエスト固有の変数の割り当て/解除と初期化
       </entry>
      </row>
      <row>
       <entry>クラスエントリの登録/解除</entry>
       <entry></entry>
      </row>
      <row>
       <entry>INI エントリの登録/解除</entry>
       <entry></entry>
      </row>
      <row>
       <entry>定数の登録</entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2 xml:id="internals2.structure.lifecycle.info">
   <title><function>phpinfo</function> コールバック</title>
   
   <simpara>
    グローバルの初期化や実際に使われるコールバックとは別に、
    モジュールのライフサイクルにかかわるものがもうひとつあります。
    <function>phpinfo</function> のコールです。
    ユーザーがこれをコールした際の出力には、
    コールした時点で PHP インタプリタに読み込まれている各拡張モジュールからの出力が含まれます。
    結果が HTML であるかそれ以外であるかにはかかわりません。
   </simpara>
   
   <simpara>
    各フォーマットに依存しない出力を得るために、ヘッダファイル
    &quot;ext/standard/info.h&quot; に関数の配列が含まれており、
    これらを用いて標準化された表示要素を生成します。
    特に、以下のいくつかの関数で、おなじみの表を作成します。
   </simpara>
   
   <variablelist>
    <varlistentry>
     <term><function>php_info_print_table_start</function></term>
     <listitem>
      <simpara>
       <function>phpinfo</function> 出力用のテーブルを開きます。
       パラメータは受け取りません。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><function>php_info_print_table_header</function></term>
     <listitem>
      <simpara>
       <function>phpinfo</function> 出力用のテーブルヘッダを表示します。
       1 つのパラメータとしてカラム数を受け取り、それと同じ数の
       <type>char *</type> パラメータで各カラムヘッダのテキストを受け取ります。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><function>php_info_print_table_row</function></term>
     <listitem>
      <simpara>
       <function>phpinfo</function> 出力用のテーブルの行を表示します。
       1 つのパラメータとしてカラム数を受け取り、それと同じ数の
       <type>char *</type> パラメータで各カラムのテキストを受け取ります。
       content.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><function>php_info_print_table_end</function></term>
     <listitem>
      <simpara>
       事前に
       <function>php_info_print_table_start</function> で開いたテーブルを閉じます。
       パラメータは受け取りません。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
   
   <simpara>
    これら 4 つの関数を使用すると、拡張モジュールのほぼすべての機能の情報を出力することができます。
    これは、counter 拡張モジュールの情報出力用コールバックです。
   </simpara>

   <example xml:id="internals2.structure.lifecycle.info.counter">
    <title>counter の PHP_MINFO 関数</title>
    <programlisting role="c">
<![CDATA[
/* {{{ PHP_MINFO(counter) */
PHP_MINFO_FUNCTION(counter)
{
    char        buf[10];

    php_info_print_table_start();
    php_info_print_table_row(2, "counter support", "enabled");
    snprintf(buf, sizeof(buf), "%ld", COUNTER_G(basic_counter_value));
    php_info_print_table_row(2, "Basic counter value", buf);
    php_info_print_table_end();
}
/* }}} */
]]>
    </programlisting>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
