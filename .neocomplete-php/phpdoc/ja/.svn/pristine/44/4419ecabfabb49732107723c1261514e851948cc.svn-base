<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337315 Maintainer: satoruyoshida Status: ready -->

<phpdoc:varentry xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="reserved.variables.server" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>$_SERVER</refname>
  <refname>$HTTP_SERVER_VARS [削除]</refname>
  <refpurpose>サーバー情報および実行時の環境情報</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>
   <varname>$_SERVER</varname> は、ヘッダ、パス、スクリプトの位置のような
   情報を有する配列です。この配列のエントリは、Web サーバーにより
   生成されます。全ての Web サーバーがこれら全てを提供する保障はありません。
   サーバーは、これらのいくつかを省略したり、この一覧にない他のものを
   定義する可能性があります。これらの変数の多くは、
   <link xlink:href="&url.rfc;3875">CGI/1.1 specification</link>
   で定義されています。したがって、これらについては定義されていることを
   期待することができます。
  </para>
  <note>
   <simpara>
     PHP 5.4.0 より前のバージョンでは、<varname>$HTTP_SERVER_VARS</varname> にも同じ初期情報が含まれていましたが、これは
     <link linkend="language.variables.superglobals">スーパーグローバル</link> ではありませんでした
     (<varname>HTTP_SERVER_VARS</varname> と
     <varname>$_SERVER</varname> は異なる変数であり、
     PHP は異なる変数として処理を行うことに注意してください)。
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="indices">
  &reftitle.indices;

  <simpara>
   以下の各要素のいくつかは <varname>$_SERVER</varname> に現れない可能性があります。PHP
   を<link linkend="features.commandline">コマンドライン</link>で実行している場合には、
   使用できるものは僅かであることに注意してください。
  </simpara>

  <para>
   <variablelist>
    <varlistentry>
     <term>'<varname>PHP_SELF</varname>'</term>
     <listitem>
      <simpara>
       現在実行しているスクリプトのファイル名です。
       ドキュメントルートから取得されます。
       例えば、<filename>http://example.com/foo/bar.php</filename>
       というアドレス上にあるスクリプトでは <varname>$_SERVER['PHP_SELF']</varname>
       は <filename>/foo/bar.php</filename> となります。
       <link linkend="language.constants.predefined">__FILE__</link> 定数
       には、カレント(すなわち読み込まれた)ファイルのパスとファイル名が含まれます。
      </simpara>
      <simpara>
       PHP がコマンドラインから実行される場合、PHP 4.3.0 以降、
       この変数にはスクリプト名が含まれます。これより前のバージョンでは、
       この変数は使用できません。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<link linkend="reserved.variables.argv">argv</link>'</term>
     <listitem>
      <simpara>
       スクリプトに渡された引数の配列です。スクリプトがコマンドラインから
       実行された場合、C 言語スタイルでコマンドライン引数に
       アクセスすることができます。GET メソッドを通してコールされた場合には
       検索引数が格納されます。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<link linkend="reserved.variables.argc">argc</link>'</term>
     <listitem>
      <simpara>
       スクリプトに渡されたコマンドライン引数の数
       (コマンドラインから実行した場合) です。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
     <listitem>
      <simpara>
       サーバーが使用している CGI のバージョンです。
       例 '<literal>CGI/1.1</literal>'
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SERVER_ADDR</varname>'</term>
     <listitem>
      <simpara>
       現在のスクリプトが実行されているサーバーの IP アドレスです。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SERVER_NAME</varname>'</term>
     <listitem>
      <simpara>
       現在のスクリプトが実行されているサーバーのホスト名です。
       スクリプトがバーチャルホスト上で実行されている場合は
       そのバーチャルホスト名となります。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SERVER_SOFTWARE</varname>'</term>
     <listitem>
      <simpara>
       レスポンスヘッダ上に書かれている、
       サーバーの認識文字列です。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SERVER_PROTOCOL</varname>'</term>
     <listitem>
      <simpara>
       ページがリクエストされた際のプロトコル名とバージョンです。
       例.'<literal>HTTP/1.0</literal>'
      </simpara>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>'<varname>REQUEST_METHOD</varname>'</term>
     <listitem>
      <simpara>
       ページにアクセスする際に使用されたリクエストのメソッド名です。
       '<literal>GET</literal>', '<literal>HEAD</literal>', 
       '<literal>POST</literal>', '<literal>PUT</literal>' など。
      </simpara>
      <note>
       <para>
        リクエストのメソッドが <literal>HEAD</literal> だった場合、
        PHP スクリプトはヘッダを送信した後（言い換えれば、
        出力バッファリングを行わずに全出力を処理した後）に終了します。
       </para>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REQUEST_TIME</varname>'</term>
     <listitem>
      <simpara>
       リクエストの開始時のタイムスタンプ。PHP 5.1.0 以降で利用可能。
      </simpara>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>'<varname>REQUEST_TIME_FLOAT</varname>'</term>
     <listitem>
      <simpara>
       リクエストの開始時のタイムスタンプ (マイクロ秒までの精度)。
       PHP 5.4.0 以降で利用可能。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>QUERY_STRING</varname>'</term>
     <listitem>
      <simpara>
       ページがアクセスされた際にもし検索引数があればそれが格納されます。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>DOCUMENT_ROOT</varname>'</term>
     <listitem>
      <simpara>
       現在実行されているスクリプトが存在するドキュメントルート
       ディレクトリです。サーバーのコンフィグレーションファイルで
       定義されています。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTP_ACCEPT</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストの <literal>Accept:</literal> ヘッダがもしあれば
       その内容。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストの <literal>Accept-Charset:</literal> ヘッダが
       もしあればその内容。例: '<literal>iso-8859-1,*,utf-8</literal>'
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストに <literal>Accept-Encoding:</literal> ヘッダが
       もしあればその内容。例: '<literal>gzip</literal>'
      </simpara>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストに <literal>Accept-Language:</literal> ヘッダが
       もしあればその内容。例: '<literal>en</literal>'
      </simpara>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>'<varname>HTTP_CONNECTION</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストに <literal>Connection:</literal> ヘッダが
       もしあればその内容。例: '<literal>Keep-Alive</literal>'
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTP_HOST</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストに <literal>Host:</literal> ヘッダが
       もしあればその内容。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTP_REFERER</varname>'</term>
     <listitem>
      <simpara>
       現在のページに遷移する前にユーザーエージェントが参照していた
       ページのアドレス（もしあれば）。これはユーザーエージェントに
       よってセットされます。全てのユーザーエージェントが
       これをセットしているわけではなく、また、<varname>HTTP_REFERER</varname>
       を変更する機能を持つものもあります。
       要するに、信頼するべきものではありません。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTP_USER_AGENT</varname>'</term>
     <listitem>
      <simpara>
       現在のリクエストに <literal>User-Agent:</literal> ヘッダが
       もしあればその内容。ページにアクセスしてきているユーザーエージェント
       のしるしの文字列です。典型的な例は、
       <computeroutput>Mozilla/4.5 [en] (X11; U;
       Linux 2.2.9 i586)</computeroutput>。たとえば、
       <function>get_browser</function> でこの値を使って
       ページの出力をそのブラウザにあわせたものにすることも
       できるでしょう。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>HTTPS</varname>'</term>
     <listitem>
      <simpara>
       スクリプトが HTTPS プロトコルを通じて実行されている場合に
       空でない値が設定されます。
      </simpara>
      <note>
       <simpara>
        ISAPI を IIS で使用している場合は、HTTPS プロトコルを通さないでリクエストが行われたときの値は
        <literal>off</literal> となることに注意しましょう。
       </simpara>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REMOTE_ADDR</varname>'</term>
     <listitem>
      <simpara>
       現在ページをみているユーザーの IP アドレス。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REMOTE_HOST</varname>'</term>
     <listitem>
      <simpara>
       現在のページにアクセスしているホスト名。DNS の逆引き検索は
       ユーザーの <varname>REMOTE_ADDR</varname> に基づいています。
      </simpara>
      <note>
       <simpara>
        Web サーバーがこの値を生成できるように設定されている必要があります。
        例えば Apache の場合 <literal>HostnameLookups On</literal> が
        &httpd.conf; に設定されていなければこの値は生成されません。
        <function>gethostbyaddr</function> もご覧ください。
       </simpara>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REMOTE_PORT</varname>'</term>
     <listitem>
      <simpara>
       ユーザーのマシンから Web サーバーへの通信に使用されているポート番号
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REMOTE_USER</varname>'</term>
     <listitem>
      <simpara>
        認証されたユーザー。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REDIRECT_REMOTE_USER</varname>'</term>
     <listitem>
      <simpara>
        リクエストが内部でリダイレクトされた場合の認証されたユーザー。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SCRIPT_FILENAME</varname>'</term>
     <listitem>
      <para>
       現在実行されているスクリプトの絶対パス
       <note>
        <para>
         <filename>file.php</filename> あるいは
         <filename>../file.php</filename> のような相対パスを指定して
         CLI でスクリプトが実行されている場合、
         <varname>$_SERVER['SCRIPT_FILENAME']</varname> には
         ユーザーが指定した相対パスが含まれます。
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SERVER_ADMIN</varname>'</term>
     <listitem>
      <simpara>
       Web サーバーの設定ファイルの SERVER_ADMIN (Apache の場合)ディレクティブ
       にセットされている値。スクリプトがバーチャルホスト上で
       実行されている場合、バーチャルホストに対して値が定義されます。
      </simpara>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>'<varname>SERVER_PORT</varname>'</term>
     <listitem>
      <simpara>
       Web サーバーの通信ポートとして使用されているポート番号。デフォルトでは
       '<literal>80</literal>' ですが、例えば SSL を使用している場合は
       セキュア HTTP ポートとして設定されている値に変わります。
      </simpara>
      <note>
       <simpara>
        Apache 2 では、<literal>UseCanonicalName = On</literal> だけでなく
        <literal>UseCanonicalPhysicalPort = On</literal> も設定しないと物理ポート
        (実際のポート) を取得できません。設定しなければ、
        この値は詐称できる状態になり、
        物理ポートを返さなくなるかもしれません。
        セキュリティに依存するコンテキストで、この値に頼るのは安全ではありません。
       </simpara>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SERVER_SIGNATURE</varname>'</term>
     <listitem>
      <simpara>
       サーバー上で生成されたページに追加される、
       サーバーのバージョン名とバーチャルホスト名の文字列。
       Web サーバーの設定で有効になっていることが必要です。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>PATH_TRANSLATED</varname>'</term>
     <listitem>
      <simpara>
       バーチャルからリアルへのマッピングがなされた後の、
       現在のスクリプトのファイルシステム上（ドキュメントルートではなく）
       でのパス。
      </simpara>
      <note>
       <simpara>
        PHP 4.3.2 以降、<envar>PATH_TRANSLATED</envar> は、
        Apache 2 <acronym>SAPI</acronym> において暗黙のうちに設定されなく
        なりました。一方、Apache 1 では、この値が Apache により設定されない場合、
        <envar>SCRIPT_FILENAME</envar> と同じ値に設定されます。
        この変更は、<envar>PATH_TRANSLATED</envar> は
        <envar>PATH_INFO</envar> が定義されている場合のみ
        存在するべきであるという <acronym>CGI</acronym> の規約を満たすために
        行われました。
       </simpara>
       <simpara>
        Apache 2 ユーザーは、<envar>PATH_INFO</envar> を定義するために
        <filename>httpd.conf</filename> の中で
        <literal>AcceptPathInfo = On</literal> 
        を使用することが可能です。
       </simpara>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>SCRIPT_NAME</varname>'</term>
     <listitem>
      <simpara>
       現在のスクリプトのパス。
       スクリプト自身のページを指定するのに有用です。
       <link linkend="language.constants.predefined">__FILE__</link>
       定数には、カレント(すなわち読み込まれた)ファイルのパスとファイル名が
       含まれます。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>REQUEST_URI</varname>'</term>
     <listitem>
      <simpara>
       ページにアクセスするために指定された URI。例えば、
       '<literal>/index.html</literal>'
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>PHP_AUTH_DIGEST</varname>'</term>
     <listitem>
      <simpara>
       HTTP ダイジェスト認証を
       行っている場合、クライアントから送られた 'Authorization' ヘッダの
       内容が設定されます（適切な認証処理を行うために利用します）。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>PHP_AUTH_USER</varname>'</term>
     <listitem>
      <simpara>
       HTTP 認証しているときにそのユーザー名がセットされます。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>PHP_AUTH_PW</varname>'</term>
     <listitem>
      <simpara>
       HTTP 認証しているときにそのユーザーの
       パスワードがセットされます。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>AUTH_TYPE</varname>'</term>
     <listitem>
      <simpara>
       HTTP 認証しているときにその認証形式がセットされます。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>PATH_INFO</varname>'</term>
     <listitem>
      <simpara>
       実際のスクリプトファイル名とクエリ文字列の間にある、クライアントが提供するパス名情報。
       たとえば、現在のスクリプトに
       <filename>http://www.example.com/php/path_info.php/some/stuff?foo=bar</filename>
       という URL でアクセスしていた場合の <varname>$_SERVER['PATH_INFO']</varname>
       は <literal>/some/stuff</literal> となります。
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>'<varname>ORIG_PATH_INFO</varname>'</term>
     <listitem>
      <simpara>
       PHP で処理される前の '<varname>PATH_INFO</varname>' の原本。
      </simpara>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.0</entry>
       <entry>
        <varname>$HTTP_SERVER_VARS</varname> は使えなくなりました。
        長い形式の配列への登録が廃止されたからです。
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        <link linkend="ini.register-long-arrays">register_long_arrays</link>
        ディレクティブを使って <varname>$HTTP_SERVER_VARS</varname>
        を有効にする機能が、非推奨になりました。
       </entry>
      </row>
      <row>
       <entry>4.1.0</entry>
       <entry>
        <varname>$_SERVER</varname> が導入され、
        <varname>$HTTP_SERVER_VARS</varname>
        は非推奨となりました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example xml:id="variable.server.basic">
    <title><varname>$_SERVER</varname> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['SERVER_NAME'];
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
www.example.com
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  &note.is-superglobal;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="book.filter">filter 拡張モジュール</link></member>
   </simplelist>
  </para>
 </refsect1>

</phpdoc:varentry>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

