<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333719 Maintainer: takagi Status: ready -->
<sect1 xml:id="internals2.memory.tsrm" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>スレッドセーフなリソースマネージャ</title>
 
 <simpara>
  スレッドセーフを有効にして PHP をビルドするときには、エンジン内で個々のコンテキストを分離する方法が必要になります。
  つまり、プロセス内の各スレッドが、互いに影響を及ぼさずに個別のリクエストを処理できるようにするということです。
  TSRM は PHP における全能の神です。拡張モジュールの作者は、ほとんど何もしなくても、
  自作のモジュールをスレッドセーフ環境と非スレッドセーフ環境の両方に対応させることができます。
 </simpara>
 
 <example xml:id="internals2.structure.globals.using.accessor2">
  <title>モジュールグローバルへのアクセス用マクロ</title>
  <programlisting role="c">
<![CDATA[
#ifdef ZTS
#define COUNTER_G(v) TSRMG(counter_globals_id, zend_counter_globals *, v)
#else
#define COUNTER_G(v) (counter_globals.v)
#endif
]]>
  </programlisting>
 </example>
 
 <simpara>
  このコード片は、拡張モジュールの作者がグローバルアクセサ—を定義する方法を示すものです。
  TSRMG マクロは、識別子と型キャストそして要素名を受け取ります。
  識別子は、モジュールの初期化時に TSRM が代入します。
  グローバルアクセサをこのように宣言しておくと、その拡張モジュールは、
  スレッドセーフと非スレッドセーフのどちらのアーキテクチャでも同じロジックで安全に扱えるようになります。
 </simpara>
 
 <simpara>
  TSRM は、PHP 内部のすべてのグローバル構造 (実行環境のグローバルから拡張モジュールのグローバルまで)
  の分離や安全性を管理し、隔離したストレージへのポインタをほとんどの API 関数に渡します。
  TSRMLS_C と TSRMLS_CC の二つのマクロは、それぞれ "thread safe local storage"、"thread safe local storage prefixed with a comma"
  を表します。
 </simpara>
 
 <simpara>
  関数で TSRM へのポインタが必要な場合は、マクロ TSRMLS_D あるいは TSRMLS_DC を関数のプロトタイプで使います。
  これらはそれぞれ、"thread safe local storage only" と "thread safe local storage prefixed with a comma" を表します。
  エンジン内のマクロの多くは TSRM を参照しているので、ほとんどの場合、TSRM を受け付けるようにしておくほうが得策です。
  そうしておけば、もし TSRM を利用することになったとしても、実行中にポインタを取得する必要がなくなります。
 </simpara>
 
 <simpara>
  TSRM はスレッドローカルであり、中には互換性の関係で TSRM を直接使えない関数もあります。
  そのため、TSRMLS_FETCH マクロが用意されました。これは、TSRM にスレッドローカルストレージへのポインタを取得させるようリクエストします。
  可能な限り、このマクロは使わないようにしましょう。スレッドセーフ環境では、実行のコストがかかってしまうからです。
 </simpara>
 
 <note>
  <simpara>
   拡張モジュールを開発していると、"tsrm_ls is undefined" を含むエラーやその影響を受けたエラーが発生することがあります。
   これは、そのスコープで TSRMLS が定義されていないことに起因するものです。
   このエラーを修正するには、関数の宣言時に適切なマクロを使って TSRMLS を受け付けるようにします。
   関数のプロトタイプを変更できない場合は、関数の中で TSRMLS_FETCH を呼ばなければいけません。
  </simpara>
 </note>
 
 <simpara>
  これ以降で説明する機能は、TSRM を高度に使いこなすためのものです。
  普通は、拡張モジュールが直接 TSRM を操作することはありません。
  拡張モジュールのプログラマーがは、TSRM の上位にある API (たとえば モジュールグローバル API)
  を使うべきです。
 </simpara>
 
 <table xml:id="internals2.memory.tsrm.iapis">
  <title>TSRM の内部関数</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>プロトタイプ</entry>
     <entry>説明</entry>
    </row>
   </thead>
   <tbody>
    
    <row> 
     <entry><code>typedef int ts_rsrc_id</code></entry>
     <entry>リソースを数値 ID で表すための型定義。</entry>
    </row>
    
    <row>
     <entry><code>int tsrm_startup(int expected_threads, int expected_resources, int debug_level, char *debug_filename)</code></entry>
     <entry>
      <code>expected_threads</code> と <code>expected_resources</code> は、ハードリミットではありません。
      <code>debug_level</code> と <code>debug_filename</code> が効果を発揮するのは、
      Windows 上でデバッグモードの場合か TSRM_DEBUG を定義した場合だけです。
      サーバーの立ち上げ時に、ZTS モードのプロセスごとに呼ばれます。
     </entry>
    </row>
    
    <row>
     <entry><code>void tsrm_shutdown(void)</code></entry>
     <entry>
      プロセスの最後に呼ぶ必要があります。
      ZTS モードのすべての TSRM ストレージを破棄して解放します。
     </entry>
    </row>
    
    <row>
     <entry><code>ts_rsrc_id ts_allocate_id(ts_rsrc_id *rsrc_id, size_t size, ts_allocate_ctor ctor, ts_allocate_dtor dtor)</code></entry>
     <entry>
      <code>size</code> バイトのスレッドセーフポインタを確保してポインタ上で
      <code>ctor</code> を呼び、id を割り当てて <code>rsrc_id</code> に代入し、
      リソースを解放したときには <code>dtor</code> を呼びます。
      ZTS モードでは、この API を使ってモジュールグローバルを分離します。
     </entry>
    </row>
    
    <row>
     <entry><code>void *ts_resource_ex(ts_rsrc_id id, THREAD_T *th_id)</code></entry>
     <entry>
      <code>id</code> で割り当てられたリソースを、
      スレッド <code>th_id</code> が作ったエントリから取得します。
     </entry>
    </row>
    
    <row>
     <entry>
      <code>void *ts_resource(ts_rsrc_id id)</code>
     </entry>
     <entry>
      事前に確保したリソース <code>id</code> を、呼び出し元スレッドが作ったエントリから取得します。
     </entry>
    </row>
    
    <row>
     <entry><code>void ts_free_thread(void)</code></entry>
     <entry>
      呼び出し元スレッドのエントリを破棄して解放します。
      現時点では、この API を使うのは ISAPI モジュールだけです。
     </entry>
    </row>
    
    <row>
     <entry>
      <code>void ts_free_id(ts_rsrc_id id)</code>
     </entry>
     <entry>
      事前に確保したリソース <code>id</code> を破棄します。
      この API を使うと、ZTS モードでのモジュールグローバルの後始末もします。
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 
 <note>
  <simpara>
   これら以外にも、インタプリタのコンテキストを作ったり破棄したりする TSRM API 関数があります。
   しかし、これらの機能についてはこのマニュアルで扱う範囲を超えるので、
   詳細は TSRM/TSRM.h を参照ください。
  </simpara>
 </note>
 
 <table xml:id="internals2.memory.tsrm.mapis">
  <title>TSRM ミューテックス API</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>プロトタイプ</entry>
     <entry>説明</entry>
    </row>
   </thead>
   <tbody>
    
    <row>
     <entry><code>MUTEX_T tsrm_mutex_alloc(void)</code></entry>
     <entry>その環境用の適切な MUTEX_T を確保して、それを返します。</entry>
    </row>
    
    <row>
     <entry><code>int tsrm_mutex_lock(MUTEX_T mutexp)</code></entry>
     <entry>
      <code>mutexp</code> を、呼び出し側スレッド用にロックします。
     </entry>
    </row>
    
    <row>
     <entry><code>int tsrm_mutex_unlock(MUTEX_T mutexp)</code></entry>
     <entry>
      <code>mutexp</code> の呼び出し側スレッド用のロックを解除します。
     </entry>
    </row>
    
    <row>
     <entry><code>void tsrm_mutex_free(MUTEX_T mutexp);</code></entry>
     <entry>
      事前に確保して、既にロック解除済みの <code>mutexp</code> を、破棄して解放します。
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 
 <note>
  <simpara>
   ミューテックス API は、TSRM が公開するものです。
   しかし、その内部的な利用法は、ここで扱うにはあまりにも幅広すぎます。
   そのため、基本的な機能とプロトタイプだけの紹介にとどめます。
  </simpara>
 </note>
</sect1>
