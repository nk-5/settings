<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 323642 Maintainer: takagi Status: ready -->
 <part xml:id="internals2.counter" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>"counter" 拡張モジュール - サンプル</title>
  
  <partintro xml:id="internals2.counter.preface">
   <title>序文</title>
   <simpara>
    この Zend のドキュメントでは、ひとつのサンプルモジュールを通して
    さまざまな考え方を説明していきます。サンプルとして使用するのが "counter"
    拡張モジュールです。これは実在のものではありませんが
    Zend モジュールとしてひととおり機能するものであり、
    さまざまな Zend API をできるだけ多く使用するようにしています。
    この章では、利用者側から見たこのサンプルモジュールのインターフェイスを説明します。
   </simpara>
  
   <note>
    <simpara>
     "counter" は、実用性はまったくありません。
     というのも、その機能は PHP のコードレベルではるかに効率的に実装できるものだからです。
    </simpara>
   </note>
  </partintro>
  
  <chapter xml:id="internals2.counter.setup">
   &reftitle.setup;

   <section xml:id="internals2.counter.intro">
    &reftitle.intro;
  
    <simpara>
     "counter" 拡張モジュールは、PHP のコード内で任意の数のカウンターを使えるようにします。
     カウンターは呼び出し元が指定したときにリセットされます。
    </simpara>
   
    <simpara>
     "counter" のインターフェイスは、
     「基本」「拡張」「オブジェクト指向」の 3 通りがあります。
     基本インターフェイスは、単一のカウンタを INI 設定で制御し、
     関数コールで実行します。拡張インターフェイスは、
     任意の数のカウンタリソースを使用することができます。
     このカウンタは、単一の PHP リクエスト内だけでなく
     複数のリクエストにまたがって使用することもできます。
     オブジェクト指向インターフェイスは、基本インターフェイスと
     拡張インターフェイスの両方を <classname>Counter</classname>
     クラスに組み込んだものです。
    </simpara>
   </section>
  
   <section xml:id="internals2.counter.ini">
    &reftitle.runtime;

    &extension.runtime;
    <table>
     <title>Counter の設定オプション</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>名前</entry>
        <entry>デフォルト</entry>
        <entry>変更の可否</entry>
        <entry>変更履歴</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>counter.reset_time</entry>
        <entry>COUNTER_RESET_PER_REQUEST</entry>
        <entry>PHP_INI_ALL</entry>
        <entry></entry>
       </row>
       <row>
        <entry>counter.save_path</entry>
        <entry>""</entry>
        <entry>PHP_INI_ALL</entry>
        <entry></entry>
       </row>
       <row>
        <entry>counter.initial_value</entry>
        <entry>"0"</entry>
        <entry>PHP_INI_ALL</entry>
        <entry></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <simpara>&ini.php.constants;</simpara>

    <variablelist>
     <varlistentry xml:id="internals2.counter.ini.reset-time">
      <term>
       <parameter>counter.reset_time</parameter>
       <type>integer</type>
      </term>
      <listitem>
       <simpara>
        <varname>counter.reset_time</varname> は、
        基本インターフェイスで使用するカウンタをリセットするよう
        "counter" に通知します。
        <constant>COUNTER_RESET_*</constant> 定数 (以下を参照ください)
        のいずれかを指定します。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="internals2.counter.ini.save-path">
      <term>
       <parameter>counter.save_path</parameter>
       <type>string</type>
      </term>
      <listitem>
       <simpara>
        複数の PHP リクエストにまたがって持続する
        (COUNTER_RESET_NEVER あるいは COUNTER_FLAG_SAVE が設定されているカウンタの)
        データの保存場所を "counter" に通知します。
        ファイルがこのパスに作成されるので、
        このパスに対する読み書きの権限が
        PHP を実行しているユーザーに必要です。
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="internals2.counter.ini.initial-value">
      <term>
       <parameter>counter.initial_value</parameter>
       <type>integer</type>
      </term>
      <listitem>
       <simpara>
        基本インターフェイスで使用するカウンタの初期値を設定します。
        カウンタをリセットすると、常にこの値に戻ります。
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>

   </section>

   <section xml:id="internals2.counter.resources">
    &reftitle.resources;
   
    <simpara>
     "counter" 拡張モジュールでは、カウンタリソースを定義します。
    </simpara>
   </section>

  </chapter>
  
  <appendix xml:id="internals2.counter.constants">
   &reftitle.constants;
   &extension.constants;

   <variablelist>
    <varlistentry>
     <term>
      <constant>COUNTER_FLAG_PERSIST</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       このフラグを指定したカウンタは、持続的なリソースとなります。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_FLAG_SAVE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       このフラグを指定したカウンタは保存され、別に起動した PHP でも使用できるようになります。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_FLAG_NO_OVERWRITE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       このフラグを指定すると、既存のカウンタと同じ名前で
       <function>counter_create</function>
       を実行したときに既存のカウンタを上書きしません。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_META_NAME</constant>
      (<type>string</type>)
     </term>
     <listitem>
      <simpara>
       この定数を渡すと、カウンタリソースあるいはオブジェクトの名前を取得することができます。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_META_IS_PERISTENT</constant>
      (<type>string</type>)
     </term>
     <listitem>
      <simpara>
       この定数を渡すと、カウンタリソースあるいはオブジェクトが持続的なものかどうか
       (<constant>COUNTER_FLAG_PERSIST</constant> フラグが立っているかどうか)
       を知ることができます。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_RESET_NEVER</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       カウンタはリセットされません。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_RESET_PER_LOAD</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       PHP を起動するたびにカウンタをリセットします。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>COUNTER_RESET_PER_REQUEST</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       リクエストのたびにカウンタをリセットします。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </appendix>

  <chapter xml:id="internals2.counter.examples">
   &reftitle.examples;
   
   <section xml:id="internals2.counter.examples.basic">
    <title>基本インターフェイス</title>
    
    <simpara>
     基本インターフェイスで提供する 3 つのシンプルな関数について、
     ここで説明します。
    </simpara>
   
    <example xml:id="internals2.counter.examples.basic.ex">
     <title>"counter" の基本インターフェイス</title>
     <programlisting role="php">
<![CDATA[
<?php
$starting_counter_value = counter_get();
counter_bump(1);
$second_counter_value = counter_get();
counter_reset();
$final_counter_value = counter_get();
printf("%3d %3d %3d", $starting_counter_value, $second_counter_value, $final_counter_value);
?>
]]>
     </programlisting>
    </example>
    &example.outputs;
    <screen>
<![CDATA[
  0   1   0]]></screen>
   
    <simpara>
     基本インターフェイスでは
     <link linkend="internals2.counter.constants">INI 設定</link>
     もいくつか使用します。
    </simpara>
   </section>
   
   <section xml:id="internals2.counter.examples.extended">
    <title>拡張インターフェイス</title>
    
    <simpara>
     拡張インターフェイスの関数群を使用すると、
     名前つきのカウンタを好きなだけ作成してそれぞれ別の設定にすることができます。
     基本インターフェイスと拡張インターフェイスを両方同時に使うことも可能です。
    </simpara>
    
    <example xml:id="internals2.counter.examples.extended.ex">
     <title>"counter" の拡張インターフェイス</title>
     <programlisting role="php">
<![CDATA[
<?php
function print_counter_info($counter)
{
    if (is_resource($counter)) {
        printf("Counter's name is '%s' and is%s persistent. Its current value is %d.\n",
            counter_get_meta($counter, COUNTER_META_NAME),
            counter_get_meta($counter, COUNTER_META_IS_PERSISTENT) ? '' : ' not',
            counter_get_value($counter));
    } else {
      print "Not a valid counter!\n";
    }
}

if (($counter_one = counter_get_named("one")) === NULL) {
    $counter_one = counter_create("one", 0, COUNTER_FLAG_PERSIST);
}
counter_bump_value($counter_one, 2);
$counter_two = counter_create("two", 5);
$counter_three = counter_get_named("three");
$counter_four = counter_create("four", 2, COUNTER_FLAG_PERSIST | COUNTER_FLAG_SAVE | COUNTER_FLAG_NO_OVERWRITE);
counter_bump_value($counter_four, 1);

print_counter_info($counter_one);
print_counter_info($counter_two);
print_counter_info($counter_three);
print_counter_info($counter_four);
?>
]]>
     </programlisting>
     <simpara>
      これをはじめて実行したときの結果は次のようになります。
     </simpara>
     <screen>
<![CDATA[
Counter's name is 'one' and is persistent. Its current value is 2.
Counter's name is 'two' and is not persistent. Its current value is 5.
Not a valid counter!
Counter's name is 'four' and is persistent. Its current value is 3.]]></screen>
     <simpara>
      同じ PHP インスタンスでもう一度実行すると、結果はこのようになります。
     </simpara>
     <screen>
<![CDATA[
Counter's name is 'one' and is persistent. Its current value is 4.
Counter's name is 'two' and is not persistent. Its current value is 5.
Not a valid counter!
Counter's name is 'four' and is persistent. Its current value is 4.]]></screen>
     <simpara>
      さらにもう一度、今度は <emphasis>別の PHP
      インスタンスで</emphasis> 実行したときの結果は次のとおりです。
     </simpara>
     <screen>
<![CDATA[
Counter's name is 'one' and is persistent. Its current value is 2.
Counter's name is 'two' and is not persistent. Its current value is 5.
Not a valid counter!
Counter's name is 'four' and is persistent. Its current value is 5.]]></screen>
    </example>
   </section>
   
   <section xml:id="internals2.counter.examples.objective">
    <title>オブジェクト指向のインターフェイス</title>
    
    <simpara>
     このインターフェイスは、拡張インターフェイスをオブジェクト指向で扱えるようにしたものです。
     以下の例では、先ほどの例をオブジェクト指向で書き直したものをごらんいただきます。
     この例の出力は、先ほどのものとまったく同じです。
     ただ、"Not a valid counter!" と表示されるかわりに PHP の警告が発生します。
     これは、変数 <literal>$counter_three</literal> がオブジェクトでないためです。
     この例では、拡張モジュールで定義されている <classname>Counter</classname>
     クラスのサブクラスを作成できることも確認できます。
     また、カウンタの値がメソッドではなくインスタンス変数で表されることもわかります。
    </simpara>
    
    <example xml:id="internals2.counter.examples.objective.ex">
     <title>"counter" のオブジェクト指向インターフェイス</title>
     
     <programlisting role="php">
<![CDATA[
<?php
class MyCounter extends Counter
{
    public function printCounterInfo() {
        printf("Counter's name is '%s' and is%s persistent. Its current value is %d.\n",
            $this->getMeta(COUNTER_META_NAME),
            $this->getMeta(COUNTER_META_IS_PERSISTENT) ? '' : ' not',
            $this->value);
    }
}

Counter::setCounterClass("MyCounter");
if (($counter_one = Counter::getNamed("one")) === NULL) {
    $counter_one = new Counter("one", 0, COUNTER_FLAG_PERSIST);
}
$counter_one->bumpValue(2); // we aren't allowed to "set" the value directly
$counter_two = new Counter("two", 5);
$counter_three = Counter::getNamed("three");
$counter_four = new Counter("four", 2, COUNTER_FLAG_PERSIST | COUNTER_FLAG_SAVE | COUNTER_FLAG_NO_OVERWRITE);
$counter_four->bumpValue(1);

$counter_one->printCounterInfo();
$counter_two->printCounterInfo();
$counter_three->printCounterInfo();
$counter_four->printCounterInfo();
?>
]]>
     </programlisting>
    </example>
   </section>

  </chapter>
  
  <reference xml:id="internals2.counter.counter-class">
   <title>Counter クラス</title>
   <titleabbrev>Counter</titleabbrev>
   
   <partintro>
    <section xml:id="internals2.counter.counter-class.intro">
     &reftitle.intro;
     <simpara>
      単一のカウンタオブジェクトを表します。
     </simpara>
    </section>
   
    <section xml:id="internals2.counter.counter-class.synopsis">
     &reftitle.classsynopsis;
     
     <classsynopsis>
      <ooclass><classname>Counter</classname></ooclass>
     
      <classsynopsisinfo>
       <ooclass><classname>Counter</classname></ooclass>
      </classsynopsisinfo>
 
      <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('internals2.counter.counter-class')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[1])" />
      <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('internals2.counter.counter-class')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
     </classsynopsis>
    </section>
   </partintro>
   
   <refentry xml:id="internals2.counter.counter-class.construct" role="noversion">
    <refnamediv>
     <refname>Counter::__construct</refname>
     <refpurpose>
      単一の数値を保持する Counter のインスタンスを作成する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <constructorsynopsis>
      <methodname>Counter::__construct</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>initial_value</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>flags</parameter></methodparam>
     </constructorsynopsis>
     <simpara>
      単一の数値を保持する Counter のインスタンスを作成します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term>name</term>
       <listitem>
        <simpara>
         カウンタの名前。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>initial_value</term>
       <listitem>
        <simpara>
         カウンタの初期値。デフォルトはゼロ (0) です。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>flags</term>
       <listitem>
        <simpara>
         カウンタのフラグ。
         <literal>COUNTER_FLAG_*</literal> 定数の中から選択します。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      成功した場合に Counter オブジェクトを返します。
     </simpara>
    </refsect1>
    <refsect1 role="errors">
     &reftitle.errors;
     <simpara>
      <function>Counter::__construct</function>
      は、問題が発生した場合に例外をスローします。
     </simpara>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.getvalue" role="noversion">
    <refnamediv>
     <refname>Counter::getValue</refname>
     <refpurpose>
      カウンタの現在値を取得する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>integer</type><methodname>Counter::getValue</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>Counter::getValue</function> は、カウンタの現在値を返します。
     </simpara>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>Counter::getValue</function> は整数値を返します。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>Counter::bumpValue</function></member>
      <member><function>Counter::resetValue</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.bumpvalue" role="noversion">
    <refnamediv>
     <refname>Counter::bumpValue</refname>
     <refpurpose>
      カウンタの現在値を変更する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <methodname>Counter::bumpValue</methodname>
      <methodparam><type>integer</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::bumpValue</function> は、カウンタの現在値を更新します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>offset</parameter></term>
       <listitem>
        <simpara>
         カウンタの値を変更する量。負の値を指定することも可能です。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>Counter::getValue</function></member>
      <member><function>Counter::resetValue</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.resetvalue" role="noversion">
    <refnamediv>
     <refname>Counter::resetValue</refname>
     <refpurpose>
      カウンタの現在値をリセットする
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <void /><methodname>Counter::resetValue</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>Counter::resetValue</function> は、
      カウンタの現在値をもとの初期値に戻します。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>Counter::getValue</function></member>
      <member><function>Counter::bumpValue</function></member>
     </simplelist>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.counter-class.getmeta" role="noversion">
    <refnamediv>
     <refname>Counter::getMeta</refname>
     <refpurpose>
      カウンタのメタ情報を返す
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>Counter::getMeta</methodname>
      <methodparam><type>integer</type><parameter>attribute</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::getMeta</function> は、カウンタのメタ情報を返します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>attribute</parameter></term>
       <listitem>
        <simpara>
         取得したいメタ情報。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>Counter::getMeta</function> は、
      指定されたメタ情報に応じてさまざまな型の値を返します。
     </simpara>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.counter-class.getnamed" role="noversion">
    <refnamediv>
     <refname>Counter::getNamed</refname>
     <refpurpose>
      既存のカウンタを取得する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <modifier>static</modifier>
      <type>Counter</type><methodname>Counter::getNamed</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::getNamed</function> は、
      指定した名前のカウンタが存在する場合にそのカウンタを返し、
      存在しない場合は &null; を返します。
      これは静的関数です。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
         取得したいカウンタの名前。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>Counter::getNamed</function> は、
      指定した名前のカウンタが存在する場合にそのカウンタ、
      存在しない場合に &null; を返します。
     </simpara>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.counter-class.setcounterclass" role="noversion">
    <refnamediv>
     <refname>Counter::setCounterClass</refname>
     <refpurpose>
      <methodname>Counter::getNamed</methodname> が返すクラスを設定する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <modifier>static</modifier>
      <void /><methodname>Counter::setCounterClass</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>Counter::setCounterClass</function> は、
      <function>Counter::getNamed</function> が返すオブジェクトのクラスを変更します。
      設定するクラスは public コンストラクタを持っていてはいけません。また、
      <classname>Counter</classname> のサブクラスである必要があります。
      これらの条件を満たさない場合は fatal エラーが発生します。
      これは静的関数です。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
         使用するクラスの名前。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
   </refentry>

  </reference>
  
  <reference xml:id="internals2.counter.basic-interface">
   <title>基本インターフェイス</title>
   <titleabbrev>基本</titleabbrev>

   <refentry xml:id="internals2.counter.function.counter-get" role="noversion">
    <refnamediv>
     <refname>counter_get</refname>
     <refpurpose>
      基本カウンタの現在の値を取得する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>integer</type><methodname>counter_get</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>counter_get</function> は、
      基本インターフェイスのカウンタの現在値を返します。
     </simpara>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get</function> は整数値を返します。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_bump</function></member>
      <member><function>counter_reset</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-bump" role="noversion">
    <refnamediv>
     <refname>counter_bump</refname>
     <refpurpose>
      基本カウンタの現在の値を更新する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <void /><methodname>counter_bump</methodname>
      <methodparam><type>integer</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_bump</function> は、
      基本インターフェイスのカウンタの現在値を更新します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>offset</parameter></term>
       <listitem>
        <simpara>
         カウンタの値の変更量。負の値を指定することもできます。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get</function></member>
      <member><function>counter_reset</function></member>
     </simplelist>
    </refsect1>
   </refentry>
  
   <refentry xml:id="internals2.counter.function.counter-reset" role="noversion">
    <refnamediv>
     <refname>counter_reset</refname>
     <refpurpose>
      基本カウンタの現在の値をリセットする
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <void /><methodname>counter_reset</methodname>
      <void/>
     </methodsynopsis>
     <simpara>
      <function>counter_reset</function> は、
      基本インターフェイスのカウンタの現在値を初期値に戻します。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get</function></member>
      <member><function>counter_bump</function></member>
     </simplelist>
    </refsect1>
   </refentry>

  </reference>

  <reference xml:id="internals2.counter.extended-interface">
   <title>拡張インターフェイス</title>
   <titleabbrev>拡張</titleabbrev>

   <refentry xml:id="internals2.counter.function.counter-create" role="noversion">
    <refnamediv>
     <refname>counter_create</refname>
     <refpurpose>
      単一の数値を保持するカウンタを作成する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>counter_create</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>initial_value</parameter></methodparam>
      <methodparam choice="opt"><type>integer</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      単一の数値を保持するカウンタを作成します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term>name</term>
       <listitem>
        <simpara>
         カウンタの名前。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>initial_value</term>
       <listitem>
        <simpara>
         カウンタの初期値。デフォルトはゼロ (0)。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>flags</term>
       <listitem>
        <simpara>
         カウンタのフラグ。
         <literal>COUNTER_FLAG_*</literal> 定数群から選択します。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      カウンタリソースを返します。
     </simpara>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-get-value" role="noversion">
    <refnamediv>
     <refname>counter_get_value</refname>
     <refpurpose>
      カウンタリソースの現在の値を取得する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>integer</type><methodname>counter_get_value</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_get_value</function> は、
      カウンタリソースの現在の値を返します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         操作するカウンタリソース。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get_value</function> は整数値を返します。
     </simpara>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_bump_value</function></member>
      <member><function>counter_reset_value</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-bump-value" role="noversion">
    <refnamediv>
     <refname>counter_bump_value</refname>
     <refpurpose>
      カウンタリソースの現在の値を変更する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <void /><methodname>counter_bump_value</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
      <methodparam><type>integer</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_bump_value</function> は、
      カウンタリソースの現在の値を更新します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         操作するカウンタリソース。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>offset</parameter></term>
       <listitem>
        <simpara>
         カウンタの値の変更量。負の値を指定することもできます。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get_value</function></member>
      <member><function>counter_reset_value</function></member>
     </simplelist>
    </refsect1>
   </refentry>

   <refentry xml:id="internals2.counter.function.counter-reset-value" role="noversion">
    <refnamediv>
     <refname>counter_reset_value</refname>
     <refpurpose>
      カウンタリソースの現在の値をリセットする
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <void /><methodname>counter_reset_value</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_reset_value</function> は、
      カウンタリソースの現在の値を元の初期値に戻します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         操作するカウンタリソース。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="seealso">
     &reftitle.seealso;
     <simplelist>
      <member><function>counter_get_value</function></member>
      <member><function>counter_bump_value</function></member>
     </simplelist>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.function.counter-get-meta" role="noversion">
    <refnamediv>
     <refname>counter_get_meta</refname>
     <refpurpose>
      カウンタリソースについてのメタ情報を返す
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>counter_get_meta</methodname>
      <methodparam><type>resource</type><parameter>counter</parameter></methodparam>
      <methodparam><type>integer</type><parameter>attribute</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_get_meta</function> は、
      カウンタリソースについてのメタ情報を返します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>counter</parameter></term>
       <listitem> 
        <simpara>
         操作するカウンタリソース。
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>attribute</parameter></term>
       <listitem>
        <simpara>
         取得したいメタ情報。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get_meta</function> は、
      要求されたメタ情報に応じてさまざまな型の値を返します。
     </simpara>
    </refsect1>
   </refentry>
   
   <refentry xml:id="internals2.counter.function.counter-get-named" role="noversion">
    <refnamediv>
     <refname>counter_get_named</refname>
     <refpurpose>
      指定した名前の既存のカウンタを取得する
     </refpurpose>
    </refnamediv>
    <refsect1 role="description">
     &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>Counter::getNamed</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
     </methodsynopsis>
     <simpara>
      <function>counter_get_named</function> は、
      指定した名前のカウンタが存在する場合にそれを返します。
      存在しない場合は &null; を返します。
     </simpara>
    </refsect1>
    <refsect1 role="parameters">
     &reftitle.parameters;
     <variablelist>
      <varlistentry>
       <term><parameter>name</parameter></term>
       <listitem>
        <simpara>
         探したいカウンタの名前。
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect1>
    <refsect1 role="returnvalues">
     &reftitle.returnvalues;
     <simpara>
      <function>counter_get_named</function> は、
      指定した名前のカウンタが存在する場合にそれを返します。
      存在しない場合は &null; を返します。
     </simpara>
    </refsect1>
   </refentry>

  </reference>

 </part>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
