<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: takagi Status: ready -->
 <sect1 xml:id="internals2.structure.globals" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>拡張モジュールのグローバル変数</title>

  <sect2 xml:id="internals2.structure.globals.intro">
   <title>PHP 拡張モジュールのグローバル変数とは</title>

   <simpara>
    C のような言語における "グローバル" 変数とは、
    特別な宣言をしなくてもすべての関数からアクセスできる変数のことです。
    この昔ながらのグローバル変数には、いくつかの弱点があります。
   </simpara>

   <itemizedlist>

    <listitem>
     <simpara>
      コンパイラに特別なオプションを設定しない限り、
      グローバル変数はプログラム内の任意の場所からアクセスしたり変更したりできるようになります。
      実際にコード中でそれが必要になるかどうかにかかわらずです。
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      標準的なグローバル変数はスレッドセーフではありません。
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      変数そのものだけでなく、グローバル変数の名前もグローバルとなります。
     </simpara>
    </listitem>

   </itemizedlist>

   <simpara>
    PHP 拡張モジュールのグローバル変数は、どちらかというと
    "extension state (拡張モジュールの状態)" と呼んだほうが適切でしょう。
    ほとんどのモジュールは、関数コールの間に自分が何をしているのかを覚えておく必要があるからです。
    "counter" 拡張モジュールは、その最たる例でしょう。
    基本インターフェイスでは、カウンタの値を永続化させています。
    Zend や PHP にあまりなじみのないプログラマのみなさんは、<filename>counter.c</filename>
    で値を保存するときにこんな風にしてしまいがちです。
   </simpara>

   <example xml:id="internals2.structure.globals.intro.wrong-way">
    <title>カウンタの基本インターフェイスで値を保存するときの間違った方法</title>
    <programlisting role="c">
<![CDATA[
/* ... */
static long basic_counter_value;

/* ... */

PHP_FUNCTION(counter_get)
{
    RETURN_LONG(basic_counter_value);
}
]]>
    </programlisting>
   </example>

   <simpara>
    上っ面だけ見ればこれは正しそうに見えるでしょうし、
    実際のところ単純なテストでは正しく動作します。
    しかし、複数の PHP が同一スレッドで動作することもよくあります。
    そんな場合は counter モジュールの複数のインスタンスが存在することになります。
    そして複数のスレッドが同じカウンタの値を共有することになりますが、
    これが望ましい結果でないことは明らかです。
    さらに別の問題もあります。別の拡張モジュールが
    ある日たまたま同じ名前のグローバル変数を持つことになったとしましょう。
    C のスコープの規則では、この場合コンパイルが失敗してしまう可能性があります。
    さらに悪いことに、実行時エラーとなる可能性もあります。
    少し頭を使う必要があるでしょう。
    そこで Zend では、スレッドセーフなモジュール単位のグローバル変数をサポートしています。
   </simpara>

  </sect2>

  <sect2 xml:id="internals2.structure.globals.declaring">
   <title>モジュール単位のグローバルの宣言</title>
   
   <simpara>
    そのモジュールで使うグローバル変数がひとつであろうと大量であろうと、
    それを構造体の中で定義したうえで構造体を宣言しなければなりません。
    モジュール間での名前の衝突を防いでそれを支援するマクロが
    <function>ZEND_BEGIN_MODULE_GLOBALS</function> や
    <function>ZEND_END_MODULE_GLOBALS</function> そして
    <function>ZEND_DECLARE_MODULE_GLOBALS</function> です。
    これらのマクロに渡すパラメータはモジュールの短い名前で、
    counter モジュールの場合は <literal>"counter"</literal> となります。
    <filename>php_counter.h</filename> でのグローバル構造体の宣言の例を示します。
   </simpara>

   <example xml:id="internals2.structure.globals.declaring.doth">
    <title>counter モジュールのグローバル変数</title>
    <programlisting role="c">
<![CDATA[
ZEND_BEGIN_MODULE_GLOBALS(counter)
    long        basic_counter_value;
ZEND_END_MODULE_GLOBALS(counter)
]]>
    </programlisting>
   </example>

   <simpara>
    そして、これが <filename>counter.c</filename> での宣言です。
   </simpara>

   <example xml:id="internals2.structure.globals.declaring.dotc">
    <title>counter モジュールのグローバル構造体宣言</title>
    <programlisting role="c">
<![CDATA[
ZEND_DECLARE_MODULE_GLOBALS(counter)
]]>
    </programlisting>
   </example>
  
  </sect2>
  
  <sect2 xml:id="internals2.structure.globals.using">
   <title>モジュールグローバルへのアクセス</title>
   
   <simpara>
    先ほど説明したように、モジュール単位のグローバルは C
    の構造体の内部で宣言されており、その名前は Zend マクロで隠蔽されています。
    構造体のメンバーにアクセスするための最もよい方法は、
    これらのマクロを使用することです。
    したがって、ほとんどすべてといっていいほどの拡張モジュールには、
    ヘッダファイルのどこかに次のような宣言があります。
   </simpara>

   <example xml:id="internals2.structure.globals.using.accessor">
    <title>モジュール単位のグローバルにアクセスするためのマクロ</title>
    <programlisting role="c">
<![CDATA[
#ifdef ZTS
#define COUNTER_G(v) TSRMG(counter_globals_id, zend_counter_globals *, v)
#else
#define COUNTER_G(v) (counter_globals.v)
#endif
]]>
    </programlisting>
   </example>

   <note>
    <simpara>
     これは Zend API によって Zend マクロに一般化されるようになるかもしれません。
     しかし PHP 5.3 の時点では (そして執筆時点では PHP 6 でも)、
     まだそのようにはなっていません。
     グローバルへのアクセサは、
     <command>ext_skel</command> がヘッダに書き込みます。
     開発者がそのマクロの名前を変更しようとしない限り、通常はそのままにしておきます。
    </simpara>
   </note>

   <note>
    <simpara>
     <constant>COUNTER_G</constant> は
     <command>ext_skel</command> がつけたマクロ名ですが、
     この名前でなければならないというわけではありません。たとえば
     <literal>FOO</literal> などに変更してもかまいません。
    </simpara>
   </note>

   <simpara>
    したがって、counter 拡張モジュールのコード内でグローバルにアクセスするには必ず
    <constant>COUNTER_G</constant> マクロを使用しなければなりません。
   </simpara>

   <warning>
    <simpara>
     グローバルにアクセスする関数は、Zend マクロで宣言するか最後の引数を
     <constant>TSRMLS_DC</constant> にするか、
     あるいはグローバルにアクセスする前に
     <constant>TSRMLS_FETCH</constant> マクロをコールするようにしなければなりません。
     詳細は
     <!--<link linkend="internals2.memory.tsrm">-->TSRM のドキュメント<!--</link>-->
     を参照ください。
    </simpara>
   </warning>

   <simpara>
    これらすべてを考慮すると、
    <function>counter_get</function> の新しいバージョンはこのようになります。
   </simpara>
  
   <example xml:id="internals2.structure.globals.intro.right-way">
    <title>正しい方法での基本カウンタインターフェイスの値の保存</title>
    <programlisting role="c">
<![CDATA[
/* php_counter.h */
ZEND_BEGIN_MODULE_GLOBALS(counter)
    long        basic_counter_value;
ZEND_END_MODULE_GLOBALS(counter)

#ifdef ZTS
#define COUNTER_G(v) TSRMG(counter_globals_id, zend_counter_globals *, v)
#else
#define COUNTER_G(v) (counter_globals.v)
#endif

/* counter.c */
ZEND_DECLARE_MODULE_GLOBALS(counter)

/* ... */

PHP_FUNCTION(counter_get)
{
    RETURN_LONG(COUNTER_G(basic_counter_value));
}
]]>
    </programlisting>
   </example>

   <simpara>
    これは正しい実装です。しかし、完全なものではありません。その理由は
    <xref linkend="internals2.structure.lifecycle"/> で説明します。
   </simpara>
  
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
