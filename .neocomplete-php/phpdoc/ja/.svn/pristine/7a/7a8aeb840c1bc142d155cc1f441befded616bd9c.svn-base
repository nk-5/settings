<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 326845 Maintainer: takagi Status: ready -->

<sect1 xml:id="control-structures.for" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>for</literal></title>
 <?phpdoc print-version-for="for"?>
 <para>
  <literal>for</literal> ループは、PHPで最も複雑なループです。
  <literal>for</literal> は、Cのforループと同様に動作します。
  <literal>for</literal>ループの構文は、次のようになります。
  <informalexample>
   <programlisting>
<![CDATA[
for (式1; 式2; 式3)
    文
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  最初の式(<varname>式1</varname>)は、ループ開始時に無条件に
  評価(実行)されます。
 </simpara>
 <simpara>
  各繰り返しの開始時に、<varname>式2</varname>が評価されます。
  その式の値が&true;が場合、ループは継続され、括弧
  内の文が実行されます。値が&false;の場合、ループの
  実行は終了します。
 </simpara>
 <simpara>
  各繰り返しの後、<varname>式3</varname>が評価(実行)されます。
 </simpara>
 <simpara>
  各式は空にすることもできますし、複数の式をカンマで区切って指定することもできます。
  <varname>式2</varname> でカンマ区切りの式を使用すると、
  すべての式を評価します。しかし、結果として取得するのは最後の式の結果となります。
  <varname>式2</varname> を空にすると、無限実行ループになります
  (PHP は、この状態を C 言語のように暗黙の内に &true; とみなします)。
  この機能は、初心者が想像するよりもずっと便利です。
  <literal>for</literal> の式の結果ではなく条件付き
  <link linkend="control-structures.break"><literal>break</literal></link>
  文を使ってループを終了させたくなることもしばしばあります。
 </simpara>
 <para>
  次の例について考えてみましょう。以下の例はすべて 1 から 10 までの数を表示します。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* 例 1 */

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

/* 例 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }
    echo $i;
}

/* 例 3 */

$i = 1;
for (; ; ) {
    if ($i > 10) {
        break;
    }
    echo $i;
    $i++;
}

/* 例 4 */

for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  もちろん、最初の例(もしくは 4番目の例)が最善であると考えられます。
  しかし、<literal>for</literal>ループにおいて空の式を使用できると、
  多くの場合、便利だということに気づかれるかと思います。
 </simpara>
 <para>
  PHPは、<literal>for</literal>ループ用に"コロン構文"もサポートします。
  <literal>for</literal> loops.
  <informalexample>
   <programlisting>
<![CDATA[
for (式1; 式2; 式3):
    文;
    ...
endfor;
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  多くのユーザーにとって、次の例のように配列をループ処理することはよくあるでしょう。
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * データが入った配列で、ループ処理中に
 * その中身を書き換えたいと考えています
 */
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0; $i < count($people); ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  このコードは実行速度が遅くなることでしょう。
  というのも、配列のサイズを毎回取得しているからです。
  サイズが変わることはありえないのだから、これは簡単に最適化することができます。
  配列のサイズを変数に格納して使うようにすれば、
  何度も <function>count</function> を呼ばずに済むのです。
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0, $size = count($people); $i < $size; ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
