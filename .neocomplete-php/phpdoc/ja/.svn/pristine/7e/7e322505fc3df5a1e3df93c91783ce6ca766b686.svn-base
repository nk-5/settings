<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: takagi Status: ready -->
 <sect2 xml:id="internals2.ze1.zendapi.creating" xmlns="http://docbook.org/ns/docbook"> 
  <title>拡張モジュールの作成</title> 
  <para>
   まず最初に、非常に単純な拡張モジュールを作成してみましょう。この拡張モジュールは、
   パラメータとして受け取った整数値をそのまま返すというだけの関数を実装しています。
   ソースを <xref linkend="internals2.ze1.zendapi.example.simple"/> に示します。
  </para> 
  <example xml:id="internals2.ze1.zendapi.example.simple">
   <title>単純な拡張モジュール</title> 
   <programlisting role="c">
<![CDATA[
/* 標準ヘッダを include します */
#include "php.h"

/* エクスポートする関数を宣言します */
ZEND_FUNCTION(first_module);

/* Zend がこのモジュールの内容を知るための、関数リスト */
zend_function_entry firstmod_functions[] =
{
    ZEND_FE(first_module, NULL)
    {NULL, NULL, NULL}
};

/* モジュールについての情報 */
zend_module_entry firstmod_module_entry =
{
    STANDARD_MODULE_HEADER,
    "First Module",
    firstmod_functions,
    NULL, 
    NULL, 
    NULL, 
    NULL, 
    NULL,
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};

/* Zend にこのモジュールについて説明するための、標準「スタブ」ルーチンを実装します */
#if COMPILE_DL_FIRST_MODULE
ZEND_GET_MODULE(firstmod)
#endif

/* PHP で使用するための関数を実装します */
ZEND_FUNCTION(first_module)
{
    long parameter;

    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &parameter) == FAILURE) {
        return;
    }

    RETURN_LONG(parameter);
}
]]>
   </programlisting> 
  </example> 
  <para>
   これは、PHP モジュールとして動作する完全なコードです。
   ソースコードについてはあとですぐに説明しますが、
   その前にまずビルド方法について説明しておきましょう
   (API についての議論の前に、とりあえず実際に動かしてみたいという
   短気な人たちのためです)。
  </para> 
  <note>
   <para>
    この例のソースは、PHP 4.1.0 以降に含まれる Zend の新機能を使用しています。
    PHP 4.0.x ではコンパイルできません。
   </para>
  </note>
  <sect3 xml:id="internals2.ze1.zendapi.creating.compiling"> 
   <title>モジュールのコンパイル</title> 
   <para>
    モジュールをコンパイルするには、基本的に 2 種類の方法があります。
    <itemizedlist> 
     <listitem> 
      <para>
       <filename>ext</filename> ディレクトリ内で、
       提供されている "make" 機構を使用します。
       これは、動的ロードモジュールを作成することも可能です。
      </para> 
     </listitem> 
     <listitem> 
      <para>ソースを手動でコンパイルします。</para> 
     </listitem> 
    </itemizedlist> 
    最初の方法のほうが断然お勧めです。PHP 4.0 以降、
    この仕組みは標準化され、洗練されたビルド手順に組み込まれています。
    あまりに洗練されすぎているという事実は、裏を返せば欠点でもあります。
    つまり、最初のうちはなかなか理解できないということです。
    この章の後半ではより詳細に説明しますが、
    まず最初はデフォルトのファイルを使用して進めていきましょう。
   </para> 
   <para>
    2 番目の方法は、(何らかの理由で) PHP の完全なソースツリーを
    もっていない、すべてのファイルに対するアクセス権限がない、
    あるいは単にキーボードと戯れていたいなどといった人たちにお勧めです。
    これらはどれもめったにないケースではありますが、
    この文書を完全なものにするためにこちらの方法についても説明しておきます。
   </para> 
   <formalpara> 
    <title>Make を使用したコンパイル</title> 
    <para>
     サンプルソースを標準的な仕組みでコンパイルするには、
     PHP ソースツリーの <filename>ext</filename> ディレクトリ以下に
     サンプルのディレクトリをコピーします。
     それから <filename>buildconf</filename> を実行すると、
     新しい拡張モジュール用の適切なオプションを含む
     <filename>configure</filename> スクリプトが作成されます。
     デフォルトでは、すべてのサンプルソースは無効になります。
     そのため、この作業でビルド手順が破壊されてしまう恐れはありません。
    </para> 
   </formalpara> 
   <para>
    <filename>buildconf</filename> を実行すると、<filename>configure
     --help</filename> の結果に以下が追加されます。
   </para>
   <screen>
<![CDATA[
  --enable-array_experiments   BOOK: Enables array experiments
  --enable-call_userland       BOOK: Enables userland module
  --enable-cross_conversion    BOOK: Enables cross-conversion module
  --enable-first_module        BOOK: Enables first module
  --enable-infoprint           BOOK: Enables infoprint module
  --enable-reference_test      BOOK: Enables reference test module
  --enable-resource_test       BOOK: Enables resource test module
  --enable-variable_creation   BOOK: Enables variable-creation module
]]>
   </screen>
   <para>
    先ほど <xref linkend="internals2.ze1.zendapi.example.simple"/> で示したモジュールは、
    <literal>--enable-first_module</literal> あるいは
    <literal>--enable-first_module=yes</literal> で使用可能になります。
   </para> 
   <formalpara> 
    <title>手動でのコンパイル</title> 
    <para>
     モジュールを手動でコンパイルするには、以下のコマンドを実行しなければなりません。
     <informaltable> 
      <tgroup cols="2">
       <colspec colnum="1" colname="col1" colwidth="1.00*"/>
       <colspec colnum="2" colname="col2" colwidth="3.94*"/> 
       <tbody> 
        <row> 
         <entry colname="col1">作業</entry> 
         <entry colname="col2">コマンド</entry> 
        </row> 
        <row> 
         <entry colname="col1">コンパイル</entry> 
         <entry colname="col2">cc -fpic -DCOMPILE_DL_FIRST_MODULE=1 -I/usr/local/include -I.
     -I.. -I../Zend -c -o <filename>&lt;your_object_file&gt;</filename>
     <filename>&lt;your_c_file&gt;</filename></entry> 
     </row> 
     <row> 
      <entry colname="col1">リンク</entry> 
      <entry colname="col2">cc -shared -L/usr/local/lib -rdynamic -o
       <filename>&lt;your_module_file&gt;</filename>
       <filename>&lt;your_object_file(s)&gt;</filename></entry> 
     </row> 
    </tbody> 
    </tgroup> 
    </informaltable>
     モジュールをコンパイルするためのコマンドでは、コンパイラに対して
     位置独立なコードを出力するように指示しています
     (<literal>-fpic</literal> は省略できません)。
     また、定数 <literal>COMPILE_DL_FIRST_MODULE</literal> を指定することで、
     モジュールのコードを動的ロード可能なモジュールとしてコンパイルするようにしています
     (上のテストモジュールではこれをチェックしています。これについては後で説明します)。
     これらのオプションに続いて、ソースファイルをコンパイルするために必要な
     最小限の標準インクルードパスを指定しています。
    </para> 
   </formalpara> 
   <para>
    <emphasis>注意:</emphasis> サンプルのインクルードパスは、すべて
    <filename>ext</filename> ディレクトリからの相対パスです。
    別の場所でコンパイルする場合は、それに応じてパスを変更してください。
    必要なのは、PHP ディレクトリおよび
    <filename>Zend</filename> ディレクトリ、そして (必要に応じて)
    モジュールの存在するディレクトリです。
   </para>
   <para>
    リンク用のコマンドも、動的モジュールとしてリンクするためのごく平凡なものです。
   </para>
   <para>
    コンパイル用のコマンドに最適化オプションを含めることもできますが、
    この例では省略しています (しかし、いくつかのオプションは
    先に説明した makefile のテンプレートに含められています)。
   </para>
   <para>
    <emphasis>注意:</emphasis> 手動でのコンパイルおよびリンクで
    PHP に静的モジュールとして組み込む手順は、非常に面倒なものとなります。
    そのため、ここでは扱いません
    (これらのコマンドをすべてタイプするのは効率的ではありません)。
   </para> 
  </sect3>
 </sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
