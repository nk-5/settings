<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330182 Maintainer: takagi Status: ready -->
<sect1 xml:id="internals2.memory.management" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>基本的なメモリ管理</title>
 
 <para>
  Zend エンジンのメモリ管理は、PHP のようなシステムにとって重要な機能として実装されています。
  メモリの管理や最適化が実際にどのような動きになっているかは、ここでは取り上げません。
  しかし、その機能をきちんと理解しておけば、この<code>ハッカー向けガイド</code>の理解がさらに深まり、
  PHP 全体で使われる用語や機能を把握できるでしょう。
 </para>
 
 <para>
  <code>ハッカー</code>にとって最も重要な機能である、メモリ割り当ての追跡について最初に説明しましょう。
  メモリ割り当てを追跡すれば、<code>ハッカー</code>の悩みの種であるメモリリークを回避できます。
  PHP をデバッグモードで (<code>--enable-debug</code> をつけて) ビルドすると、
  検出したメモリリークが逐一報告されるという、これまでにない完全な世界になります。
 </para>
 
 <para>
  この機能は重要なものだしとても便利なものではありますが、
  <code>ハッカー</code>たる者、それに甘えてはいけません。
  コードをデプロイする前にメモリリークは解決しておくようにしましょう。
  SAPI 環境でのメモリリークは、あっという間に深刻な問題を引き起こします。
 </para>
 
 <para>
  もう一つ、副次的な機能ではあるけれども注目すべきものがあります。
  それは、メモリマネージャーが、PHP のインスタンスごとのメモリ使用量のハードリミットを決める一因となっていることです。
  ご存じのとおり、無限に使えるものなんてどこにもありません。
  何かのコードがメモリを使い切ってしまったとしたら、おそらくそれは、Zend エンジンの<code>ハッカー</code>
  あるいは PHP プログラマーのどちらかがまずいコードを書いたのでしょう。
  したがって、メモリの使用量を制限するというのは、単にその言語の実行時に期待される内容に制約を加えるというものではありません。
  単に、何かの手違いで開発環境が制御不能にならないようにしたり、実行時にバグが発生しないようにするための方法でしかありません。
 </para>
 
 <para>
  <code>ハッカー</code>の視点で見たメモリ管理 API は、
  libc (あるいはその他お好みのライブラリ) の malloc の実装にそっくりです。
 </para>
 
 <table xml:id="internals2.memory.management.apis">
  <title>メインメモリ API</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>プロトタイプ</entry>
     <entry>説明</entry>
    </row>
   </thead>
   <tbody>
    
    <row>
     <entry><code>void *emalloc(size_t size)</code></entry>
     <entry><code>size</code> バイトのメモリを確保します。</entry>
    </row>
    
    <row>
     <entry><code>void *ecalloc(size_t nmemb, size_t size)</code></entry>
     <entry>
      <code>size</code> バイトのバッファを <code>nmemb</code> 要素だけ確保し、
      ゼロで初期化します。
     </entry>
    </row>
    
    <row>
     <entry><code>void *erealloc(void *ptr, size_t size)</code></entry>
     <entry>
      <code>emalloc</code> を使って確保したバッファ <code>ptr</code> のサイズを変更し、
      <code>size</code> バイトにします。
     </entry>
    </row>
    
    <row>
     <entry><code>void efree(void *ptr)</code></entry>
     <entry>
      <code>ptr</code> が指すバッファを解放します。このバッファは
      <code>emalloc</code> で確保したものでなければいけません。
     </entry>
    </row>
    
    <row>
     <entry>
      <code>void *safe_emalloc(size_t nmemb, size_t size, size_t offset)</code>
     </entry>
     <entry>
      <code>size</code> バイトのバッファを <code>nmemb</code> ブロックぶんと、さらに
      <code>offset</code> バイトを確保します。
      <code>emalloc(nmemb * size + offset)</code> と似ていますが、
      オーバーフロー対策の特別な保護が追加されています。
     </entry>
    </row>
    
    <row>
     <entry><code>char *estrdup(const char *s)</code></entry>
     <entry>
      NULL 終端文字列 <code>s</code> を保持できるだけのバッファを確保し、
      <code>s</code> をそのバッファにコピーします。
     </entry>
    </row>
    
    <row>
     <entry>
      <code>char *estrndup(const char *s, unsigned int length)</code>
     </entry>
     <entry>
      <code>estrdup</code> と似ていますが、NULL 終端文字列の長さが既知である場合に使います。
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 
 <note>
  <simpara>
   エンジンのメモリ管理関数は、失敗しても <code>NULL</code> は返しません。
   実行時にメモリの確保に失敗した場合は、エラーが発生します。
  </simpara>
 </note>
 
 <caution>
  <simpara>
   コードをデプロイする前には常に valgrind を使いましょう。<code>ハッカー</code>としてのたしなみです。
   Zend エンジンが検出して報告してくれるのは、確保済みのメモリのリークだけです。
   PHP 事態はサードパーティのソフトウェアに対する薄いラッパーに過ぎず、サードパーティのソフトウェアは
   Zend エンジンのメモリ管理は使いません。
   さらに valgrind は、常に落ちるわけではないというエラーを捕捉してくれたり、
   実行時に明確な影響が出るわけではないエラーを見つけてくれたりもします。
   これらに対応することも大切で、回避できるリークは回避しておかなければいけません。
  </simpara>
 </caution>
 
 <note>
  <simpara>
   回避不能なリークもあります。ライブラリによってはプロセス終了のタイミングでメモリを解放する仕組みになっているものがあり
   (場合によっては普通にあり得ることです)、その場合は制御不能だからです。
  </simpara>
 </note>
 
 <simpara>
  <code>--enable-debug</code> を付けて構築したデバッグ環境では、次の例の leak 関数が実装された状態になり、
  ユーザーのスクリプトからも呼べるようになります。
 </simpara>
 
 <example xml:id="internals2.memory.management.example.leak">
  <title>リークの検出の実例</title>
  <programlisting role="c">
<![CDATA[
ZEND_FUNCTION(leak)
{
    long leakbytes = 3;

    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|l", &leakbytes) == FAILURE) {
        return;
    }

    emalloc(leakbytes);
}
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
[Thu Oct 22 02:14:57 2009]  Script:  '-'
/home/johannes/src/PHP_5_3/Zend/zend_builtin_functions.c(1377) :  Freeing 0x088888D4 (3 bytes), script=-
=== Total 1 memory leaks detected ===
]]>
  </screen>
 </example>
 
 <note>
  <simpara>
   USE_ZEND_ALLOC=0 を指定するとメモリマネージャーの機能が停止し、
   すべてのメモリ管理をシステムのデフォルトのアロケーターに任せます。これは、リークのデバッグ時に便利です。
  </simpara>
 </note>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
