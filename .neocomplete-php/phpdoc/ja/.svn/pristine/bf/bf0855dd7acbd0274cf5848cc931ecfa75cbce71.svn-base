<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325214 Maintainer: takagi Status: ready -->
 <sect2 xml:id="internals2.ze1.zendapi.printing" xmlns="http://docbook.org/ns/docbook"> 
  <title>情報の表示</title> 
  <para>
   スクリプト内で <function>print</function> を使用したときのように、
   あなたのモジュールから出力ストリームにメッセージを表示しなければならない場面は
   よくあることでしょう。PHP では、警告メッセージの出力や
   <function>phpinfo</function> 用の出力の生成などの一般的なタスクのための関数を
   用意しています。以下の節で、その詳細を説明します。
   これらの関数の使用例については CD-ROM を参照ください。
  </para> 
  <sect3 xml:id="internals2.ze1.zendapi.printing.zend-printf"> 
   <title><function>zend_printf</function></title> 
   <para>
    <function>zend_printf</function> は、標準の
    <function>printf</function> と同じような動作をしますが、
    出力先が Zend の出力ストリームとなります。
   </para> 
  </sect3> 

  <sect3 xml:id="internals2.ze1.zendapi.printing.zend-error"> 
   <title><function>zend_error</function></title> 
   <para>
    <function>zend_error</function> は、エラーメッセージを生成するために使用します。
    この関数は 2 つの引数を受け取ります。最初の引数はエラーの型
    (<filename>zend_errors.h</filename> を参照ください)、
    そして 2 番目の引数がエラーメッセージとなります。
    <programlisting role="c">
<![CDATA[
zend_error(E_WARNING, "This function has been called with empty arguments");
]]>
    </programlisting>
    指定できる値を <xref linkend="internals2.ze1.zendapi.tab.error-messages"/> にまとめます
    (<link linkend="internals2.ze1.zendapi.fig.warning-messages">以下</link> を参照ください)。
    これらの値は、<filename>php.ini</filename> でも参照されます。
    選んだ型によっては、エラーメッセージがログに記録されます。
    <table xml:id="internals2.ze1.zendapi.tab.error-messages">
     <title>Zend の定義済みエラーメッセージ</title> 
      <tgroup cols="2">
       <colspec colnum="1" colname="col1" colwidth="1.00*"/>
       <colspec colnum="2" colname="col2" colwidth="1.36*"/> 
       <tbody> 
        <row> 
         <entry colname="col1">エラー</entry> 
         <entry colname="col2">説明</entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_ERROR</constant></entry> 
         <entry colname="col2">
          エラーを発生させ、その場でスクリプトの実行を停止します。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_WARNING</constant></entry> 
         <entry colname="col2">
          一般的な警告を発生させ、そのまま続行します。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_PARSE</constant></entry> 
         <entry colname="col2">
          パーサのエラーを発生させ、そのまま続行します。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_NOTICE</constant></entry> 
         <entry colname="col2">
          通知を発生させ、そのまま続行します。
          <filename>php.ini</filename> のデフォルト設定では、
          この型のエラーメッセージは表示されないようになっていることに注意しましょう。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_CORE_ERROR</constant></entry> 
         <entry colname="col2">
          コアによる内部エラーです。ユーザーが作成したモジュールでは
          使用してはいけません。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_COMPILE_ERROR</constant></entry> 
         <entry colname="col2">
          コンパイラによる内部エラーです。ユーザーが作成したモジュールでは
          使用してはいけません。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><constant>E_COMPILE_WARNING</constant></entry> 
         <entry colname="col2">
          コンパイラによる内部警告です。ユーザーが作成したモジュールでは
          使用してはいけません。
         </entry> 
        </row> 
       </tbody> 
      </tgroup> 
    </table> 
    <mediaobject xml:id="internals2.ze1.zendapi.fig.warning-messages">
     <alt>ブラウザへの警告メッセージの表示</alt>
     <imageobject>
      <imagedata fileref="en/internals2/ze1/zendapi/figures/zend.07-warning-messages.png"/>
     </imageobject>
    </mediaobject> 
   </para> 
  </sect3> 

  <sect3 xml:id="internals2.ze1.zendapi.printing.phpinfo"> 
   <title><function>phpinfo</function> の出力内容</title> 
   <para>
    実際にモジュールを作成してみると、そのモジュールについての情報を
    <function>phpinfo</function> に表示してみたくなるでしょう
    (モジュール名だけは、モジュール一覧のところにデフォルトで表示されます)。
    PHP allows
    you to create your own section in the <function>phpinfo</function> output with 
    the <literal>ZEND_MINFO()</literal> function. 
    この関数はモジュール記述子ブロック (先ほど説明しました)
    に配置しなければなりません。スクリプトが <function>phpinfo</function>
    をコールした際には、常にこの関数がコールされます。
   </para> 
   <para>
    <literal>ZEND_MINFO</literal> 関数を指定すると、PHP は
    <function>phpinfo</function> の出力に自動的にセクションを追加します。
    ここには見出しとしてモジュール名が含められます。
    それ以外のすべてはあなた自身が書式設定して表示する必要があります。
   </para> 
   <para>
    一般的には、まず <function>php_info_print_table_start</function>
    を使用して HTML テーブルのヘッダを作成した後で、
    標準関数 <function>php_info_print_table_header</function>
    および <function>php_info_print_table_row</function> を使用します。
    これらの関数は、どちらも引数としてカラム数 (整数)
    とカラムの内容 (文字列) をとります。
    <xref linkend="internals2.ze1.zendapi.example.phpinfo"/> に、ソースの例とその出力を示します。
    テーブルのフッタを表示するには、<function>php_info_print_table_end</function>
    を使用します。
   </para> 
   <example xml:id="internals2.ze1.zendapi.example.phpinfo">
    <title>
     ソースコードおよび <function>phpinfo</function>
     の出力のスクリーンショット
    </title> 
    <programlisting role="c">
<![CDATA[
php_info_print_table_start();
php_info_print_table_header(2, "First column", "Second column");
php_info_print_table_row(2, "Entry in first row", "Another entry");
php_info_print_table_row(2, "Just to fill", "another row here");
php_info_print_table_end();
]]>
    </programlisting>
    <mediaobject>
     <alt>phpinfo() の出力</alt>
     <imageobject>
      <imagedata fileref="en/internals2/ze1/zendapi/figures/zend.08-phpinfo-output.png"/>
     </imageobject>
    </mediaobject>
   </example>
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.printing.execution"> 
   <title>実行時の情報</title> 
   <para>
    現在実行中のファイル名など、実行時の情報を表示することも可能です。
    現在実行中の関数名を取得するには、関数
    <function>get_active_function_name</function> を使用します。
    この関数は何も引数を受け取らず、関数名へのポインタを返します。
    現在実行中のファイル名を取得するには、関数
    <function>zend_get_executed_filename</function> を使用します。
    この関数は executor グローバルにアクセスします。これは
    <literal>TSRMLS_C</literal> マクロを使用して渡されます。
    executor グローバルは、Zend から直接コールされたすべての関数
    (この章で先ほど説明した <literal>INTERNAL_FUNCTION_PARAMETERS</literal>
    の一部です) で自動的に使用可能となります。
    自動的に使用可能にならないような関数で executor グローバルにアクセスしたい場合は、
    その関数内でいちど <literal>TSRMLS_FETCH()</literal> マクロをコールします。
    これにより、グローバルの内容がローカルスコープに読み込まれます。
   </para> 
   <para>
    最後に、現在実行中の行番号を取得するには、関数
    <function>zend_get_executed_lineno</function> を使用します。
    この関数も、引数として executor グローバルを受け取ります。
    これらの関数の使用例については
    <xref linkend="internals2.ze1.zendapi.example.exec-info"/>
    を参照ください。
   </para> 
   <example xml:id="internals2.ze1.zendapi.example.exec-info">
    <title>実行時の情報の表示</title> 
    <programlisting role="c">
<![CDATA[
zend_printf("The name of the current function is %s&lt;br&gt;", get_active_function_name(TSRMLS_C));
zend_printf("The file currently executed is %s&lt;br&gt;", zend_get_executed_filename(TSRMLS_C));
zend_printf("The current line being executed is %i&lt;br&gt;", zend_get_executed_lineno(TSRMLS_C));
]]>
    </programlisting>
    <mediaobject>
     <alt>実行時の情報の表示</alt>
     <imageobject>
      <imagedata fileref="en/internals2/ze1/zendapi/figures/zend.09-execution-info.png"/>
     </imageobject>
    </mediaobject>
   </example>
  </sect3>
 </sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
