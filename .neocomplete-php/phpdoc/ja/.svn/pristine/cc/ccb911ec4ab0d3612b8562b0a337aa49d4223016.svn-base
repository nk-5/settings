<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: takagi Status: ready -->
<sect1 xml:id="internals2.pdo.implementing" xmlns="http://docbook.org/ns/docbook">
 <title>雛形への肉付け</title>
 <sect2 xml:id="internals2.pdo.implementing.structures">
 <title>主要な構造体および属性</title>
  <para>
   主要な構造体である pdo_dbh_t および pdo_stmt_t については、それぞれ
   付録 A および B で説明します。データベースやステートメントの属性に
   ついては 付録 C、エラー処理については付録 D で説明します。
  </para>
 </sect2>

 <sect2 xml:id="internals2.pdo.implementing.skel">
  <title>pdo_SKEL.c: PHP 拡張モジュールとの橋渡し</title>
  <sect3 xml:id="internals2.pdo.implementing.skel.entries">
   <title>関数エントリ</title>
   <synopsis><![CDATA[
static function_entry pdo_SKEL_functions[] = {
  { NULL, NULL, NULL }
};]]></synopsis>
   <para>
    この構造体は、グローバルな PHP 関数名前空間に関数を登録するために
    使用されます。PDO ドライバでは、できるだけ使用を避けるべきです。
    上の例で示しているように、NULL で初期化した状態にしておくことを
    推奨します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.skel.module">
   <title>モジュールエントリ</title>
   <synopsis><![CDATA[
/* {{{ pdo_SKEL_module_entry */
#if ZEND_EXTENSION_API_NO >= 220050617
static zend_module_dep pdo_SKEL_deps[] = {
    ZEND_MOD_REQUIRED("pdo")
    {NULL, NULL, NULL}
};
#endif
/* }}} */

zend_module_entry pdo_SKEL_module_entry = {
#if ZEND_EXTENSION_API_NO >= 220050617
    STANDARD_MODULE_HEADER_EX, NULL,
    pdo_SKEL_deps,
#else
    STANDARD_MODULE_HEADER,
#endif
    "pdo_SKEL",
    pdo_SKEL_functions,
    PHP_MINIT(pdo_SKEL),
    PHP_MSHUTDOWN(pdo_SKEL),
    NULL,
    NULL,
    PHP_MINFO(pdo_SKEL),
    PHP_PDO_<DB>_MODULE_VERSION,
    STANDARD_MODULE_PROPERTIES
};
/* }}} */

#ifdef COMPILE_DL_PDO_<DB>
ZEND_GET_MODULE(pdo_db)
#endif]]></synopsis>
   <para>
    pdo_SKEL_module_entry という名前で
    zend_module_entry 型の構造体を宣言し、先ほど定義した
    pdo_SKEL_functions テーブルへの参照を含める必要があります。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.skel.functions">
   <title>標準 PHP 拡張モジュール関数</title>
   <sect4 xml:id="internals2.pdo.implementing.skel.functions.minit">
    <title>PHP_MINIT_FUNCTION</title>
    <synopsis><![CDATA[
/* {{{ PHP_MINIT_FUNCTION */
PHP_MINIT_FUNCTION(pdo_SKEL)
{
    return php_pdo_register_driver(&pdo_SKEL_driver);
}
/* }}} */]]></synopsis>
    <para>
     この標準 PHP 拡張モジュール関数は、ドライバを PDO に登録するために
     使用されます。登録するには、<function>php_pdo_register_driver</function>
     関数に <type>pdo_driver_t</type> 型の構造体へのポインタを渡して
     コールします。この構造体の名前は、一般的には
     <literal>pdo_SKEL_driver</literal> となります。
     <type>pdo_driver_t</type> には、マクロ
     <literal>PDO_DRIVER_HEADER(SKEL)</literal> を使用して生成した
     ヘッダおよび <function>pdo_SKEL_handle_factory</function>
     関数へのポインタが含まれます。実際の関数については
     <filename>SKEL_dbh.c</filename> の説明の中で述べます。
    </para>
   </sect4>

   <sect4 xml:id="internals2.pdo.implementing.skel.functions.mshutdown">
    <title>PHP_MSHUTDOWN_FUNCTION</title>
    <synopsis><![CDATA[
/* {{{ PHP_MSHUTDOWN_FUNCTION */
PHP_MSHUTDOWN_FUNCTION(pdo_SKEL)
{
    php_pdo_unregister_driver(&pdo_SKEL_driver);
    return SUCCESS;
}
/* }}} */]]></synopsis>
    <para>
     この標準 PHP 拡張モジュール関数は、ドライバを PDO から登録解除する
     ために使用されます。解除するには、
     <function>php_pdo_unregister_driver</function> 関数に
     上で渡したのと同じ構造体 <literal>pdo_SKEL_driver</literal>
     を渡してコールします。
    </para>
   </sect4>
   <sect4 xml:id="internals2.pdo.implementing.skel.functions.minfo">
    <title>PHP_MINFO_FUNCTION</title>
    <para>
     これもまた標準 PHP 拡張モジュール関数です。この関数の目的は、
     スクリプト内で <function>phpinfo</function> がコールされた際に
     モジュールの情報を表示することです。規約では、モジュールの
     バージョンおよび対応するデータベースのバージョン、そして
     関連する設定情報を表示することになっています。
    </para>
   </sect4>
  </sect3>
 </sect2>
 <sect2 xml:id="internals2.pdo.implementing.driver">
  <title>SKEL_driver.c: ドライバの実装</title>

  <para>
   このファイルでは、PDO データベースハンドルオブジェクトがサポートする
   すべてのデータベース処理メソッドを実装します。また、エラー情報の
   取得ルーチンもここに含まれます。これらの関数では、グローバル変数
   プールへのアクセスが必要になることでしょう。そのため、これらの
   ステートメントの最後には、Zend マクロ TSRMLS_DC を使用する必要が
   あります。このマクロについての詳細な情報は、Zend の
   プログラマ向けドキュメントを参照ください。
  </para>

  <sect3 xml:id="internals2.pdo.implementing.driver.error">
   <title>pdo_SKEL_error</title>

   <synopsis><![CDATA[static int pdo_SKEL_error(pdo_dbh_t *dbh,
  pdo_stmt_t *stmt, const char *file, int line TSRMLS_DC)]]></synopsis>

   <para>
    この関数の目的は、ドライバ内での一般的なエラー処理関数として使用する
    ことです。ドライバ内でエラーが発生した場合に、ドライバによって
    この関数がコールされます。SQLSTATE に関連しないエラーが発生した場合、
    ドライバはエラーの内容にもっとも近い SQLSTATE あるいは一般的な
    SQLSTATE エラー <quote>HY000</quote> を、
    <literal>dbh-&gt;error_code</literal> あるいは
    <literal>stmt-&gt;error_code</literal> にセットする必要があります。
    PDO ソース内のファイル pdo_sqlstate.c には、PDO が明示的に理解する
    一般的な SQLSTATE コードのテーブルがあります。エラーコードの設定は、
    この関数がコールされる前に終わっていなければなりません。この関数は、
    グローバル変数 <parameter>pdo_err</parameter> に
    dbh あるいは stmt (stmt が NULL でない場合)
    で見つかったエラーを設定します。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>
       現在のステートメントへのポインタあるいは NULL。
       NULL の場合、エラーには dbh で見つかったエラーコードが設定されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>file</term>
     <listitem>
      <para>エラーが発生したソースファイルあるいは取得できない場合は NULL。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>line</term>
     <listitem>
      <para>取得可能な場合に、ソースファイル内の行番号。</para>
     </listitem>
    </varlistentry>
   </variablelist> 
   <para>
    dbh メンバメソッドが NULL の場合 (PDO コンストラクタ内でエラーが
    発生したことを意味します)、この関数は zend_throw_exception_ex()
    関数をコールしなければなりません。それ以外の場合はエラーコードを
    返します。通常、この関数はヘルパマクロを使用してコールされます。
    このマクロは、データベース処理エラーおよびステートメント処理エラーの
    それぞれについて関数のコール手順をカスタマイズしたものです。
   </para>

   <example xml:id="internals2.pdo.implementing.driver.error.ex-macros">
    <title>pdo_SKEL_error をコールするマクロの例</title>
    <programlisting role="c"><![CDATA[
#define pdo_SKEL_drv_error(what) \
    pdo_SKEL_error(dbh, NULL, what, __FILE__, __LINE__ TSRMLS_CC)
#define pdo_SKEL_drv_error(what) \
    pdo_SKEL_error(dbh, NULL, what, __FILE__, __LINE__ TSRMLS_CC)]]>
    </programlisting>
   </example>
   <para>
    エラー処理についての詳細は、<xref
    linkend="internals2.pdo.error-handling"/> を参照ください。
   </para>
   <note>
    <para>
     このように記述されていますが、PDO ドライバインターフェイスでは特に
     この関数が存在することを指定していません。これは単にエラー処理を
     便利にするための方法であり、大半のデータベースのクライアントライブラリ
     API ではこの方法でドライバを実装すると好都合です。
    </para>
   </note>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.fetch-err">
   <title>pdo_SKEL_fetch_error_func</title>
   <synopsis><![CDATA[static int pdo_SKEL_fetch_error_func(pdo_dbh_t *dbh, pdo_stmt_t *stmt,
    zval *info TSRMLS_DC)]]></synopsis>

   <para>
    この関数の目的は、直近に発生したエラーについての追加情報を
    取得することです。ここには、ドライバ固有のエラーコードや
    人間が理解できる形式のメッセージが含まれます。また、必要に応じて
    それ以外の追加情報も含められます。この関数は、PHP スクリプトで
    <function>PDO::errorInfo</function> メソッドをコールした際に
    呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>
       現在のステートメントへのポインタあるいは NULL。NULL の場合は
       dbh で見つかったエラーコードから情報を取得します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>info</term>
     <listitem>
      <para>エラーコードおよびメッセージを含むハッシュテーブル。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    error_func は、情報を 2 つの部分に分けた上で、配列の連続する要素として
    返さなければなりません。最初の要素は数値形式のエラーコードで、次の
    項目が文字列の説明となります。この項目を設定する方法としては
    add_next_index を使用するのが最適です。最初の要素の型は <type>long</type>
    である必要がないことに注意しましょう。元になるデータベース API
    が返すエラーコードに応じた型を選びます。
   </para>

   <programlisting role="c"><![CDATA[
/* ここではエラー情報を追加します。 */
/* 指定した順に追加する必要があります。 */
add_next_index_long(info, error_code);   /* ドライバ固有のエラーコード */
add_next_index_string(info, message, 0); /* 可読形式のエラーメッセージ */
]]></programlisting>

   <para>
    この関数は、情報が取得可能な場合に 1、ドライバが追加情報を
    保持していない場合に 0 を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.handle-closer">
   <title>SKEL_handle_closer</title>
   <synopsis><![CDATA[static int SKEL_handle_closer(pdo_dbh_t *dbh TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、オープンしているデータベースを閉じるために PDO からコールされます。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    オープン中のデータベースを閉じるために必要な処理は、すべてここで
    済ませる必要があります。PDO は、この関数の返す値を無視します。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.preparer">
   <title>SKEL_handle_preparer</title>
   <synopsis><![CDATA[static int SKEL_handle_preparer(pdo_dbh_t *dbh, const char *sql,
long sql_len, pdo_stmt_t *stmt, zval *driver_options TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、PHP スクリプトで
    <function>PDO::query</function> および <function>PDO::prepare</function>
    がコールされた場合に PDO から呼び出されます。この関数の目的は、
    実行する SQL を準備し、渡された <parameter>stmt</parameter> に
    しかるべき値を格納することです。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>sql</term>
     <listitem>
      <para>準備される SQL ステートメントを含む文字列へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>sql_len</term>
     <listitem>
      <para>SQL ステートメントの長さ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Stmt</term>
     <listitem>
      <para>返される statement へのポインタか、エラーが発生した場合には NULL。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>driver_options</term>
     <listitem>
      <para>ドライバ固有の (ドライバで定義した) オプション。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    この関数は、本質的には stmt オブジェクトのコンストラクタです。
    ステートメントのオプションを処理し、ドライバ固有のオプションを
    pdo_stmt_t 構造体に格納することがこの関数の役割となります。
   </para>
   <para>
    prepare 関数がコールされる前に、PDO がドライバの代わりにオプションを
    処理してくれることはありません。未知のオプションが渡された際に
    エラーを発生させるなどの処理は、あなた (ドライバ) の役割となります。
   </para>
   <para>
    この関数の非常に重要な役割のひとつは、SQL ステートメントのパラメータを
    処理することです。この関数をコールした際に、PDO は
    「ドライバがプリペアドステートメントへのパラメータのバインドをサポート
    しているか」や「名前で指定するパラメータあるいは位置で指定するパラメータの
    どちらをサポートしているか」を知りません。
   </para>
   <para>
    元となるデータベースにあわせて、ドライバが適切に
    <literal>stmt-&gt;supports_placeholders</literal> を設定しなければなりません。
    接続先のサーバーのバージョンによってこの設定が変化するなどの理由で、
    この設定を実行時に行わなければならないこともあるかもしれません。
    ドライバが、名前で指定するパラメータ・位置で指定するパラメータのいすれも
    サポートしていない場合は、<function>pdo_parse_params</function> API
    を使用して PDO にクエリを書き換えさせることでこの機能を
    サポートさせなければなりません。
   </para>
   <example xml:id="internals2.pdo.implementing.preparer.ex-parse-params">
    <title>pdo_parse_params の使用</title>
    <programlisting role="c"><![CDATA[
    int ret;
    char *nsql = NULL;
    int nsql_len = 0;

    /* クエリを準備する前に、ちょっとその中身を確かめる必要があります。
     * もし名前で指定するパラメータが用いられていれば、その処理を
     * PDO に任せます */
    stmt->supports_placeholders = PDO_PLACEHOLDER_POSITIONAL;
    ret = pdo_parse_params(stmt, (char*)sql, sql_len, &nsql, &nsql_len TSRMLS_CC);

    if (ret == 1) {
        /* クエリが書き換えられました */
        sql = nsql;
    } else if (ret == -1) {
        /* 失敗しました */
        strcpy(dbh->error_code, stmt->error_code);
        return 0;
    }

    /* "sql" の中のクエリを準備します */
]]></programlisting>
   </example>
   <para>
    <literal>supports_placeholders</literal> に指定できる値は
    <constant>PDO_PLACEHOLDER_NAMED</constant>、
    <constant>PDO_PLACEHOLDER_POSITIONAL</constant> および
    <constant>PDO_PLACEHOLDER_NONE</constant> です。
    ドライバがプリペアドステートメントをまったくサポートしていない場合、
    この関数は単に必要なデータを割り当てたうえで、それを返す必要があります。
   </para>
   <example xml:id="internals2.pdo.implementing.preparer.ex-no-native-prep">
    <title>プリペアドステートメントをネイティブにサポートしていないドライバでの実装</title>
    <programlisting role="c"><![CDATA[
static int SKEL_handle_preparer(pdo_dbh_t *dbh, const char *sql,
    long sql_len, pdo_stmt_t *stmt, zval *driver_options TSRMLS_DC)
{
    pdo_SKEL_db_handle *H = (pdo_SKEL_db_handle *)dbh->driver_data;
    pdo_SKEL_stmt *S = ecalloc(1, sizeof(pdo_SKEL_stmt));

    S->H = H;
    stmt->driver_data = S;
    stmt->methods = &SKEL_stmt_methods;
    stmt->supports_placeholders = PDO_PLACEHOLDER_NONE;

    return 1;
}
]]></programlisting>
   </example>

   <para>この関数は、成功した場合に 1、失敗した場合に 0 を返します。</para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.handle-doer">
  <title>SKEL_handle_doer</title>
   <synopsis><![CDATA[static long SKEL_handle_doer(pdo_dbh_t *dbh, const char *sql, long sql_len TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、SQL ステートメントを直接実行する際に PDO から
    呼び出されます。pdo_stmt_t は作成されません。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>sql</term>
     <listitem>
      <para>準備される SQL ステートメントを含む文字列へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>sql_len</term>
     <listitem>
      <para>SQL ステートメントの長さ。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>

  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.handle-quoter">
   <title>SKEL_handle_quoter</title>
   <synopsis><![CDATA[static int SKEL_handle_quoter(pdo_dbh_t *dbh, const char *unquoted,
  int unquoted_len, char **quoted, int quoted_len, enum pdo_param_type param_type TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、クエリで使用するために文字列をクォートする際に
    PDO から呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>unquoted</term>
     <listitem>
      <para>クォートされる文字列を含む文字列へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>unquoted_len</term>
     <listitem>
      <para>クォートされる文字列の長さ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>quoted</term>
     <listitem>
      <para>クォートされた文字列へのポインタが返されるアドレスへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>quoted_len</term>
     <listitem>
      <para>新しい文字列の長さ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>param_type</term>
     <listitem>
      <para>別のクォート形式を使用しているドライバ用の、ドライバ固有のヒント</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    この関数は、
    <function>PDO::quote</function> がコールされた場合、
    あるいはドライバが <literal>supports_placeholder</literal>
    を <constant>PDO_PLACEHOLDER_NONE</constant> に設定した場合に
    PDO から呼び出されます。この関数の目的は、SQL ステートメントを
    作成する際にパラメータをクォートすることです。
   </para>
   <para>
    ドライバがネイティブのプリペアドステートメントをサポートしていない場合、
    この関数を実装する必要があります。
   </para>
   <para>
    この関数は、クォート処理が正しく行われた場合や文字列を変更する必要が
    なかった場合に 1、文字列の変更に失敗した場合に 0 を返します。
    0 が返された場合、もとの文字列がそのまま使用されます。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.handle-begin">
   <title>SKEL_handle_begin</title>
   <synopsis><![CDATA[static int SKEL_handle_begin(pdo_dbh_t *dbh TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、データベースのトランザクションを開始する際に
    PDO から呼び出されます。
   </para>
   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    トランザクションを開始するために必要な処理は、すべてここで
    済ませる必要があります。この関数は、成功した場合に 1、
    エラーが発生した場合に 0 を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.handle-commit">
   <title>SKEL_handle_commit</title>
   <synopsis><![CDATA[static int SKEL_handle_commit(pdo_dbh_t *dbh TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、データベースのトランザクションを終了する際に
    PDO から呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    トランザクションをコミットするために必要な処理は、すべてここで
    済ませる必要があります。この関数は、成功した場合に 1、
    エラーが発生した場合に 0 を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.handle-rollback">
   <title>SKEL_handle_rollback</title>
   <synopsis><![CDATA[static int SKEL_handle_rollback( pdo_dbh_t *dbh TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、データベースのトランザクションをロールバックする際に
    PDO から呼び出されます。
   </para>
   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    トランザクションをロールバックするために必要な処理は、すべてここで
    済ませる必要があります。この関数は、成功した場合に 1、
    エラーが発生した場合に 0 を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.get-attr">
   <title>SKEL_handle_get_attribute</title>
   <synopsis><![CDATA[static int SKEL_handle_get_attribute(pdo_dbh_t *dbh, long attr, zval *return_value TSRMLS_DC)]]></synopsis>
   <para>この関数は、データベースの属性を取得するために PDO から呼び出されます。</para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>attr</term>
     <listitem>
      <para>
       <type>long</type> 値。PDO_ATTR_xxxx 型のいずれか。使用可能な
       値については <xref
       linkend="internals2.pdo.table.attributes"/> を参照ください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>return_value</term>
     <listitem>
      <para>返される属性の値。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    実装においてどの属性をサポートするかは、ドライバ次第です。ドライバは
    必ずこの関数を提供しなければならないわけではありません。
    PDO_ATTR_PERSISTENT、PDO_ATTR_CASE、
    PDO_ATTR_ORACLE_NULLS および PDO_ATTR_ERRMODE については PDO ドライバが
    直接処理します。
   </para>
   <para>
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.driver.set-attr">
   <title>SKEL_handle_set_attribute</title>
   <synopsis>static int SKEL_handle_set_attribute(pdo_dbh_t *dbh, long attr, zval *val TSRMLS_DC)</synopsis>
   <para>
    この関数は、データベースの属性を設定するために PDO から呼び出されます。
    通常、これはスクリプトから <function>PDO::setAttribute</function>
    をコールした場合に発生します。
   </para>
   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>attr</term>
     <listitem>
      <para>
       <type>long</type> 値。PDO_ATTR_xxxx 型のいずれか。使用可能な
       値については <xref
       linkend="internals2.pdo.table.attributes"/> を参照ください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>val</term>
     <listitem>
      <para>属性の新しい値。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    実装においてどの属性をサポートするかは、ドライバ次第です。
    追加の属性をサポートする必要がないのであれば、ドライバは
    必ずしもこの関数を提供しなくてもかまいません。
    PDO_ATTR_CASE、
    PDO_ATTR_ORACLE_NULLS および PDO_ATTR_ERRMODE については PDO ドライバが
    直接処理します。
   </para>

   <para>
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.driver.last-id">
   <title>SKEL_handle_last_id</title>
   <synopsis><![CDATA[static char * SKEL_handle_last_id(pdo_dbh_t *dbh, const char *name, unsigned int len TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、最後に挿入した行の ID を取得するために PDO から
    呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>name</term>
     <listitem>
      <para>
       テーブル名あるいはシーケンス名を表す文字列。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>len</term>
     <listitem>
      <para>パラメータ <parameter>name</parameter> の長さ。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この関数は、成功した場合には最後に挿入された行の ID を含む文字列、
    失敗した場合には NULL を返します。これは、オプションの関数です。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.driver.check-live">
   <title>SKEL_check_liveness</title>

   <synopsis><![CDATA[static int SKEL_check_liveness(pdo_dbh_t *dbh TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、データベースとの持続的接続が現在確立されているかどうかを
    調べるために PDO から呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この関数は、データベース接続が確立されており使用可能な状態の場合に 1、
    それ以外の場合 (接続に失敗した場合や機能をサポートしていない場合など)
    に 0 を返します。
   </para>
   
   <note>
    <para>
     これは、オプションの関数です。
    </para>
   </note>

  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.driver.get-methods">
   <title>SKEL_get_driver_methods</title>
   <synopsis><![CDATA[static function_entry *SKEL_get_driver_methods(pdo_dbh_t *dbh, int kind TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、<classname>PDO</classname> あるいは
    <classname>PDOStatement</classname> クラスに属さないメソッドが
    コールされた際に PDO から呼び出されます。この関数の目的は、
    ドライバ固有のメソッドをクラスに追加できるようにすることです。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>kind</term>
     <listitem>
      <para>以下のいずれか。</para>
      <variablelist>
       <varlistentry>
        <term>PDO_DBH_DRIVER_METHOD_KIND_DBH</term>
        <listitem>
         <para>
          <classname>PDO</classname> クラスのインスタンスに対して
          メソッドのコールが試みられた場合に設定します。
          ドライバは、クラスに追加したいメソッドのための function_entry
          テーブルへのポインタか、それが存在しない場合には
          NULL を返す必要があります。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>PDO_DBH_DRIVER_METHOD_KIND_STMT</term>
        <listitem>
         <para>
          <classname>PDOStatement</classname> クラスのインスタンスに対して
          メソッドのコールが試みられた場合に設定します。
          ドライバは、クラスに追加したいメソッドのための function_entry
          テーブルへのポインタか、それが存在しない場合には
          NULL を返す必要があります。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この関数は、要求された function_entry テーブルへのポインタか、
    ドライバ固有のメソッドが存在しない場合に NULL を返します。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.driver.handle-factory">
   <title>SKEL_handle_factory</title>
   <synopsis><![CDATA[static int SKEL_handle_factory(pdo_dbh_t *dbh, zval *driver_options TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、データベースハンドルを作成するために PDO から呼び出されます。
    ほとんどのデータベースでは、データベースへの接続がここに含まれます。
    中には、持続的な接続が求められる場合もあります。あるいは接続ぷーリングが
    求められる場合もあります。これらのすべては、データベース/ドライバ
    に依存します。
   </para>

   <variablelist>
    <varlistentry>
     <term>dbh</term>
     <listitem>
      <para>ハンドルファクトリで初期化したデータベースハンドルへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>driver_options</term>
     <listitem>
      <para>
       ドライバのオプションの配列。整数値のオプション番号をキーとします。
       指定できる属性の一覧は、
       <xref linkend="internals2.pdo.table.attributes"/> を参照ください。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

   <para>
    この関数は、成功した場合には、渡されたデータベースハンドル構造体に
    ドライバ固有の情報を格納して 1 を返し、それ以外の場合には 0 を返して
    失敗したことを示します。
   </para>
   <para>
    PDO は、handle_factory をコールする前に
    ドライバオプション AUTOCOMMIT および PERSISTENT を処理します。
    その他のオプションを処理するのは、ハンドルファクトリの役目となります。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.driver.method-table">
   <title>ドライバメソッドテーブル</title>
   <para>
    pdo_dbh_methods 型のスタティックな構造体を SKEL_methods という名前で
    宣言し、定義された関数へのポインタでそれを初期化しておく必要があります。
    関数がサポートされていなかったり実装されていなかったりする場合は、
    この関数ポインタの値を NULL に設定します。
   </para>
  </sect3>
  
  <sect3 xml:id="internals2.pdo.implementing.driver.skeldriver">
   <title>pdo_SKEL_driver</title>
   <para>
    pdo_driver_t 型の構造体を pdo_SKEL_driver という名前で宣言しなければ
    なりません。マクロ PDO_DRIVER_HEADER(SKEL) を使用して構造体の
    ヘッダを定義し、またハンドルファクトリ関数へのポインタを
    設定しなければなりません。
   </para>
  </sect3>
 </sect2>
 <sect2 xml:id="internals2.pdo.implementing.statement">
  <title>SKEL_statement.c: ステートメントの実装</title>
  <para>
   ここでは、PDO ステートメントオブジェクトがサポートする
   すべてのステートメント処理メソッドを実装します。
  </para>
  <sect3 xml:id="internals2.pdo.implementing.statement.dtor">
   <title>SKEL_stmt_dtor</title>

   <synopsis><![CDATA[static int SKEL_stmt_dtor(pdo_stmt_t *stmt TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、事前に作成されたステートメントオブジェクトを
    削除するために PDO から呼び出されます。
   </para>
   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    ステートメントのために確保したドライバ固有の領域は、すべてここで
    開放する必要があります。PDO は、この関数の返す値を無視します。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.statement.exec">
   <title>SKEL_stmt_execute</title>
   <synopsis><![CDATA[static int SKEL_stmt_execute(pdo_stmt_t *stmt TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、渡されたステートメントオブジェクト内のプリペアド
    SQL ステートメントを実行するために PDO から呼び出されます。
   </para>
   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>
   </sect3>
   <sect3 xml:id="internals2.pdo.implementing.statement.fetch">
   <title>SKEL_stmt_fetch</title>
   <synopsis>static int SKEL_stmt_fetch(pdo_stmt_t *stmt, enum pdo_fetch_orientation ori,
   long offset TSRMLS_DC)</synopsis>
   
   <para>
    この関数は、実行されたステートメントオブジェクトから行を取得するために
    PDO から呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>ori</term>
     <listitem>
      <para>どの行を取得するのかを、PDO_FETCH_ORI_xxx のいずれかで指定します。</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>offset</term>
     <listitem>
      <para>
       ori が PDO_FETCH_ORI_ABS あるいは PDO_FETCH_ORI_REL の場合、
       offset はそれぞれ取得したい行の位置
       あるいは現在の位置からの相対位置を表します。それ以外の場合は
       この値は無視されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この取得結果はドライバに依存し、データは通常 pdo_stmt_t オブジェクトの
    メンバ driver_data に格納されます。パラメータ ori および offset
    は、ステートメントがスクロール可能なカーソルを指している場合にのみ
    意味を持ちます。この関数は、成功した場合に 1、失敗した場合に 0
    を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.statement.param-hook">
   <title>SKEL_stmt_param_hook</title>
   <synopsis><![CDATA[static int SKEL_stmt_param_hook(pdo_stmt_t *stmt,
  struct pdo_bound_param_data *param, enum pdo_param_event event_type TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、バインドされたパラメータやカラムを処理するために
    PDO から呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>param</term>
     <listitem>
      <para>
       ステートメントのパラメータあるいはバインドされたカラムを表す構造体。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>event_type</term>
     <listitem>
      <para>このパラメータに発生するイベントの型。以下のいずれかです。</para>
      <variablelist>

       <varlistentry>
        <term>PDO_PARAM_EVT_ALLOC</term>
        <listitem>
         <para>
          PDO がバインドを割り当てる際にコールされます。
          <function>PDOStatement::bindParam</function> や
          <function>PDOStatement::bindValue</function> のコール、あるいは
          <function>PDOStatement::execute</function> による暗黙的な
          バインドの際に発生します。この時点で、何らかのアクションを
          とることができます。プリペアドステートメントをネイティブに
          実装するドライバの場合、典型的なアクションとしては
          パラメータの情報の取得・スクリプトで要求された型との調整・
          適切な大きさのバッファの確保・そしてバッファへのパラメータの
          バインドなどがあるでしょう。
          この時点では、<literal>param-&gt;parameter</literal> の zval の
          型や値をあてにすべきではありません。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>PDO_PARAM_EVT_FREE</term>
        <listitem>
         <para>
          各パラメータが開放される際にコールされます。パラメータに
          関連するすべてのリソースはここで開放しなければなりません。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>PDO_PARAM_EXEC_PRE</term>
        <listitem>
         <para>
          SKEL_stmt_execute がコールされる直前に、パラメータごとにコールされます。
          実行前の最後の調整をここで行います。特に注意すべき点として、
          <function>PDOStatement::bindParam</function> による変数のバインドは
          ここでのみ行うべきで、それより前の段階で行ってはなりません。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>PDO_PARAM_EXEC_POST</term>
        <listitem>
         <para>
          SKEL_stmt_execute がコールされた直後に、パラメータごとにコールされます。
          ドライバが必要とする後処理をここで行います。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>PDO_PARAM_FETCH_PRE</term>
        <listitem>
         <para>
          SKEL_stmt_fetch がコールされる直前に、パラメータごとにコールされます。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>PDO_PARAM_FETCH_POST</term>
        <listitem>
         <para>
          SKEL_stmt_fetch がコールされた直後に、パラメータごとにコールされます。
         </para>
        </listitem>
       </varlistentry>

       </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    このフックは、ステートメント内でバインドされたパラメータおよびカラムの
    それぞれについて、個々にコールされます。ALLOC および FREE イベントは、
    各パラメータあるいはカラムについて 1 度コールされます。
    param 構造体は driver_data フィールドを含み、これは
    各パラメータについての実装固有の情報を格納するために使用されます。
   </para>
   <para>
    その他のすべてのイベントでは、スクリプトが
    <function>PDOStatement::execute</function> および
    <function>PDOStatement::fetch</function> をコールするたびに
    PDO からコールされることになります。
   </para>
   <para>
    バインドされたのが変数の場合、param 構造体の is_param フラグが
    設定されています。それ以外の場合は param 構造体はバインドカラムを
    表します。
   </para>
   <para>
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.statement.desc-col">
   <title>SKEL_stmt_describe_col</title>
   <synopsis><![CDATA[static int SKEL_stmt_describe_col(pdo_stmt_t *stmt, int colno TSRMLS_DC)]]></synopsis>

   <para>
    この関数は、特定のカラムについての情報を問い合わせるために
    PDO からコールされます。
   </para>

   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>colno</term>
     <listitem>
      <para>調べたいカラムの番号。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    ドライバは、pdo_stmt_t のメンバ columns(colno) に適切な情報を格納する
    必要があります。この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.statement.get-col-data">
   <title>SKEL_stmt_get_col_data</title>
   <synopsis><![CDATA[static int SKEL_stmt_get_col_data(pdo_stmt_t *stmt, int colno,
  char **ptr, unsigned long *len, int *caller_frees TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、指定したカラムからデータを取得するために
    PDO から呼び出されます。
   </para>
   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>colno</term>
     <listitem>
      <para>取得したいカラムの番号。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ptr</term>
     <listitem>
      <para>取得したデータへのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>len</term>
     <listitem>
      <para>ptf が指すデータの長さ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>caller_frees</term>
     <listitem>
      <para>
       設定されている場合は ptf が指すメモリは emalloc されたものであり、
       使用終了後にメイン PDO ドライバがそれを開放する必要があります。
       設定されていない場合は、このコールの結果として確保されたメモリを
       開放するのはドライバの役目となります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    ドライバは、結果のデータおよびその長さをそれぞれ ptr および len に
    返す必要があります。メイン PDO ドライバは、データの生存期間を
    ドライバが管理するものと想定していることに注意しましょう。
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.statement.set-attr">
  <title>SKEL_stmt_set_attr</title>
  <synopsis>static int SKEL_stmt_set_attr(pdo_stmt_t *stmt, long attr, zval *val TSRMLS_DC)</synopsis>

  <para>
   この関数は、ステートメントオブジェクトのドライバ固有の属性を
   設定するために PDO から呼び出されます。
  </para>

  <variablelist>
   <varlistentry>
    <term>stmt</term>
    <listitem>
     <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>attr</term>
    <listitem>
     <para>
      <type>long</type> 値。PDO_ATTR_xxxx 型のいずれか。使用可能な
      値については <xref
      linkend="internals2.pdo.table.attributes"/> を参照ください。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>val</term>
    <listitem>
     <para>属性の新しい値。</para>
    </listitem>
   </varlistentry>
  </variablelist>


  <para>
   この関数はドライバに依存しており、ステートメントにデータベース固有の
   属性を設定する機能を与えます。この関数は、成功した場合に 1、
   失敗した場合に 0 を返します。これはオプションの関数です。
   もし設定可能な追加属性をドライバがサポートしていない場合は、
   メソッドテーブルで NULL を設定しておくことも可能です。PDO ドライバは、
   データベースドライバに代わって設定可能属性の処理を行うことはありません。
  </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.statement.get-attr">
   <title>SKEL_stmt_get_attr</title>
   <synopsis><![CDATA[static int SKEL_stmt_get_attr(pdo_stmt_t *stmt, long attr, zval
   *return_value TSRMLS_DC)]]></synopsis>
   <para>
    この関数は、ステートメントオブジェクトのドライバ固有の属性を
    取得するために PDO から呼び出されます。
   </para>

   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>attr</term>
     <listitem>
      <para>
       <type>long</type> 値。PDO_ATTR_xxxx 型のいずれか。使用可能な
       値については <xref
       linkend="internals2.pdo.table.attributes"/> を参照ください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>return_value</term>
     <listitem>
      <para>返される属性の値。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    この関数はドライバに依存しており、ステートメントからデータベース固有の
    属性を取得する機能を与えます。この関数は、成功した場合に 1、
    失敗した場合に 0 を返します。これはオプションの関数です。
    もし取得可能な追加属性をドライバがサポートしていない場合は、
    メソッドテーブルで NULL を設定しておくことも可能です。PDO ドライバは、
    データベースドライバに代わって取得可能属性の処理を行うことはありません。
   </para>
  </sect3>
  <sect3 xml:id="internals2.pdo.implementing.statement.get-col-meta">
   <title>SKEL_stmt_get_col_meta</title>
   <synopsis><![CDATA[static int SKEL_stmt_get_col_meta(pdo_stmt_t *stmt, int colno,
   zval *return_value TSRMLS_DC)]]></synopsis>
   <warning>
    <para>
     この関数はうまく定義されておれず、変更する必要があります。
    </para>
   </warning>

   <para>
    この関数は、指定したカラムのメタデータを取得するために
    PDO から呼び出されます。
   </para>
   <variablelist>
    <varlistentry>
     <term>stmt</term>
     <listitem>
      <para>SKEL_handle_preparer で初期化されたステートメント構造体へのポインタ。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>colno</term>
     <listitem>
      <para>データを取得するカラム番号。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>return_value</term>
     <listitem>
      <para>返されるメタデータを保持します。</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    ドライバの作者は、php_pdo_driver.h ヘッダに書かれているこの関数の
    ドキュメントを参照し、最新の情報を得てください。
    この関数は、成功した場合に 1、失敗した場合に 0 を返します。
    データベースドライバは、この関数を提供する必要はありません。
   </para>
  </sect3>

  <sect3 xml:id="internals2.pdo.implementing.statement.method-table">
   <title>ステートメント操作メソッドテーブル</title>
   <para>
    pdo_stmt_methods 型のスタティックな構造体を SKEL_stmt_methods という名前で
    宣言し、定義された関数へのポインタでそれを初期化しておく必要があります。
    関数がサポートされていなかったり実装されていなかったりする場合は、
    この関数ポインタの値を NULL に設定します。
   </para>
  </sect3>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
