<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334758 Maintainer: takagi Status: ready -->
 <sect1 xml:id="internals2.buildsys.configunix" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>UNIX 用のビルドシステム: config.m4</title>
  <para>
   拡張モジュールの <filename>config.m4</filename> ファイルは、
   UNIX のビルドシステムに対して「その拡張モジュールがサポートしている
   <filename>configure</filename> オプション」「依存する外部ライブラリ」
   「コンパイル対象となるソースファイル」などの情報を伝えるものです。
   一般的に用いられる autoconf マクロ (PHP 固有のものおよび autoconf 組み込みのもの)
   については <xref linkend="internals2.apiref"/> を参照ください。
  </para>
  
  <tip>
   <para>
    インストールしている <command>autoconf</command>
    のバージョンによって、拡張モジュールの開発時に違いが出てきます。
    PHP 5.3 以前のバージョンでは、いちばんよい結果が得られるのが
    <command>autoconf</command> バージョン 2.13 でした。
    しかし、バージョン 2.59 までを使っても動作します。
    PHP 5.4 以降では、<command>autoconf</command> のバージョン
    2.59 以降しか使えません。バージョンが新しいほどよい結果が得られます。
   </para>
  </tip>
  
  <example xml:id="internals2.buildsys.configunix.sample-config">
   <title>config.m4 ファイルの例</title>
   <programlisting role="autoconf">
dnl &#x24;Id$
dnl config.m4 for extension example
<![CDATA[
PHP_ARG_WITH(example, for example support,
[  --with-example[=FILE]       Include example support. File is the optional path to example-config])
PHP_ARG_ENABLE(example-debug, whether to enable debugging support in example,
[  --enable-example-debug        example: Enable debugging support in example], no, no)
PHP_ARG_WITH(example-extra, for extra libraries for example,
[  --with-example-extra=DIR      example: Location of extra libraries for example], no, no)

dnl Check whether the extension is enabled at all
if test "$PHP_EXAMPLE" != "no"; then
  
  dnl Check for example-config. First try any path that was given to us, then look in $PATH
  AC_MSG_CHECKING([for example-config])
  EXAMPLE_CONFIG="example-config"
  if test "$PHP_EXAMPLE" != "yes"; then
    EXAMPLE_PATH=$PHP_EXAMPLE
  else
    EXAMPLE_PATH=`$php_shtool path $EXAMPLE_CONFIG`
  fi
  
  dnl If a usable example-config was found, use it
  if test -f "$EXAMPLE_PATH" && test -x "$EXAMPLE_PATH" && $EXAMPLE_PATH --version > /dev/null 2>&1; then
    AC_MSG_RESULT([$EXAMPLE_PATH])
    EXAMPLE_LIB_NAME=`$EXAMPLE_PATH --libname`
    EXAMPLE_INCDIRS=`$EXAMPLE_PATH --incdirs`
    EXAMPLE_LIBS=`$EXAMPLE_PATH --libs`
    
    dnl Check that the library works properly
    PHP_CHECK_LIBRARY($EXAMPLE_LIB_NAME, example_critical_function,
    [
      dnl Add the necessary include dirs
      PHP_EVAL_INCLINE($EXAMPLE_INCDIRS)
      dnl Add the necessary libraries and library dirs
      PHP_EVAL_LIBLINE($EXAMPLE_LIBS, EXAMPLE_SHARED_LIBADD)
    ],[
      dnl Bail out
      AC_MSG_ERROR([example library not found. Check config.log for more information.])
    ],[$EXAMPLE_LIBS]
    )
  else
    dnl No usable example-config, bail  
    AC_MSG_RESULT([not found])
    AC_MSG_ERROR([Please check your example installation.])
  fi
  
  dnl Check whether to enable debugging
  if test "$PHP_EXAMPLE_DEBUG" != "no"; then
    dnl Yes, so set the C macro
    AC_DEFINE(USE_EXAMPLE_DEBUG,1,[Include debugging support in example])
  fi
  
  dnl Check for the extra support
  if test "$PHP_EXAMPLE_EXTRA" != "no"; then
    if test "$PHP_EXAMPLE_EXTRA" == "yes"; then
      AC_MSG_ERROR([You must specify a path when using --with-example-extra])
    fi
    
    PHP_CHECK_LIBRARY(example-extra, example_critical_extra_function,
    [
      dnl Add the neccessary paths
      PHP_ADD_INCLUDE($PHP_EXAMPLE_EXTRA/include)
      PHP_ADD_LIBRARY_WITH_PATH(example-extra, $PHP_EXAMPLE_EXTRA/lib, EXAMPLE_SHARED_LIBADD)
      AC_DEFINE(HAVE_EXAMPLEEXTRALIB,1,[Whether example-extra support is present and requested])
      EXAMPLE_SOURCES="$EXAMPLE_SOURCES example_extra.c"
    ],[
      AC_MSG_ERROR([example-extra lib not found. See config.log for more information.])
    ],[-L$PHP_EXAMPLE_EXTRA/lib]
    )
  fi
  
  dnl Finally, tell the build system about the extension and what files are needed
  PHP_NEW_EXTENSION(example, example.c $EXAMPLE_SOURCES, $ext_shared)
  PHP_SUBST(EXAMPLE_SHARED_LIBADD)
fi
]]>
   </programlisting>
  </example>
  
  <sect2 xml:id="internals2.buildsys.configunix.autoconf">
   <title>autoconf の構文についての簡単な説明</title>
   <para>
    <filename>config.m4</filename> は、GNU
    <command>autoconf</command> の構文で書かれています。簡単にいうと、
    これはシェルスクリプトに強力なマクロ言語を追加したようなものです。
    コメントを記述する際には文字列 <literal>dnl</literal>
    を使用し、文字列のクォートには角括弧 (<literal>[</literal> および
    <literal>]</literal>) を使用します。文字列のクォートは、
    必要に応じて何段階でもネストすることができます。この構文の完全な解説は、
    <link xlink:href="&url.internals.autoconf;"/>
    にある <command>autoconf</command> のマニュアルを参照ください。
   </para>
  </sect2>
  
  <sect2 xml:id="internals2.buildsys.configunix.php-arg">
   <title>PHP_ARG_*: ユーザーに対するオプションの提供</title>
   <para>
    先ほどの <filename>config.m4</filename> のサンプルで、
    ちょっとしたコメントを除いていちばん最初にあるのは
    <function>PHP_ARG_WITH</function> および <function>PHP_ARG_ENABLE</function>
    を使用した 3 行です。これらは、<command>configure</command> コマンドで
    <command>./configure --help</command> を実行したときに表示される
    オプションとその説明文を指定するものです。
    その名が示すように、両者の違いはそれぞれ
    <option role="configure">--with-*</option> 系のオプションを作成するか
    <option role="configure">--enable-*</option> 系のオプションを作成するかです。
    すべての拡張モジュールは、
    このどちらかに拡張モジュール名とつけたオプションを提供する必要があります。
    これにより、その拡張モジュールを PHP に組み込むかどうかを選択できるようになります。
    規約上では、何らかのパラメータ (その拡張モジュールが必要とするライブラリやプログラムの場所など)
    を指定させる場合には <function>PHP_ARG_WITH</function> を使うことになっています。
    一方、単なるフラグとして使用するオプションの場合は
    <function>PHP_ARG_ENABLE</function> を使用します。
   </para>
   <example xml:id="internals2.buildsys.configunix.php-arg.configure-out">
    <title>configure の出力例</title>
    <screen>
<![CDATA[
$ ./configure --help
...
  --with-example[=FILE]       Include example support. FILE is the optional path to example-config
  --enable-example-debug        example: Enable debugging support in example
  --with-example-extra=DIR      example: Location of extra libraries for example
...

$ ./configure --with-example=/some/library/path/example-config --disable-example-debug --with-example-extra=/another/library/path
...
checking for example support... yes
checking whether to enable debugging support in example... no
checking for extra libraries for example... /another/library/path
...
]]>
    </screen>
   </example>
   <note>
    <para>
     <command>configure</command> のコール時にどんな順でオプションを指定したかにかかわらず、
     内部では <filename>config.m4</filename> で指定した順にチェックを行います。
    </para>
   </note>
  </sect2>
  
  <sect2 xml:id="internals2.buildsys.configunix.processing">
   <title>ユーザーの選択内容の処理</title>
   <para>
    ここまでで、<filename>config.m4</filename>
    を使ってユーザーに対して選択肢を提供できるようになりました。
    次は、選択内容に応じて実際の処理を行う番です。
    上の例で、3 つのオプションすべてのデフォルト、つまり何も指定しなかったときの値は
    &quot;no&quot; です。拡張モジュールを有効にするオプションでは、
    デフォルトを no にしておくのがおすすめです。
    <command>phpize</command> で個別にビルドするときにはこれは上書きされますし、
    PHP に組み込む際にデフォルトで拡張モジュールの空間を乱してはいけないからです。
    これらの 3 つのオプションを処理するコードは、より複雑なものとなります。
   </para>
   
   <sect3 xml:id="internals2.buildsys.configunix.processing.with-example">
    <title>--with-example[=FILE] オプションの処理</title>
    <para>
     最初のチェック、つまり
     <option role="configure">--with-example[=FILE]</option>
     オプションのチェックは、それが設定されているかどうかを調べます。
     このオプションは拡張モジュールそのものを組み込むかどうかを決めるものです。
     省略されていたり否定形式
     (<option role="configure">--without-example</option>)
     で指定されていたり、あるいは値として &quot;no&quot;
     が指定されていたりした場合は、それ以降は何も行いません。
     上の例では、値として <literal>/some/library/path/example-config</literal>
     が指定されているので、このチェックは成功します。
    </para>
    
    <para>
     次に、このコードは <function>AC_MSG_CHECKING</function> をコールします。
     これは <command>autoconf</command> のマクロで、標準的な
     &quot;checking for something&quot; の行を出力してユーザーが
     <command>example-config</command> にパスを明示したかどうかを調べます。
     この例では <literal>PHP_EXAMPLE</literal> は値
     <literal>/some/library/path/example-config</literal> を受け取り、
     それが変数 EXAMPLE_PATH にコピーされます。ユーザーが
     <option role="configure">--with-example</option> だけしか指定しなかった場合は、
     このコードは <command>$php_shtool path $EXAMPLE_CONFIG</command>
     を実行します。これは、そのユーザーの現在の <envar>PATH</envar>
     を使用して <command>example-config</command> の場所を探します。
     どちらにしても、次に行うのは <literal>EXAMPLE_PATH</literal>
     が通常の実行可能ファイルであるかどうか、
     そして正常に実行できるかどうかの調査となります。
     実行できた場合は <function>AC_MSG_RESULT</function> がコールされ、
     <function>AC_MSG_CHECKING</function> で始まる出力行を補完します。
     それ以外の場合は <function>AC_MSG_ERROR</function> がコールされ、
     指定されたメッセージを表示して <command>configure</command> を即時に終了させます。
    </para>
    
    <para>
     次に、このコードは <command>example-config</command>
     を何度か実行してサイト固有の設定情報を取得します。
     その次にコールするのは <function>PHP_CHECK_LIBRARY</function>
     です。これは PHP のビルドシステムが <command>autoconf</command> の
     <function>AC_CHECK_LIB</function> のラッパーとして用意しているマクロです。
     <function>PHP_CHECK_LIBRARY</function> は、
     最初のパラメータで指定したライブラリの
     2 番目のパラメータで指定したシンボルをコールするプログラムを
     コンパイル、リンクして実行します。
     成功すると、3 番目のパラメータで指定したスクリプトを実行します。
     このスクリプトは PHP ビルドシステムに対して
     インクルードパスやライブラリパス、ライブラリ名を
     <command>example-config</command> が返す文字列から通知します。
     失敗すると、かわりに 4 番目のパラメータで指定したスクリプトを実行します。
     この場合は、<function>AC_MSG_ERROR</function> がコールされて処理を停止します。
    </para>
   </sect3>
   
   <sect3 xml:id="internals2.buildsys.configunix.processing.enable-example-debug">
    <title>--enable-example-debug オプションの処理</title>
    <para>
     <option role="configure">--enable-example-debug</option>
     の処理はずっと単純です。真値が設定されているかどうかだけを調べます。
     チェックに成功すると、<function>AC_DEFINE</function>
     をコールして C のマクロ <literal>USE_EXAMPLE_DEBUG</literal>
     を作成し、拡張モジュールのソースで使用できるようにします。
     3 番目のパラメータは <filename>config.h</filename> 用のコメント文字列です。
     これを空のままにしておいても問題はありません。たいていは空のままにします。
    </para>
   </sect3>
   
   <sect3 xml:id="internals2.buildsys.configunix.processing.with-example-extra">
    <title>--with-example-extra=DIR オプションの処理</title>
    <para>
     このサンプルでの説明用に用意した架空の機能 &quot;extra&quot;
     は <option role="configure">--with-example-extra=DIR</option>
     オプションで要求されるもので、架空のプログラム
     <command>example-config</command> とは別のものであり、
     デフォルトのサーチパスもありません。
     そのためユーザーは、必要なライブラリのインストール先を指定する必要があります。
     このような設定は実際の拡張モジュールではあまりないかもしれませんが、
     説明用として用意しました。
    </para>
    
    <para>
     このコードは、あまりなじみのない方法で
     <literal>PHP_EXAMPLE_EXTRA</literal> が真値であるかどうかを調べます。
     否定形が指定された場合は、それ以降の処理を行いません。
     これは、そのユーザーが追加機能を必要としなかったことを表します。
     パラメータなしで肯定形が指定された場合は、
     <function>AC_MSG_ERROR</function> がコールされて処理を停止します。
     その次に、また <function>PHP_CHECK_LIBRARY</function> を実行します。
     今度は、定義済みのコンパイラオプションはないので、
     <function>PHP_ADD_INCLUDE</function> と
     <function>PHP_ADD_LIBRARY_WITH_PATH</function>
     を使用して必要なインクルードパスやライブラリパス、
     追加機能のためのライブラリのフラグを作成します。
     <function>AC_DEFINE</function> もコールされ、
     追加機能が要求されていてそれが使用可能であることを通知します。
     また、ビルドすべきファイルが別に存在することを示す変数も設定します。
     チェックに失敗すると、おなじみの
     <function>AC_MSG_ERROR</function> がコールされます。
     失敗時のもうひとつの処理法は、次のように
     <function>AC_MSG_WARNING</function> をコールすることです。
    </para>
    <informalexample>
     <programlisting role="autoconf">
<![CDATA[
      AC_MSG_WARNING([example-extra lib not found. example will be built without extra functionality.])
]]>
     </programlisting>
    </informalexample>
    <para>
     この場合は、<command>configure</command>
     はエラーではなく警告メッセージを表示し、処理を続行します。
     いずれにせよ、失敗をどう処理するのかは拡張モジュールの開発者が決めることです。
    </para>
   </sect3>
  </sect2>
  
  <sect2 xml:id="internals2.buildsys.configunix.finishing">
   <title>ビルドシステムに対しての決定内容の通知</title>
   <para>
    必要なインクルードファイルやライブラリはすべて指定しました。
    必要なオプションやマクロもすべて定義しました。
    でも、あとひとつ残っていることがあります。
    ビルドシステムに対して、拡張モジュール自身をビルドすることと
    そのために使用するファイル群を教えてやらなければならないのです。
    そのためには <function>PHP_NEW_EXTENSION</function> マクロをコールします。
    このマクロの最初のパラメータは拡張モジュールの名前で、
    これはディレクトリ名と一致します。2 番目のパラメータは、
    その拡張モジュールを構成するすべてのソースファイルのリストです。
    サブディレクトリ内のソースファイルをビルド処理に追加する方法については
    <function>PHP_ADD_BUILD_DIR</function> を参照ください。
    3 番目のパラメータは、常に <literal>$ext_shared</literal>
    でなければなりません。この値は、
    <command>configure</command> の際に
    <option role="configure">--with-example[=FILE]</option> 用に
    <function>PHP_ARG_WITH</function> がコールされたときに決まります。
    4 番目のパラメータでは &quot;SAPI クラス&quot; を指定します。
    これは CGI SAPI や CLI SAPI を必要とする場合にのみ有用です。
    その他のクラスでは、ここは空のままにしておかなければなりません。
    5 番目のパラメータには、拡張モジュールのビルド時の
    <literal>CFLAGS</literal> に追加するフラグのリストを指定します。
    6 番目のパラメータは boolean 値です。&quot;yes&quot; を指定すると、
    拡張モジュール全体のビルドを <literal>$CC</literal> ではなく
    <literal>$CXX</literal> を用いて行います。
    3 番目以降のパラメータは、すべてオプションです。
    最後に <function>PHP_SUBST</function> をコールして、
    拡張モジュールの共有ビルドを有効にします。
    共有モードでの拡張モジュールのビルドをサポートしないようにする方法についての詳細は
    <xref linkend="internals2.faq"/> を参照ください。
   </para>
  </sect2>

  <sect2 xml:id="internals2.buildsys.configunix.counter">
   <title>counter 拡張モジュールの config.m4 ファイル</title>
   <para>
    先ほど説明した counter 拡張モジュールの
    <filename>config.m4</filename> ファイルは、上で説明したよりずっとシンプルです。
    これは、ビルドシステムのさまざまな機能を使用していないからです。
    外部のライブラリや同梱されているライブラリを使わない場合は、
    このようにしておくことをお勧めします。
   </para>
   <example xml:id="internals2.buildsys.configunix.counter.configunix">
    <title>counter の config.m4 ファイル</title>
    <programlisting role="autoconf">
<![CDATA[
dnl ]]>&#x24;<![CDATA[Id$
dnl config.m4 for extension counter

PHP_ARG_ENABLE(counter, for counter support,
[  --enable-counter            Include counter support])

dnl Check whether the extension is enabled at all
if test "$PHP_COUNTER" != "no"; then
  dnl Finally, tell the build system about the extension and what files are needed
  PHP_NEW_EXTENSION(counter, counter.c counter_util.c, $ext_shared)
  PHP_SUBST(COUNTER_SHARED_LIBADD)
fi
]]>
    </programlisting>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
