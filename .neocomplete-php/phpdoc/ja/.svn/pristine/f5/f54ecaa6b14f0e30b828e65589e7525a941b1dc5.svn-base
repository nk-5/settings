<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334374 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->
<sect1 xml:id="language.types.type-juggling">
 <title>型の相互変換</title>

 <simpara>
  PHP は、変数定義時に明示的な型定義を必要と(または、サポート)
  しません。ある変数の型は、その変数が使用される文により定義されます。
  これは、ある文字列を変数 <parameter>var</parameter> に代入した場合には、
  <parameter>var</parameter> は文字列になることを意味しています。
  ある整数値を <parameter>var</parameter> に代入した場合には、
  その変数は整数になります。
 </simpara>

 <para>
  PHP の自動型変換の例の一つは、加算演算子 '+' です。
  オペランドのどれかが float の場合、全てのオペランドは float
  として評価され、結果は float になります。
  その他の場合、オペランドは整数として解釈され、結果も整数になります。
  この自動型変換は、
  オペランド自体の型を変更するものではないということに注意してください。
  変わるのは、オペランドがどのように評価されるかだけです。
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$foo = "0";  // $foo は文字列です (ASCII 48)
$foo += 2;   // ここでは、$foo は整数です (2)
$foo = $foo + 1.3;  // ここでは、$foo はfloatです (3.3)
$foo = 5 + "10 Little Piggies"; // $foo は整数です (15)
$foo = 5 + "10 Small Pigs";     // $foo は整数です (15)
?>
]]>
<!-- bad example, no real operator (must be used with variable, modifies it too)
$foo++;      // $foo は文字列 "1" (ASCII 49)

TODO: explain ++/- - behaviour with strings

examples:

++'001' = '002'
++'abc' = 'abd'
++'xyz' = 'xza'
++'9.9' = '9.0'
++'-3'  = '-4'
- -'9'   = 8 (integer!)
- -'5.5' = '5.5'
- -'-9'  = -10 (integer)
- -'09'  = 8 (integer)
- -'abc' = 'abc'

-->
  </programlisting>
 </informalexample>

 <simpara>
  最後の二つの例が奇妙に思える場合には、
  <link linkend="language.types.string.conversion">文字列変換</link>
  を参照ください。
 </simpara>

 <simpara>
  ある変数を強制的にある特定の型として評価させたい場合には、
  <link linkend="language.types.typecasting">型キャスト</link>
  のセクションを参照ください。ある変数の型を変更したい場合には、
  <function>settype</function> を参照してください。
 </simpara>
 <para>
  本節の例をテストしたい場合には、
  <function>var_dump</function> を使用することが可能です。
 </para>

 <note>
  <para>
   配列への自動変換の動作は現時点で定義されていません。
  </para>

  <para>
   また、PHP では配列の添字と同じ構文を使用した文字列へのアクセスをサポートしているので、
   次の例はあらゆるバージョンの PHP で成立します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a は文字列です
$a[0] = 'b';   // $a はここでも文字列です
echo $a;       // bar
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   詳細は、<link linkend="language.types.string.substr">
   文字として文字列をアクセスする</link>というセクションを参照してください。
  </para>
 </note>

 <sect2 xml:id="language.types.typecasting">
  <title>型キャスト</title>

  <para>
   PHP の型キャストは、C 言語と同様に動作します。つまり、
   変換しようとする型を括弧で括り、キャストする変数の前に置きます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo は整数です
$bar = (boolean) $foo;   // $bar はbooleanです
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   使用可能なキャストを以下に示します。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>(int), (integer) - 整数へのキャスト</simpara>
   </listitem>
   <listitem>
    <simpara>(bool), (boolean) - 論理値へのキャスト</simpara>
   </listitem>
   <listitem>
    <simpara>(float), (double), (real) - float へのキャスト</simpara>
   </listitem>
   <listitem>
    <simpara>(string) - 文字列へのキャスト</simpara>
   </listitem>
   <listitem>
    <simpara>(array) - 配列へのキャスト</simpara>
   </listitem>
   <listitem>
    <simpara>(object) - オブジェクトへのキャスト</simpara>
   </listitem>
   <listitem>
    <simpara>(unset) - <type>NULL</type> へのキャスト (PHP 5)</simpara>
   </listitem>
  </itemizedlist>

  <para>
   (binary) によるキャストや b プレフィックスのサポートは、PHP 5.2.1 で追加されました。
  </para>

  <para>
   括弧の中でタブとスペースを使用することができることに注意してください。
   したがって、次の文は機能的に等価です。
  </para>
   
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
   </programlisting>

   <para>
    リテラル文字列や変数を、バイナリ文字列にキャストします。
   </para>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <para>
    ある変数を文字列にキャストする代わりに、
    二重引用符で括ることもできます。
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo は整数です
$str = "$foo";        // $str は文字列です
$fst = (string) $foo; // $fst も文字列です

// これは、"they are the same"を出力します
if ($fst === $str) {
    echo "they are the same";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   型の間でキャストを行う際の動作は、必ずしも明確ではありません。
   詳細については、以下の節を参照ください。
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="language.types.boolean.casting">論理値への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer.casting">整数への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float.casting">浮動小数点数への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.string.casting">文字列への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.array.casting">配列への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.object.casting">オブジェクトへの変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.resource.casting">リソース型への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.null.casting">NULL への変換</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="types.comparisons">型の比較表</link>
    </simpara>
   </listitem>
  </itemizedlist>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
