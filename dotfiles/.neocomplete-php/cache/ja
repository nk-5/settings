[{'word': 'func_num_args', 'menu': '関数に渡された引数の数を返す', 'kind': '[f]', 'abbr': 'func_num_args()'}, {'word': 'func_get_arg', 'menu': '引数のリストから要素をひとつ返す', 'kind': '[f]', 'abbr': 'func_get_arg()'}, {'word': 'func_get_args', 'menu': '関数の引数リストを配列として返す', 'kind': '[f]', 'abbr': 'func_get_args()'}, {'word': 'function_exists', 'menu': '指定した関数が定義されている場合に &true; を返す', 'kind': '[f]', 'abbr': 'function_exists()'}, {'word': 'get_defined_functions', 'menu': '定義済みの全ての関数を配列で返す', 'kind': '[f]', 'abbr': 'get_defined_functions()'}, {'word': 'get_defined_vars', 'menu': '全ての定義済の変数を配列で返す', 'kind': '[f]', 'abbr': 'get_defined_vars()'}, {'word': 'create_function', 'menu': '匿名関数 (ラムダ形式) を作成する', 'kind': '[f]', 'abbr': 'create_function()'}, {'word': 'get_resource_type', 'menu': 'リソース型を返す', 'kind': '[f]', 'abbr': 'get_resource_type()'}, {'word': 'mhash_keygen_s2k', 'menu': 'キーを生成する', 'kind': '[f]', 'abbr': 'mhash_keygen_s2k()'}, {'word': 'mhash_get_block_size', 'menu': '指定したハッシュのブロックサイズを得る', 'kind': '[f]', 'abbr': 'mhash_get_block_size()'}, {'word': 'mhash_get_hash_name', 'menu': '指定したハッシュの名前を得る', 'kind': '[f]', 'abbr': 'mhash_get_hash_name()'}, {'word': 'mhash_count', 'menu': '利用可能なハッシュ ID の最大値を得る', 'kind': '[f]', 'abbr': 'mhash_count()'}, {'word': 'mhash', 'menu': 'ハッシュ値を計算する', 'kind': '[f]', 'abbr': 'mhash()'}, {'word': 'getimagesize', 'menu': '画像の長さをバイト数で返す', 'kind': '[f]', 'abbr': 'getimagesize()'}, {'word': 'call_user_func', 'menu': '最初の引数で指定したコールバック関数をコールする', 'kind': '[f]', 'abbr': 'call_user_func()'}, {'word': 'call_user_func_array', 'menu': 'パラメータの配列を指定してコールバック関数をコールする', 'kind': '[f]', 'abbr': 'call_user_func_array()'}, {'word': 'forward_static_call', 'menu': '静的メソッドをコールする', 'kind': '[f]', 'abbr': 'forward_static_call()'}, {'word': 'forward_static_call_array', 'menu': '静的メソッドをコールし、引数を配列で渡す', 'kind': '[f]', 'abbr': 'forward_static_call_array()'}, {'word': 'serialize', 'menu': '値の保存可能な表現を生成する', 'kind': '[f]', 'abbr': 'serialize()'}, {'word': 'unserialize', 'menu': '保存用表現から PHP の値を生成する', 'kind': '[f]', 'abbr': 'unserialize()'}, {'word': 'var_dump', 'menu': '変数に関する情報をダンプする', 'kind': '[f]', 'abbr': 'var_dump()'}, {'word': 'var_export', 'menu': '変数の文字列表現を出力または返す', 'kind': '[f]', 'abbr': 'var_export()'}, {'word': 'debug_zval_dump', 'menu': '内部的な Zend の値を表す文字列をダンプする', 'kind': '[f]', 'abbr': 'debug_zval_dump()'}, {'word': 'print_r', 'menu': '指定した変数に関する情報を解りやすく出力する', 'kind': '[f]', 'abbr': 'print_r()'}, {'word': 'register_shutdown_function', 'menu': 'シャットダウン時に実行する関数を登録する', 'kind': '[f]', 'abbr': 'register_shutdown_function()'}, {'word': 'register_tick_function', 'menu': '各 tick で実行する関数を登録する', 'kind': '[f]', 'abbr': 'register_tick_function()'}, {'word': 'unregister_tick_function', 'menu': '各 tick の実行用の関数の登録を解除する', 'kind': '[f]', 'abbr': 'unregister_tick_function()'}, {'word': 'intval', 'menu': '変数の整数としての値を取得する', 'kind': '[f]', 'abbr': 'intval()'}, {'word': 'floatval', 'menu': '変数の float 値を取得する', 'kind': '[f]', 'abbr': 'floatval()'}, {'word': 'doubleval', 'menu': 'floatval &Alias;', 'kind': '[f]', 'abbr': 'doubleval()'}, {'word': 'strval', 'menu': '変数の文字列としての値を取得する', 'kind': '[f]', 'abbr': 'strval()'}, {'word': 'boolval', 'menu': '変数の boolean としての値を取得する', 'kind': '[f]', 'abbr': 'boolval()'}, {'word': 'gettype', 'menu': '変数の型を取得する', 'kind': '[f]', 'abbr': 'gettype()'}, {'word': 'settype', 'menu': '変数の型をセットする', 'kind': '[f]', 'abbr': 'settype()'}, {'word': 'is_null', 'menu': '変数が &null; かどうか調べる', 'kind': '[f]', 'abbr': 'is_null()'}, {'word': 'is_resource', 'menu': '変数がリソースかどうかを調べる', 'kind': '[f]', 'abbr': 'is_resource()'}, {'word': 'is_bool', 'menu': '変数が boolean であるかを調べる', 'kind': '[f]', 'abbr': 'is_bool()'}, {'word': 'is_long', 'menu': 'is_int &Alias;', 'kind': '[f]', 'abbr': 'is_long()'}, {'word': 'is_float', 'menu': '変数の型が float かどうか調べる', 'kind': '[f]', 'abbr': 'is_float()'}, {'word': 'is_int', 'menu': '変数が整数型かどうかを検査する', 'kind': '[f]', 'abbr': 'is_int()'}, {'word': 'is_integer', 'menu': 'is_int &Alias;', 'kind': '[f]', 'abbr': 'is_integer()'}, {'word': 'is_double', 'menu': 'is_float &Alias;', 'kind': '[f]', 'abbr': 'is_double()'}, {'word': 'is_real', 'menu': 'is_float &Alias;', 'kind': '[f]', 'abbr': 'is_real()'}, {'word': 'is_numeric', 'menu': '変数が数字または数値形式の文字列であるかを調べる', 'kind': '[f]', 'abbr': 'is_numeric()'}, {'word': 'is_string', 'menu': '変数の型が文字列かどうかを調べる', 'kind': '[f]', 'abbr': 'is_string()'}, {'word': 'is_array', 'menu': '変数が配列かどうかを検査する', 'kind': '[f]', 'abbr': 'is_array()'}, {'word': 'is_object', 'menu': '変数がオブジェクトかどうかを検査する', 'kind': '[f]', 'abbr': 'is_object()'}, {'word': 'is_scalar', 'menu': '変数がスカラかどうかを調べる', 'kind': '[f]', 'abbr': 'is_scalar()'}, {'word': 'is_callable', 'menu': '引数が、関数としてコール可能な構造であるかどうかを調べる', 'kind': '[f]', 'abbr': 'is_callable()'}, {'word': 'current', 'menu': '現在の Imagick オブジェクトへの参照を返す', 'kind': '[f]', 'abbr': 'current()'}, {'word': 'extract', 'menu': 'アーカイブのエントリを展開する', 'kind': '[f]', 'abbr': 'extract()'}, {'word': 'xml_parser_create', 'menu': 'XML パーサを作成する', 'kind': '[f]', 'abbr': 'xml_parser_create()'}, {'word': 'xml_parser_create_ns', 'menu': '名前空間をサポートした XML パーサを生成する', 'kind': '[f]', 'abbr': 'xml_parser_create_ns()'}, {'word': 'xml_set_object', 'menu': 'オブジェクト内部で XML パーサを使用する', 'kind': '[f]', 'abbr': 'xml_set_object()'}, {'word': 'xml_set_element_handler', 'menu': '開始要素および終了要素のハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_element_handler()'}, {'word': 'xml_set_character_data_handler', 'menu': '文字データハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_character_data_handler()'}, {'word': 'xml_set_processing_instruction_handler', 'menu': '処理命令 (PI) 用ハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_processing_instruction_handler()'}, {'word': 'xml_set_default_handler', 'menu': 'デフォルトのハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_default_handler()'}, {'word': 'xml_set_unparsed_entity_decl_handler', 'menu': '処理されないエンティティ宣言用ハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_unparsed_entity_decl_handler()'}, {'word': 'xml_set_notation_decl_handler', 'menu': '表記法宣言ハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_notation_decl_handler()'}, {'word': 'xml_set_external_entity_ref_handler', 'menu': '外部エンティティリファレンスハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_external_entity_ref_handler()'}, {'word': 'xml_set_start_namespace_decl_handler', 'menu': '名前空間開始ハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_start_namespace_decl_handler()'}, {'word': 'xml_set_end_namespace_decl_handler', 'menu': '名前空間終了ハンドラを設定する', 'kind': '[f]', 'abbr': 'xml_set_end_namespace_decl_handler()'}, {'word': 'xml_parse', 'menu': 'XML ドキュメントの処理を開始する', 'kind': '[f]', 'abbr': 'xml_parse()'}, {'word': 'xml_parse_into_struct', 'menu': '配列構造体に XML データを処理する', 'kind': '[f]', 'abbr': 'xml_parse_into_struct()'}, {'word': 'xml_get_error_code', 'menu': 'XML パーサのエラーコードを得る', 'kind': '[f]', 'abbr': 'xml_get_error_code()'}, {'word': 'xml_error_string', 'menu': 'XML パーサのエラー文字列を得る', 'kind': '[f]', 'abbr': 'xml_error_string()'}, {'word': 'xml_get_current_line_number', 'menu': 'XML パーサのカレントの行番号を得る', 'kind': '[f]', 'abbr': 'xml_get_current_line_number()'}, {'word': 'xml_get_current_column_number', 'menu': 'XML パーサのカレントのカラム番号を取得する', 'kind': '[f]', 'abbr': 'xml_get_current_column_number()'}, {'word': 'xml_get_current_byte_index', 'menu': 'XML パーサのカレントのバイトインデックスを得る', 'kind': '[f]', 'abbr': 'xml_get_current_byte_index()'}, {'word': 'xml_parser_free', 'menu': 'XML パーサを解放する', 'kind': '[f]', 'abbr': 'xml_parser_free()'}, {'word': 'xml_parser_set_option', 'menu': 'XML パーサのオプションを設定する', 'kind': '[f]', 'abbr': 'xml_parser_set_option()'}, {'word': 'xml_parser_get_option', 'menu': 'XML パーサからオプションを得る', 'kind': '[f]', 'abbr': 'xml_parser_get_option()'}, {'word': 'utf8_encode', 'menu': 'ISO-8859-1 文字列を UTF-8 にエンコードする', 'kind': '[f]', 'abbr': 'utf8_encode()'}, {'word': 'utf8_decode', 'menu': 'UTF-8 エンコードされた ISO-8859-1 文字列をシングルバイトの ISO-8859-1 に変換する', 'kind': '[f]', 'abbr': 'utf8_decode()'}, {'word': 'xmlwriter_open_uri', 'menu': 'ソース URI を指定して新しい xmlwriter を作成する', 'kind': '[f]', 'abbr': 'xmlwriter_open_uri()'}, {'word': 'xmlwriter_open_memory', 'menu': '文字列の出力にメモリを使用する新しい xmlwriter を作成する', 'kind': '[f]', 'abbr': 'xmlwriter_open_memory()'}, {'word': 'xmlwriter_set_indent', 'menu': '字下げの on/off を切り替える', 'kind': '[f]', 'abbr': 'xmlwriter_set_indent()'}, {'word': 'xmlwriter_set_indent_string', 'menu': '字下げに使用する文字列を設定する', 'kind': '[f]', 'abbr': 'xmlwriter_set_indent_string()'}, {'word': 'xmlwriter_start_comment', 'menu': 'コメントを開始する', 'kind': '[f]', 'abbr': 'xmlwriter_start_comment()'}, {'word': 'xmlwriter_end_comment', 'menu': 'コメントの終了部を作成する', 'kind': '[f]', 'abbr': 'xmlwriter_end_comment()'}, {'word': 'xmlwriter_start_attribute', 'menu': '属性を開始する', 'kind': '[f]', 'abbr': 'xmlwriter_start_attribute()'}, {'word': 'xmlwriter_end_attribute', 'menu': '属性を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_attribute()'}, {'word': 'xmlwriter_write_attribute', 'menu': '属性全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_attribute()'}, {'word': 'xmlwriter_start_attribute_ns', 'menu': '名前空間つきの属性を開始する', 'kind': '[f]', 'abbr': 'xmlwriter_start_attribute_ns()'}, {'word': 'xmlwriter_write_attribute_ns', 'menu': '名前空間つき属性全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_attribute_ns()'}, {'word': 'xmlwriter_start_element', 'menu': '要素の開始タグを作成する', 'kind': '[f]', 'abbr': 'xmlwriter_start_element()'}, {'word': 'xmlwriter_end_element', 'menu': '現在の要素を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_element()'}, {'word': 'xmlwriter_full_end_element', 'menu': '現在の要素を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_full_end_element()'}, {'word': 'xmlwriter_start_element_ns', 'menu': '名前空間つき要素の開始タグを作成する', 'kind': '[f]', 'abbr': 'xmlwriter_start_element_ns()'}, {'word': 'xmlwriter_write_element', 'menu': '要素タグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_element()'}, {'word': 'xmlwriter_write_element_ns', 'menu': '名前空間つき要素タグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_element_ns()'}, {'word': 'xmlwriter_start_pi', 'menu': 'PI (処理命令) の開始タグを作成する', 'kind': '[f]', 'abbr': 'xmlwriter_start_pi()'}, {'word': 'xmlwriter_end_pi', 'menu': '現在の PI (処理命令) を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_pi()'}, {'word': 'xmlwriter_write_pi', 'menu': 'PI (処理命令) 書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_pi()'}, {'word': 'xmlwriter_start_cdata', 'menu': 'CDATA の開始タグを作成する', 'kind': '[f]', 'abbr': 'xmlwriter_start_cdata()'}, {'word': 'xmlwriter_end_cdata', 'menu': '現在の CDATA を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_cdata()'}, {'word': 'xmlwriter_write_cdata', 'menu': 'CDATA タグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_cdata()'}, {'word': 'xmlwriter_text', 'menu': 'テキストを書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_text()'}, {'word': 'xmlwriter_write_raw', 'menu': '生の XML テキストを書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_raw()'}, {'word': 'xmlwriter_start_document', 'menu': 'ドキュメントタグを作成する', 'kind': '[f]', 'abbr': 'xmlwriter_start_document()'}, {'word': 'xmlwriter_end_document', 'menu': '現在のドキュメントを終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_document()'}, {'word': 'xmlwriter_write_comment', 'menu': 'コメントタグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_comment()'}, {'word': 'xmlwriter_start_dtd', 'menu': 'DTD の開始タグを作成する', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd()'}, {'word': 'xmlwriter_end_dtd', 'menu': '現在の DTD を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd()'}, {'word': 'xmlwriter_write_dtd', 'menu': 'DTD タグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd()'}, {'word': 'xmlwriter_start_dtd_element', 'menu': 'DTD 要素を開始する', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd_element()'}, {'word': 'xmlwriter_end_dtd_element', 'menu': '現在の DTD 要素を終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd_element()'}, {'word': 'xmlwriter_write_dtd_element', 'menu': 'DTD 要素タグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd_element()'}, {'word': 'xmlwriter_start_dtd_attlist', 'menu': 'DTD 属性リストを開始する', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd_attlist()'}, {'word': 'xmlwriter_end_dtd_attlist', 'menu': '現在の DTD 属性リストを終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd_attlist()'}, {'word': 'xmlwriter_write_dtd_attlist', 'menu': 'DTD 属性リストタグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd_attlist()'}, {'word': 'xmlwriter_start_dtd_entity', 'menu': 'DTD エンティティを開始する', 'kind': '[f]', 'abbr': 'xmlwriter_start_dtd_entity()'}, {'word': 'xmlwriter_end_dtd_entity', 'menu': '現在の DTD エンティティを終了する', 'kind': '[f]', 'abbr': 'xmlwriter_end_dtd_entity()'}, {'word': 'xmlwriter_write_dtd_entity', 'menu': 'DTD エンティティタグ全体を書き込む', 'kind': '[f]', 'abbr': 'xmlwriter_write_dtd_entity()'}, {'word': 'xmlwriter_output_memory', 'menu': '現在のバッファを返す', 'kind': '[f]', 'abbr': 'xmlwriter_output_memory()'}, {'word': 'xmlwriter_flush', 'menu': '現在のバッファをフラッシュする', 'kind': '[f]', 'abbr': 'xmlwriter_flush()'}, {'word': 'zip_open', 'menu': 'Zip ファイルアーカイブをオープンする', 'kind': '[f]', 'abbr': 'zip_open()'}, {'word': 'zip_close', 'menu': 'ZIP ファイルアーカイブを閉じる', 'kind': '[f]', 'abbr': 'zip_close()'}, {'word': 'zip_read', 'menu': 'Zip ファイルアーカイブの中の次のエントリを読み込む', 'kind': '[f]', 'abbr': 'zip_read()'}, {'word': 'zip_entry_open', 'menu': '読込み用にディレクトリエントリをオープンする', 'kind': '[f]', 'abbr': 'zip_entry_open()'}, {'word': 'zip_entry_close', 'menu': 'ディレクトリエントリを閉じる', 'kind': '[f]', 'abbr': 'zip_entry_close()'}, {'word': 'zip_entry_read', 'menu': 'オープンされたディレクトリエントリから読み込む', 'kind': '[f]', 'abbr': 'zip_entry_read()'}, {'word': 'zip_entry_filesize', 'menu': 'ディレクトリエントリの実際のファイルサイズを取得する', 'kind': '[f]', 'abbr': 'zip_entry_filesize()'}, {'word': 'zip_entry_name', 'menu': 'ディレクトリエントリの名前を取得する', 'kind': '[f]', 'abbr': 'zip_entry_name()'}, {'word': 'zip_entry_compressedsize', 'menu': 'ディレクトリエントリの圧縮時のサイズを取得する', 'kind': '[f]', 'abbr': 'zip_entry_compressedsize()'}, {'word': 'zip_entry_compressionmethod', 'menu': 'ディレクトリエントリの圧縮方法を取得する', 'kind': '[f]', 'abbr': 'zip_entry_compressionmethod()'}]
