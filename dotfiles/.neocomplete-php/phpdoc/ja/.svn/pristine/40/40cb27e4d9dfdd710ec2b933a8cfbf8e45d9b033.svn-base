<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337339 Maintainer: takagi Status: ready -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>foreach</literal></title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  <literal>foreach</literal> は、配列を反復処理するための便利な方法です。
  <literal>foreach</literal> が使えるのは配列とオブジェクトだけであり、
  別のデータ型や初期化前の変数に対して使うとエラーになります。
  この構造には二種類の構文があります。
  <informalexample>
   <programlisting>
<![CDATA[
foreach (array_expression as $value)
    文
foreach (array_expression as $key => $value)
    文
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  最初の形式は、<literal>array_expression</literal>で指定した配列に
  関してループ処理を行います。各反復において現在の要素の値が
  <literal>$value</literal>に代入され、内部配列ポインタが一つ前に
  進められます。(よって、次の反復では次の要素を見ることになります。)
 </simpara>
 <simpara>
  2番目の形式は、さらに各反復で現在の要素のキーを変数
  <literal>$key</literal>に代入します。
 </simpara>
 <simpara>
  <link linkend="language.oop5.iterations">オブジェクトの反復処理をカスタマイズ</link>
  することもできます。
 </simpara>
 <para>
  <note>
   <para>
    PHP 5 では、<literal>foreach</literal>の実行開始時に内部配列ポインタは、
    配列の先頭要素を指すように自動的にリセットされます。
    このため、<literal>foreach</literal>ループの前に
    <function>reset</function>をコールする必要はありません。
   </para>
   <para>
    PHP 5 では、<literal>foreach</literal> は内部の配列ポインタに依存するので、
    ループ内で配列ポインタを変更すると予期せぬ振る舞いを引き起こします。
   </para>
   <para>
    PHP 7 では、<literal>foreach</literal> は内部の配列ポインタを使わなくなりました。
   </para>
  </note>
 </para>
 <para>
  ループの中で配列の要素を直接変更したい場合は、
  <literal>$value</literal> の前に &amp; をつけます。こうすると、変数には
  <link linkend="language.references">リファレンス</link>
  が代入されることになります。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr は array(2, 4, 6, 8) となります
unset($value); // 最後の要素への参照を解除します
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <literal>$value</literal> の参照は、ループ処理される配列が参照可能である場合 (すなわち、
  変数である) のみ使用可能です。つまり、次のコードは動作しません。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <warning>
  <para>
   <literal>foreach</literal> ループを終えた後でも、
   <literal>$value</literal> は配列の最後の要素を参照したままとなります。
   <function>unset</function> でその参照を解除しておくようにしましょう。
  </para>
 </warning>
 <para>
  <note>
   <para>
    <literal>foreach</literal> は、'@' によりエラーメッセージ出力を抑
    制する機能をサポートしていません。
   </para>
  </note>
 </para>
 <para>
  既にご存知かと思いますが、以下の文は機能的に等価です。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list(, $value) = each($arr)) {
    echo "Value: $value<br />\n";
}

foreach ($arr as $value) {
    echo "Value: $value<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  以下の文も機能的に等価です。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array("one", "two", "three");
reset($arr);
while (list($key, $value) = each($arr)) {
    echo "Key: $key; Value: $value<br />\n";
}

foreach ($arr as $key => $value) {
    echo "Key: $key; Value: $value<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  使用法を示すためにその他の例を示します。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* foreach の例 1: 値のみ */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
    echo "Current value of \$a: $v.\n";
}

/* foreachの例2: 値 (説明用に、手動でアクセスする際の表記を出力) */

$a = array(1, 2, 3, 17);

$i = 0; /* 説明用 */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreachの例3: キーと値 */

$a = array(
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach の例4: 多次元配列 */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach の例5: 動的配列 */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.foreach.list">
  <title>ネストした配列の list() による展開</title>
  <?phpdoc print-version-for="foreach.list"?>

  <para>
   PHP 5.5 からは、配列の配列の反復処理ができるようになりました。
   値として <function>list</function> を渡すと、
   ネストした配列をループ変数に展開できます。
  </para>

  <para>
   例を示します。

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b)) {
    // $a にはネストした配列の最初の要素が含まれ、
    // $b には二番目の要素が含まれます。
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   <function>list</function> で指定する要素数を、ネストした配列の要素数より少なくしてもかまいません。
   その場合は、配列の残りの要素は無視されます。

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a)) {
    // $b を指定していないことに注目。
    echo "$a\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
3
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   <function>list</function> で指定した変数を埋めるだけの要素が足りないときには、notice が発生します。

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b, $c)) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C: 

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C: 
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
