<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: takagi Status: ready -->
 <sect2 xml:id="internals2.ze1.zendapi.structure" xmlns="http://docbook.org/ns/docbook"> 
  <title>ソースコードについての議論</title> 
  <para>
   さあ、今やあなたは安全なビルド環境を手にいれ、
   モジュールを PHP に組み込めるようになりました。
   そろそろ全体像について話を始める時期でしょう。
  </para> 
  <sect3 xml:id="internals2.ze1.zendapi.structure.module"> 
   <title>モジュールの構造</title> 
   <para>
    すべての PHP モジュールは、共通の構造に従っています。
    <itemizedlist> 
     <listitem> 
      <para>
       ヘッダファイルのインクルード
       (必要なすべてのマクロ、API、define などをインクルードするため)
      </para> 
     </listitem> 
     <listitem> 
      <para>
       エクスポートする関数の C での宣言
       (Zend 関数ブロックの宣言のために必要)
      </para> 
     </listitem> 
     <listitem> 
      <para>Zend 関数ブロックの宣言</para> 
     </listitem> 
     <listitem> 
      <para>Zend モジュールブロックの宣言</para> 
     </listitem> 
     <listitem> 
      <para><function>get_module</function> の実装</para> 
     </listitem> 
     <listitem> 
      <para>エクスポートするすべての関数の実装</para> 
     </listitem> 
    </itemizedlist></para> 
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.structure.headers">
   <title>ヘッダファイルのインクルード</title>
   <para>
    モジュールに組み込まなければならない唯一のヘッダファイルは
    <filename>php.h</filename> で、これは PHP ディレクトリにあります。
    このファイルは、新しいモジュールを使用できるようにビルドするための
    すべてのマクロ定義、API 定義を含みます。
   </para>
   <para>
    <emphasis>豆知識:</emphasis>
    モジュール固有の定義を含むヘッダファイルを、
    別に分けて作成しておくとよいでしょう。
    エクスポートされるすべての関数の定義をこのヘッダファイルに含め、
    そしてこのファイルで <filename>php.h</filename> をインクルードします。
    <literal>ext_skel</literal> を使用して雛形を作成したのなら、
    すでにこの形式のヘッダファイルが出来上がっているはずです。
   </para>
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.structure.exporting-functions"> 
   <title>エクスポートする関数の宣言</title> 
   <para>
    エクスポートする (つまり PHP の新しいネイティブ関数として使用できるようにする)
    関数を宣言するためには、Zend が提供するマクロを使用します。
    宣言は、このように行います。
    <programlisting role="c">
<![CDATA[
ZEND_FUNCTION ( my_function );
]]>
    </programlisting>
   </para> 
   <para>
    <literal>ZEND_FUNCTION</literal> は、Zend の内部 API
    を満たす新しい C 関数を宣言します。内部 API を満たすとは、
    その関数の型が <literal>void</literal> であり、パラメータとして
    <literal>INTERNAL_FUNCTION_PARAMETERS</literal> (別のマクロ)
    を受け取るということです。さらに、関数名の先頭に <literal>zif</literal>
    を付加します。これらの定義を満たす宣言の例は、次のようになります。
    <programlisting role="c">
<![CDATA[
void zif_my_function ( INTERNAL_FUNCTION_PARAMETERS );
]]>
    </programlisting>
    <literal>INTERNAL_FUNCTION_PARAMETERS</literal>
    を展開した結果は、次のようになります。
    <programlisting role="c">
<![CDATA[
void zif_my_function( int ht
                    , zval * return_value
                    , zval * this_ptr
                    , int return_value_used
                    , zend_executor_globals * executor_globals
                    );
]]>
    </programlisting> 
   </para>
   <para>
    インタプリタおよびエグゼキュータのコアは PHP 本体のパッケージとは分離されているので、
    マクロや関数群を定義するもうひとつの API が作られました。これが
    Zend API です。今のところ Zend API は、
    かつて PHP が担当していた機能のうちのごくわずかしか処理できません。
    PHP の関数の多くは Zend のマクロに書き下ろされており、
    その内部で Zend API をコールしています。
    おすすめのやりかたは、まずできる限り Zend API を使用することです。
    というのは古い API は互換性のためだけに残されているものだからです。
    例えば、<envar>zval</envar> 型と <envar>pval</envar> 型はまったく同じものです。
    <envar>zval</envar> は Zend での定義で、<envar>pval</envar>
    は PHP での定義です (実際のところ、現在 <envar>pval</envar>
    は <envar>zval</envar> のエイリアスとなっています)。
    <literal>INTERNAL_FUNCTION_PARAMETERS</literal> は Zend のマクロなので、
    上の宣言には <envar>zval</envar> が用いられています。
    コードを書く際には、新しい Zend API のために常に
    <envar>zval</envar> を使うようにしましょう。
   </para>
   <para>
    この宣言のパラメータリストは非常に重要です。これらは常に頭に入れておくようにしましょう。
    (<xref linkend="internals2.ze1.zendapi.tab.parameters"/> を参照ください)。
    <table xml:id="internals2.ze1.zendapi.tab.parameters">
     <title>PHP からコールされた際に関数に渡される Zend のパラメータ</title> 
      <tgroup cols="2">
       <colspec colnum="1" colname="col1" colwidth="1.00*"/>
       <colspec colnum="2" colname="col2" colwidth="1.79*"/> 
       <tbody> 
        <row> 
         <entry colname="col1">パラメータ</entry> 
         <entry colname="col2">説明</entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>ht</envar></entry> 
         <entry colname="col2">
          Zend の関数に渡す引数の数。これを直接操作してはいけません。値を取得する際には
          ZEND_NUM_ARGS() を使用してください。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1">
          <envar>return_value</envar></entry> 
         <entry colname="col2">
          この変数は、あなたの関数から PHP に返す値を渡すために使用します。
          この変数にアクセスするには、定義済みマクロを使用するのがベストです。
          マクロについては後で説明します。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>this_ptr</envar></entry> 
         <entry colname="col2">
          この変数を使用すると、関数がオブジェクト内で使用されている場合に
          そのオブジェクトにアクセスすることができます。このポインタを取得するには
          関数 <function>getThis</function> を使用します。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>return_value_used</envar></entry> 
         <entry colname="col2">
          このフラグは、この関数の返す値が実際に呼び出し元のスクリプトで使われるのかどうかを指定します。
          <literal>0</literal> は、返り値が使われないことを表します。
          <literal>1</literal> は、呼び出し元が返り値を期待していることを表します。
          このフラグの値により、関数が正しく使用されているかどうかを確認します。また、
          値を返す処理に負荷がかかる場合などに、このフラグによって速度の最適化を行います
          (<filename>array.c</filename> で、このような使用法を用いています)。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>executor_globals</envar></entry> 
         <entry colname="col2">
          この変数は、Zend エンジンのグローバル設定へのポインタです。
          これが便利なのは、例えば新しい変数を作成するときです (詳細はあとで説明します)。
          エグゼキュータのグローバル設定は、マクロ <literal>TSRMLS_FETCH()</literal>
          を使うことによってもあなたの関数で使用できます。
         </entry> 
        </row> 
       </tbody> 
      </tgroup> 
   </table>
  </para> 
  </sect3> 
  
  <sect3 xml:id="internals2.ze1.zendapi.structure.function-block"> 
   <title>Zend 関数ブロックの宣言</title> 
   <para>
    エクスポートする関数の宣言が完了しました。こんどはさらにそれを
    Zend に登録しなければなりません。関数のリストを登録するには、
    <envar>zend_function_entry</envar> の配列を使用します。
    この配列には、外部に公開するすべての関数について
    PHP で使用する場合の名前と C ソース内で定義されている名前が含まれています。
    内部的には、<envar>zend_function_entry</envar> は
    <xref linkend="internals2.ze1.zendapi.example.zend-function-entry"/>
    のように定義されています。
   </para>
   <para>
    <example xml:id="internals2.ze1.zendapi.example.zend-function-entry">
     <title>内部での <envar>zend_function_entry</envar> の宣言</title> 
     <programlisting role="c">
<![CDATA[
typedef struct _zend_function_entry {
    char *fname;
    void (*handler)(INTERNAL_FUNCTION_PARAMETERS);
    unsigned char *func_arg_types;
} zend_function_entry;
]]>
     </programlisting> 
     <informaltable> 
      <tgroup cols="2">
       <colspec colnum="1" colname="col1" colwidth="1.00*"/>
       <colspec colnum="2" colname="col2" colwidth="1.82*"/> 
       <tbody> 
        <row> 
         <entry colname="col1">エントリ</entry> 
         <entry colname="col2">説明</entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>fname</envar></entry> 
         <entry colname="col2">
          PHP で使用する場合の名前を表します (例えば
          <literal>fopen</literal> や <literal>mysql_connect</literal> など。
          今回の例では <literal>first_module</literal>)。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>handler</envar></entry> 
         <entry colname="col2">
          この関数コールを処理する C 関数へのポインタ。
          例えば、先ほど説明した標準マクロ
          <literal>INTERNAL_FUNCTION_PARAMETERS</literal>
          を参照ください。
         </entry> 
        </row> 
        <row> 
         <entry colname="col1"><envar>func_arg_types</envar></entry> 
         <entry colname="col2">
          パラメータに対して、参照渡しを強制させるようにできます。
          通常は NULL を設定しておくべきです。
         </entry> 
        </row> 
       </tbody> 
      </tgroup>
     </informaltable> 
    </example>
    上の例では、このような宣言になります。
    <programlisting role="c">
<![CDATA[
zend_function_entry firstmod_functions[] =
{
    ZEND_FE(first_module, NULL)
    {NULL, NULL, NULL}
};
]]>
    </programlisting>
    リストの最後のエントリは、必ず
    <literal>{NULL, NULL, NULL}</literal> でなければなりません。
    エクスポートされる関数の一覧が終わることを Zend が知るために、
    このエントリが必要となります。
   </para>
   <note>
    <para>
     最後を表す印として、定義済みマクロを使用することは
     <emphasis>できません</emphasis>。そうすると、
     "NULL" という名前の関数を探しにいってしまいます!
    </para>
   </note>
   <para>
    マクロ <literal>ZEND_FE</literal> ('Zend Function
    Entry' を省略したものです) は、構造体のエントリを単純に
    <envar>zend_function_entry</envar> に展開します。
    これらのマクロは特別な命名規約を持っていることに注意しましょう。
    あなたが作成する C 関数の名前には、前に <literal>zif_</literal>
    をつけることになります。つまり、<literal>ZEND_FE(first_module)</literal>
    は <function>zif_first_module</function> という名前の
    C 関数を参照するということです。このマクロと手書きのエントリを混ぜて使用する場合には
    (お勧めしません) これを頭に入れておきましょう。
   </para>
   <para>
    豆知識: <function>zif_*</function> という名前の関数でコンパイルエラーが出た場合は、
    <literal>ZEND_FE</literal> で定義した関数がかかわっています。
   </para> 
   <para>
    <xref linkend="internals2.ze1.zendapi.tab.funcdef-macros"/> が、
    関数の定義に使用できるすべてのマクロの一覧です。
   </para> 
   <table xml:id="internals2.ze1.zendapi.tab.funcdef-macros">
    <title>関数定義用のマクロ</title> 
     <tgroup cols="2">
      <colspec colnum="1" colname="col1" colwidth="1.00*"/>
      <colspec colnum="2" colname="col2" colwidth="1.08*"/> 
      <tbody> 
       <row> 
        <entry colname="col1">マクロ名</entry> 
        <entry colname="col2">説明</entry> 
       </row> 
       <row> 
        <entry colname="col1"><literal>ZEND_FE(name, arg_types)</literal></entry> 
        <entry colname="col2">
         <envar>zend_function_entry</envar> に <envar>name</envar>
         という名前の関数エントリを定義します。対応する C の関数が必要です。
         <envar>arg_types</envar> は <literal>NULL</literal> に設定しなければなりません。
         この関数は、自動的に C の関数名を生成します。その名前は
         PHP の関数名の先頭に <literal>zif_</literal> をつけたものになります。
         例えば <literal>ZEND_FE("first_module", NULL)</literal> とすると
         PHP の関数 <function>first_module</function> を登録したことになり、
         それを C の関数 <function>zif_first_module</function> と関連付けます。
         <literal>ZEND_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1">
         <literal>ZEND_NAMED_FE(php_name, name, arg_types)</literal>
        </entry> 
        <entry colname="col2">
         <envar>php_name</envar> という名前で PHP の関数を定義し、
         それを対応する C の関数 <envar>name</envar> に関連付けます。
         <envar>arg_types</envar> は <literal>NULL</literal>
         に設定しなければなりません。<literal>ZEND_FE</literal>
         のように自動的に名前を決められたくない場合にこの関数を使用します。
         <literal>ZEND_NAMED_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1">
         <literal>ZEND_FALIAS(name, alias, arg_types)</literal>
        </entry> 
        <entry colname="col2">
         <envar>alias</envar> という名前で、
         <envar>name</envar> のエイリアスを定義します。
         <envar>arg_types</envar> は <literal>NULL</literal>
         に設定しなければなりません。対応する C の関数は不要です。
         その代わりに、エイリアスの対象を参照します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><literal>PHP_FE(name, arg_types)</literal></entry> 
        <entry colname="col2">
         古い PHP の API で、<literal>ZEND_FE</literal> と同じものです。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1">
         <literal>PHP_NAMED_FE(runtime_name, name, arg_types)</literal>
        </entry> 
        <entry colname="col2">
         古い PHP の API で、<literal>ZEND_NAMED_FE</literal> と同じものです。
        </entry> 
       </row> 
      </tbody> 
     </tgroup> 
   </table> 
   <para>
    <emphasis>注意:</emphasis> <literal>ZEND_FE</literal> と
    <literal>PHP_FUNCTION</literal> を組み合わせて使用したり、あるいは
    <literal>PHP_FE</literal> と <literal>ZEND_FUNCTION</literal>
    を組み合わせて使用したりすることはできません。しかし、
    各関数について <literal>ZEND_FE</literal> と
    <literal>ZEND_FUNCTION</literal>、あるいは <literal>PHP_FE</literal>
    と <literal>PHP_FUNCTION</literal> という組み合わせが守られているのなら、
    それらを混用することは可能です。
    しかし、混用することは <emphasis>推奨しません</emphasis>。
    <literal>ZEND_*</literal> マクロだけを使用するようにしましょう。
   </para> 
  </sect3> 

  <sect3 xml:id="internals2.ze1.zendapi.structure.module-block"> 
   <title>Zend モジュールブロックの宣言</title> 
   <para>
    このブロックは構造体 <envar>zend_module_entry</envar>
    に保存され、モジュールの内容について Zend に示すために必要な
    すべての情報が含まれます。このモジュールの内部定義は
    <xref linkend="internals2.ze1.zendapi.example.zend-module-entry"/>
    で確認できます。
   </para>
   <example xml:id="internals2.ze1.zendapi.example.zend-module-entry">
    <title>内部での <envar>zend_module_entry</envar> の宣言</title> 
    <programlisting role="c">
<![CDATA[
typedef struct _zend_module_entry zend_module_entry;
     
    struct _zend_module_entry {
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;
    char *name;
    zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    char *version;

[ 構造体の残りの部分は、ここではあまり関係がありません ]

};
]]>
    </programlisting>
    <informaltable> 
     <tgroup cols="2">
      <colspec colnum="1" colname="col1" colwidth="1.00*"/>
      <colspec colnum="2" colname="col2" colwidth="1.69*"/> 
      <thead> 
       <row> 
        <entry colname="col1">エントリ</entry> 
        <entry colname="col2">説明</entry> 
       </row> 
      </thead> 
    <tbody> 
       <row> 
        <entry colname="col1">
         <envar>size</envar>, <envar>zend_api</envar>,
         <envar>zend_debug</envar> および <envar>zts</envar>
        </entry> 
        <entry colname="col2">
         通常は
         <literal>"STANDARD_MODULE_HEADER"</literal> を指定します。
         これは、4 つのメンバにそれぞれ
         zend_module_entory 全体のサイズ、<literal>ZEND_MODULE_API_NO</literal>、
         デバッグビルドか通常ビルドのどちらであるか (<literal>ZEND_DEBUG</literal>)
         そして ZTS が有効かどうか (<literal>USING_ZTS</literal>)
         を代入します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><envar>name</envar></entry> 
        <entry colname="col2">
         モジュール名を指定します (例えば <literal>"File
          functions"</literal>、<literal>"Socket functions"</literal>、
         <literal>"Crypt"</literal> など)。この名前は、
         <function>phpinfo</function> の "Additional
         Modules" 欄で使用されます。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><envar>functions</envar></entry> 
        <entry colname="col2">
         先ほど説明した Zend 関数ブロックへのポインタ。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><envar>module_startup_func</envar></entry> 
        <entry colname="col2">
         この関数はモジュールの初期化時にコールされ、
         最初の一度だけ行う初期化処理 (例えばメモリの確保など)
         で使用します。初期化に失敗した場合には <literal>FAILURE</literal>、
         成功した場合には <literal>SUCCESS</literal> を返します。
         このフィールドを使用しない場合は、<literal>NULL</literal>
         を指定します。関数を宣言するには、マクロ
         <literal>ZEND_MINIT</literal> を使用します。
        </entry> 
       </row> 
     <row> 
        <entry colname="col1"><envar>module_shutdown_func</envar></entry> 
        <entry colname="col2">
         この関数はモジュールのシャットダウン時にコールされ、
         最後に一度だけ行う後処理 (例えばメモリの開放など) で使用します。
         これは <function>module_startup_func</function> に対応するものです。
         で使用します。後処理に失敗した場合には <literal>FAILURE</literal>、
         成功した場合には <literal>SUCCESS</literal> を返します。
         このフィールドを使用しない場合は、<literal>NULL</literal>
         を指定します。関数を宣言するには、マクロ
         <literal>ZEND_MSHUTDOWN</literal> を使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><envar>request_startup_func</envar></entry> 
        <entry colname="col2">
         この関数はページがリクエストされるたびにコールされ、
         リクエストを処理する際の前処理で使用します。
         処理に失敗した場合には <literal>FAILURE</literal>、
         成功した場合には <literal>SUCCESS</literal> を返します。
         <emphasis>注意:</emphasis> 動的モジュールの場合は
         リクエストがあるまでは読み込まれないので、
         リクエストスタートアップ関数は、
         モジュールスタートアップ関数の直後にコールされます
         (これら二つの初期化イベントが同時に発生します)。
         このフィールドを使用しない場合は、<literal>NULL</literal>
         を指定します。関数を宣言するには、マクロ
         <literal>ZEND_RINIT</literal> を使用します。
        </entry> 
     </row> 
       <row> 
        <entry colname="col1"><envar>request_shutdown_func</envar></entry> 
        <entry colname="col2">
         この関数はページのリクエストが終了するたびにコールされます。
         ちょうど <function>request_startup_func</function> に対応するものです。
         処理に失敗した場合には <literal>FAILURE</literal>、
         成功した場合には <literal>SUCCESS</literal> を返します。
         <emphasis>注意:</emphasis> 動的モジュールの場合は
         リクエストがあるまでは読み込まれないので、
         リクエストシャットダウン関数の直後に
         モジュールシャットダウンハンドラがコールされます
         (これら二つの後処理イベントが同時に発生します)。
         このフィールドを使用しない場合は、<literal>NULL</literal>
         を指定します。関数を宣言するには、マクロ
         <literal>ZEND_RSHUTDOWN</literal> を使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><envar>info_func</envar></entry> 
        <entry colname="col2">
         スクリプト内で <function>phpinfo</function> がコールされると、
         Zend は現在読み込まれているすべてのモジュールについてこの関数をコールします。
         つまり、その出力結果に何らかの "あしあと" を残すチャンスが
         すべてのモジュールに与えられるわけです。一般的には、
         これを使用して環境情報や東経情報を出力します。
         このフィールドを使用しない場合は、<literal>NULL</literal>
         を指定します。関数を宣言するには、マクロ
         <literal>ZEND_MINFO</literal> を使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><envar>version</envar></entry> 
        <entry colname="col2">
         モジュールのバージョン。バージョン番号をまだつけたくない場合は
         <literal>NO_VERSION_YET</literal> が使用できます。しかし、
         何らかのバージョン文字列を指定することを推奨します。
         バージョン文字列は、例えば次のようなものになります
         (バージョンの若い順に並べています): <literal>"2.5-dev"</literal>、
         <literal>"2.5RC1"</literal>、<literal>"2.5"</literal> あるいは
         <literal>"2.5pl3"</literal>。
        </entry>
       </row> 
       <row> 
        <entry colname="col1">それ以外の構造体の要素</entry>
        <entry colname="col2">
         これらは内部的に使用されるもので、マクロ
         <literal>STANDARD_MODULE_PROPERTIES_EX</literal>
         を使用して事前に設定されます。これらの要素に値を代入してはいけません。
         <literal>STANDARD_MODULE_PROPERTIES_EX</literal> を使用するのは、
         グローバルなスタートアップ関数、シャットダウン関数を使用する場合のみです。
         それ以外の場合は <literal>STANDARD_MODULE_PROPERTIES</literal>
         を直接使用します。
        </entry> 
       </row> 
      </tbody> 
     </tgroup> 
    </informaltable> 
   </example> 
   <para>
    今回の例では、この構造体を次のように実装します。
    <programlisting role="c">
<![CDATA[
zend_module_entry firstmod_module_entry =
{
    STANDARD_MODULE_HEADER,
    "First Module",
    firstmod_functions,
    NULL, NULL, NULL, NULL, NULL,
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES,
};
]]>
    </programlisting>
    これは、基本的に必要最小限の設定です。モジュール名は <literal>First
     Module</literal> とし、関数一覧の参照を設定し、
    スタートアップ関数やシャットダウン関数はすべて未使用としています。
   </para> 
   <para>
    参照用として、スタートアップ関数およびシャットダウン関数に関するマクロを
    <xref linkend="internals2.ze1.zendapi.tab.init-shutdown"/> にまとめておきます。
    これらは今回の例では使用しませんが、後で説明します。
    スタートアップ関数やシャットダウン関数を宣言する際にはこれらのマクロを使用すべきです。
    というのもこれらの関数には特別なパラメータ
    (<literal>INIT_FUNC_ARGS</literal> および
    <literal>SHUTDOWN_FUNC_ARGS</literal>) を渡さなければならず、
    定義済みマクロを使用することでこれらが自動的に関数宣言に組み込まれるからです。
    仮にこれらの関数を (マクロを使用せずに) 手動で宣言したとしましょう。
    もし PHP の開発者が何らかの事情で引数を変更したとすると、
    それに追従するためにあなたは自分のモジュールのソースを変更しなければならなくなります。
   </para> 
   <table xml:id="internals2.ze1.zendapi.tab.init-shutdown">
    <title>スタートアップ関数、シャットダウン関数を宣言するためのマクロ</title> 
     <tgroup cols="2">
      <colspec colnum="1" colname="col1" colwidth="1.00*"/>
      <colspec colnum="2" colname="col2" colwidth="1.41*"/> 
      <tbody> 
       <row> 
        <entry colname="col1">マクロ</entry> 
        <entry colname="col2">説明</entry> 
       </row> 
       <row> 
        <entry colname="col1"><literal>ZEND_MINIT(module)</literal></entry> 
        <entry colname="col2">
         モジュールの開始時の関数を宣言します。
         関数名は <literal>zend_minit_&lt;module&gt;</literal> (例えば
         <literal>zend_minit_first_module</literal>) のようになります。
         <literal>ZEND_MINIT_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
       <row> 
      <entry colname="col1"><literal>ZEND_MSHUTDOWN(module)</literal></entry> 
        <entry colname="col2">
         モジュールのシャットダウン時の関数を宣言します。
         関数名は <literal>zend_mshutdown_&lt;module&gt;</literal> (例えば
         <literal>zend_mshutdown_first_module</literal>) のようになります。
         <literal>ZEND_MSHUTDOWN_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><literal>ZEND_RINIT(module)</literal></entry> 
        <entry colname="col2">
         リクエストの開始時の関数を宣言します。
         関数名は <literal>zend_rinit_&lt;module&gt;</literal> (例えば
         <literal>zend_rinit_first_module</literal>) のようになります。
         <literal>ZEND_RINIT_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><literal>ZEND_RSHUTDOWN(module)</literal></entry> 
        <entry colname="col2">
         リクエストのシャットダウン時の関数を宣言します。
         関数名は <literal>zend_rshutdown_&lt;module&gt;</literal> (例えば
         <literal>zend_rshutdown_first_module</literal>) のようになります。
         <literal>ZEND_RSHUTDOWN_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><literal>ZEND_MINFO(module)</literal></entry> 
        <entry colname="col2">
         モジュール情報を出力する関数を宣言します。
         <function>phpinfo</function> がコールされた際に使用されます。
         関数名は <literal>zend_info_&lt;module&gt;</literal> (例えば
         <literal>zend_info_first_module</literal>) のようになります。
         <literal>ZEND_MINFO_FUNCTION</literal> と組み合わせて使用します。
        </entry> 
       </row> 
      </tbody> 
     </tgroup> 
   </table> 
  </sect3> 
  
  <sect3 xml:id="internals2.ze1.zendapi.structure.get-module"> 
   <title><function>get_module</function> の作成</title> 
   <para>
    これは特別な関数で、すべての動的読み込みモジュールで使用されます。
    これを作成するため、まずは <literal>ZEND_GET_MODULE</literal>
    を見てみましょう。
   </para>
   <programlisting role="c">
<![CDATA[
#if COMPILE_DL_FIRSTMOD
     ZEND_GET_MODULE(firstmod) 
#endif
]]>
   </programlisting> 
   <para>
    関数の実装が、条件付きコンパイル文で囲まれています。なぜかというと、
    <function>get_module</function> 関数が必要となるのは
    あなたのモジュールが動的モジュールとしてビルドされる場合だけだからです。
    コンパイラのコマンドで <literal>COMPILE_DL_FIRSTMOD</literal>
    を定義することにより (動的モジュールとしてビルドするための
    コンパイル手順については上記を参照ください)、
    動的モジュールとしてビルドするのか組み込みモジュールとしてビルドするのかを
    指示することができます。組み込みモジュールを作成する場合は、
    <function>get_module</function> の実装は単純に取り除かれます。
   </para> 
   <para>
    <function>get_module</function> は、
    Zend がモジュールを読み込む際にコールされます。
    例えば、スクリプト内で <function>dl</function> 
    がコールされた場合などです。この関数の目的は、モジュール情報ブロックを
    Zend に返し、モジュールの内容をエンジンに教えることです。
   </para> 
   <para>
    動的モジュールで <function>get_module</function>
    関数を実装しなかった場合、
    Zend がそのモジュールにアクセスしようとした際にエラーとなります。
   </para> 
  </sect3> 

  <sect3 xml:id="internals2.ze1.zendapi.structure.implementation">
   <title>エクスポートするすべての関数の実装</title> 
   <para>
    あとは、エクスポートする関数を実装すれば終わりです。
    <literal>first_module</literal> では、例としてこのような関数を使用します。
    <programlisting role="c">
<![CDATA[
ZEND_FUNCTION(first_module)
{
    long parameter;

    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &parameter) == FAILURE) {
        return;
    }

    RETURN_LONG(parameter);
}
]]>
    </programlisting>
    関数の宣言には <literal>ZEND_FUNCTION</literal> を使用します。
    これは、関数エントリテーブルにおける <literal>ZEND_FE</literal>
    に対応しています (こちらについては先ほど説明しました)。
   </para> 
   <para>
    関数宣言の後には、引数のチェックおよびその内容の取得、
    引数の変換、そして返り値の作成などのコードが続きます
    (これらの詳細は後述します)。
   </para> 
  </sect3> 
  
  <sect3 xml:id="internals2.ze1.zendapi.structure.summary"> 
   <title>まとめ</title> 
   <para>
    基本的に、これですべてです。PHP モジュールを構成するのに、
    これ以上のものは必要ありません。組み込みのモジュールについても
    その構造は動的モジュールと同じです。
    ここまでに説明した内容を身に着けておけば、今後 PHP
    モジュールのソースファイルを読んでいく際につまづくこともなくなるでしょう。
   </para> 
   <para>
    さあ、これ以降の節で PHP の内部構造について学び、
    強力な拡張モジュールを作っていきましょう。
   </para>
  </sect3>
 </sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
