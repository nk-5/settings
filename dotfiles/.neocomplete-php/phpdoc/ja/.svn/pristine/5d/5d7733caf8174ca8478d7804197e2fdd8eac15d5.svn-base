<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 306474 Maintainer: hirokawa Status: ready -->
<refentry xml:id="function.xml-parse-into-struct" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>xml_parse_into_struct</refname>
  <refpurpose>配列構造体に XML データを処理する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>xml_parse_into_struct</methodname>
   <methodparam><type>resource</type><parameter>parser</parameter></methodparam>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">values</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">index</parameter></methodparam>
  </methodsynopsis>
  <para>
   この関数は、XML 文字列を処理し、2つの配列構造体に代入します。
   ひとつめの配列 (<parameter>index</parameter>) は、配列
   <parameter>values</parameter> にある適当な値の位置を指すポインタを保持しています。
   これら最後の二つのパラメータは参照渡しとする必要があります。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>parser</parameter></term>
     <listitem>
      <para>
       XML パーサへの参照。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       XML データを含む文字列。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       XML データの値を含む配列。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>index</parameter></term>
     <listitem>
      <para>
       $values 内の適切な値の場所をさすポインタの配列。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>xml_parse_into_struct</function> は失敗した場合に 0、
   成功した場合に 1 を返します。これは &false; および &true; とは
   異なるものですので、=== のような演算子を使用する場合は注意しましょう。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   以下の例は、この関数により生成された配列の内部構造を示すものです。
   <literal>note</literal>タグを<literal>para</literal>タグの中に埋
   め込んで使用した後、これをパースし、生成された構造体を出力します。
   <example>
    <title><function>xml_parse_into_struct</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$simple = "<para><note>simple note</note></para>";
$p = xml_parser_create();
xml_parse_into_struct($p, $simple, $vals, $index);
xml_parser_free($p);
echo "Index array\n";
print_r($index);
echo "\nVals array\n";
print_r($vals);
?>
]]>
    </programlisting>
    <para>
     このコードを実行した場合、出力は次のようになります。
    </para>
    <screen>
<![CDATA[
Index array
Array
(
    [PARA] => Array
        (
            [0] => 0
            [1] => 2
        )

    [NOTE] => Array
        (
            [0] => 1
        )

)

Vals array
Array
(
    [0] => Array
        (
            [tag] => PARA
            [type] => open
            [level] => 1
        )

    [1] => Array
        (
            [tag] => NOTE
            [type] => complete
            [level] => 2
            [value] => simple note
        )

    [2] => Array
        (
            [tag] => PARA
            [type] => close
            [level] => 1
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   (expatライブラリを使用した)イベント駆動型パーサによる処理は、XML
   ドキュメントが複雑な場合に複雑になる場合があります。この関数は、
   DOM形式のオブジェクトを生成しませんが、ツリー風に一連の処理を行い
   得る構造体を生成します。つまり、XMLのファイルを表すオブジェクトを
   容易に作成することが可能です。次のXMLファイルを見てみましょう。
   このファイルでは、アミノ酸の情報に関する小さなデータベースを表します。
   <example>
    <title>moldb.xml - 分子情報の小さなデータベース</title>
    <programlisting role="xml">
<![CDATA[
<?xml version="1.0"?>
<moldb>

  <molecule>
      <name>Alanine</name>
      <symbol>ala</symbol>
      <code>A</code>
      <type>hydrophobic</type>
  </molecule>

  <molecule>
      <name>Lysine</name>
      <symbol>lys</symbol>
      <code>K</code>
      <type>charged</type>
  </molecule>

</moldb>
]]>
    </programlisting>
   </example>
   ドキュメントを処理し、適当なオブジェクトを生成するいくつかのコード
   <example>
    <title>
     parsemoldb.php - moldb.xml を処理し、分子オブジェクトの配列に代入
    </title>
    <programlisting role="php">
<![CDATA[
<?php

class AminoAcid {
    var $name;  // aa name
    var $symbol;    // three letter symbol
    var $code;  // one letter code
    var $type;  // hydrophobic, charged or neutral
    
    function AminoAcid ($aa) 
    {
        foreach ($aa as $k=>$v)
            $this->$k = $aa[$k];
    }
}

function readDatabase($filename) 
{
    // read the XML database of aminoacids
    $data = implode("", file($filename));
    $parser = xml_parser_create();
    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
    xml_parse_into_struct($parser, $data, $values, $tags);
    xml_parser_free($parser);

    // loop through the structures
    foreach ($tags as $key=>$val) {
        if ($key == "molecule") {
            $molranges = $val;
            // each contiguous pair of array entries are the 
            // lower and upper range for each molecule definition
            for ($i=0; $i < count($molranges); $i+=2) {
                $offset = $molranges[$i] + 1;
                $len = $molranges[$i + 1] - $offset;
                $tdb[] = parseMol(array_slice($values, $offset, $len));
            }
        } else {
            continue;
        }
    }
    return $tdb;
}

function parseMol($mvalues) 
{
    for ($i=0; $i < count($mvalues); $i++) {
        $mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
    }
    return new AminoAcid($mol);
}

$db = readDatabase("moldb.xml");
echo "** Database of AminoAcid objects:\n";
print_r($db);

?>
]]>
    </programlisting>
   </example>
   <filename>parsemoldb.php</filename>を実行した後、変数
   <varname>$db</varname> は、オブジェクト
   <classname>AminoAcid</classname>の配列を有しており、スクリプトの
   出力は、次のようになります。
   <informalexample>
    <screen>
<![CDATA[
** Database of AminoAcid objects:
Array
(
    [0] => aminoacid Object
        (
            [name] => Alanine
            [symbol] => ala
            [code] => A
            [type] => hydrophobic
        )

    [1] => aminoacid Object
        (
            [name] => Lysine
            [symbol] => lys
            [code] => K
            [type] => charged
        )

)
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
