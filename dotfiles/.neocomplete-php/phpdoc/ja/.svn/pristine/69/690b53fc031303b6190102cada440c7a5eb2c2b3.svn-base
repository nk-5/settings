<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328167 Maintainer: takagi Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>プロパティ</title>

  <para>
   クラスのメンバ変数のことを「プロパティ」といいます。
   それ以外に「属性」「フィールド」などという呼びかたを見たことがあるかもしれません。
   しかし、このマニュアルでは「プロパティ」と呼ぶことにします。
   プロパティを定義するには <literal>public</literal>、<literal>protected</literal>
   あるいは <literal>private</literal>
   のいずれかのキーワードのあとに通常の変数の宣言を続けます。
   宣言時に初期値を設定することもできますが、初期値は定数値でなければなりません。
   つまり、コンパイル時に評価可能な値でなければならず、
   実行時の情報がないと評価できない値であってはいけないということです。
  </para>
  <para>
   <literal>public</literal>、<literal>protected</literal>
   そして <literal>private</literal> についての詳しい情報は
   <xref linkend="language.oop5.visibility" /> を参照ください。
  </para>
  <note>
   <para>
    PHP 4 との互換性を考慮して、PHP 5 でも <literal>var</literal>
    を使ったプロパティの宣言が可能です。これは
    <literal>public</literal> や <literal>protected</literal>、
    <literal>private</literal> と組み合わせて使うこともできます。
    しかし、もはや <literal>var</literal> は必須ではありません。
    PHP 5.0 から 5.1.3 までのバージョンでは、
    <literal>var</literal> の使用は非推奨とされており、
    <constant>E_STRICT</constant> 警告が発生していました。
    しかし PHP 5.1.3 以降は非推奨ではなくなり、警告も出なくなっています。
   </para>
   <para>
    <literal>public</literal> や <literal>protected</literal>、
    <literal>private</literal> のかわりに <literal>var</literal>
    を使ってプロパティを宣言した場合、PHP 5 はそれを
    <literal>public</literal> と同等とみなします。
   </para>
  </note>
  <para>
   クラスメソッドから静的でないプロパティにアクセスするには
   <literal>-&gt;</literal> (オブジェクト演算子) を使って
   <varname>$this-&gt;property</varname> のようにします
   (<literal>property</literal> のところにプロパティ名を指定します)。
   静的なプロパティへのアクセスには <literal>::</literal> (ダブルコロン)
   を使って <varname>self::$property</varname> のようにします。
   静的なプロパティとそうでないプロパティの違いについては、
   <link linkend="language.oop5.static">static キーワード</link> を参照ください。
  </para>
  <para>
   クラスメソッドがオブジェクトのコンテキストからコールされたときには、
   擬似変数 <varname>$this</varname> が常に使えます。
   <varname>$this</varname> は、呼び出し元のオブジェクト
   (通常はそのメソッドが属するオブジェクトですが、別のオブジェクトになる可能性もあります。
   別のオブジェクトのコンテキストから <link linkend="language.oop5.static">静的に</link>
   コールされた場合などです) への参照となります。
  </para>

  <para>
   <example>
    <title>プロパティの宣言</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // 無効なプロパティ宣言
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // 有効なプロパティ宣言
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // これは PHP 5.3.0 以降でのみ使える方式です
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    クラスやオブジェクトを操作するための便利な関数が用意されています。
    <link linkend="ref.classobj">クラス/オブジェクト関数</link>
    を参照ください。
   </para>
  </note>

  <para>
   <link linkend="language.types.string.syntax.heredoc">ヒアドキュメント</link> とは異なり、
   <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
   は任意の静的データコンテキストで使えます。プロパティの宣言時にも使用可能です。
   <example>
    <title>nowdoc を使ったプロパティの初期化</title>
    <programlisting role="php">
<![CDATA[
<?php
class foo {
   // PHP 5.3.0 以降
   public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Nowdoc は PHP 5.3.0 以降で使用可能です。
   </para>
  </note>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
