<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334183 Maintainer: takagi Status: ready -->
 <chapter xml:id="internals2.funcs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>関数の作成</title>
  <para>
   PHP では関数とメソッドはだいたい同じ形式で、メソッドは単にスコープが限定された関数でしかありません。
   つまり、そのメソッドが属するクラスエントリのスコープになるということです。
   クラスエントリについては、このマニュアルの別のページで説明します。
   このセクションの目的は、関数やメソッドの内部構造を紹介することです。
   関数を定義したり、変数を受け取ったり、PHP プログラマーに値を返したりする方法を説明します。
  </para>

  <para>
   関数の内部構造は、それほど単純ではありません。
  </para>
  
  <screen>
<![CDATA[
PHP_FUNCTION(hackers_function) {
  /* 受け取る引数をここで指定します */
  long number;
  
  /* 引数を受け取ります */
  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &number) != SUCCESS) {
      return;
  }
  
  /* 何かの作業をします */
  number *= 2;
  
  /* 戻り値を設定します */
  RETURN_LONG(number);
}]]>
  </screen>
  
  <para>
   プリプロセッサの <code>PHP_FUNCTION(hackers_function)</code> 命令は、
   次のような宣言に展開されます。
  </para>
  
  <screen>
<![CDATA[
void zif_hackers_function(INTERNAL_FUNCTION_PARAMETERS)
]]>
  </screen>
  
  <para>
   <code>INTERNAL_FUNCTION_PARAMETERS</code> はマクロとして定義されており、
   次の表のようになります。
  </para>
  
  <table xml:id="internals2.funcs.index.internal-func-params">
   <title>INTERNAL_FUNCTION_PARAMETERS</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>型と名前</entry>
      <entry>説明</entry>
      <entry>アクセス用マクロ</entry>
     </row>
    </thead>
    <tbody>
                                                    
     <row>
      <entry><code>int ht</code></entry>
      <entry>ユーザーから実際に渡されたパラメータの数</entry>
      <entry><code>ZEND_NUM_ARGS()</code></entry>
     </row>

     <row>
      <entry><code>zval *return_value</code></entry>
      <entry>
       PHP 変数へのポインタ。ここに、ユーザーへの戻り値を設定します。
       デフォルトの型は <code>IS_NULL</code> です。
      </entry>
      <entry><code>RETVAL_*</code>, <code>RETURN_*</code></entry>
     </row>

     <row>
      <entry><code>zval **return_value_ptr</code></entry>
      <entry>
       PHP に参照を返すときには、ここに変数へのポインタを設定します。
       参照を返すことはお勧めしません。
      </entry>
      <entry/>
     </row>

     <row>
      <entry><code>zval *this_ptr</code></entry>
      <entry>
       メソッド呼び出しの場合は、<code>$this</code> オブジェクトを保持する PHP 変数を指します。
      </entry>
      <entry><code>getThis()</code></entry>
     </row>

     <row>
      <entry><code>int return_value_used</code></entry>
      <entry>
       返り値を呼び出し元が使うかどうかを示すフラグ。
      </entry>
      <entry/>
     </row>

    </tbody>
   </tgroup>
  </table>
  
  <para>
   明確にするために、完全に展開した <code>PHP_FUNCTION(hackers_function)</code> のドキュメントを示します。
  </para>
  
  <screen>
<![CDATA[
void zif_hackers_function(int ht, zval* return_value, zval** return_value_ptr, zval* this_ptr, int return_value_used)
]]>
  </screen>
  
  <para>
    <code>this_ptr</code> の存在を奇妙に感じるかもしれません。クラスの詳細は後ほど説明するとして、ここでは
    <code>PHP_METHOD(MyClass, hackersFunction)</code> の結果が次のような宣言になることを示しておけば十分でしょう。
  </para>
  
  <screen>
<![CDATA[
void zim_MyClass_hackersFunction(INTERNAL_FUNCTION_PARAMETERS)
]]>
  </screen>
  
  <para>
   <code>hackers_function</code> は特に凝ったことをするわけではなく、<code>zend_parse_parameters</code> API
   を使って受け取った数値を二倍して、それをエンジンに返すだけです。
   普通は、単に入力を二倍するだけなどではなく、もっと複雑な何かを行うことでしょう。
   ここでは、説明のために、できるだけシンプルにとどめました。
   関数に入った際に <code>return_value</code> を確保し、<code>null</code> に初期化されます。
   これで、PHP の関数のデフォルトの返り値が <code>null</code> となります。
  </para>
  
  <para>
   <code>Hacker</code> が正しい引数として指定する内容を
   <code>zend_parse_parameters</code> が受け取れず、受け取った引数を
   <code>type_spec</code> を満たす形式に変換できなかった場合は、エラーを発生させます。
   そして、<code>Hacker</code> はその場で <code>return</code> しなければいけません。
  </para>
  
  <note>
   <para><code>Array</code>、<code>Object</code>、そして <code>Resource</code> は変換できません。</para>
  </note>
  
  <table xml:id="internals2.funcs.parameters.api">
   <title>パラメータのプロトタイプのパース</title>
   <tgroup cols="1">
    <tbody>
     <row>
      <entry><code>int zend_parse_parameters(int num_args TSRMLS_DC, char *type_spec, ...)</code></entry>
     </row>
     <row>
      <entry><code>int zend_parse_parameters_ex(int flags, int num_args TSRMLS_DC, char *type_spec, ...)</code></entry>
     </row>
     <row>
      <entry><code>int zend_parse_parameter(int flags, int arg_num TSRMLS_DC, zval **arg, const char *spec, ...)</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>
    <code>zend_parse_parameter</code> はバージョン 5.5 以降で使用可能で、<code>zend_parse_parameters_ex</code> と同じような挙動です。
    ただ、引数をスタックから読み込むのではなく、変換対象の zval を受け取って、その場で変換します。
   </para>
  </note>
  
  <note>
   <para>
    <code>flags</code> はマスクとして扱うことを想定しています。現時点で有効なフラグは <code>ZEND_PARSE_PARAMS_QUIET</code> だけです (これは、警告を抑制します)。
   </para>
  </note>
  
  <para>
   これらの API 関数から受け取る可変引数は、C の変数のアドレスであることが期待されています。
   また、<code>zend_parse_parameters</code> API 関数の出力であると考えなければいけません。
  </para>

  <table xml:id="internals2.funcs.parameters.types">
   <title>型指定子</title>
   <tgroup cols="3">
     <thead>
     <row>
      <entry>指定子</entry>
      <entry>型</entry>
      <entry>ローカル</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>a</entry>
      <entry><code>array</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>A</entry>
      <entry><code>array</code> あるいは <code>object</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>b</entry>
      <entry><code>boolean</code></entry>
      <entry><code>zend_bool</code></entry>
     </row>
     <row>
      <entry>C</entry>
      <entry><code>class</code></entry>
      <entry><code>zend_class_entry*</code></entry>
     </row>
     <row>
      <entry>d</entry>
      <entry><code>double</code></entry>
      <entry><code>double</code></entry>
     </row>
     <row>
      <entry>f</entry>
      <entry><code>function</code></entry>
      <entry><code>zend_fcall_info*</code>, <code>zend_fcall_info_cache*</code></entry>
     </row>
     <row>
      <entry>h</entry>
      <entry><code>array</code></entry>
      <entry><code>HashTable*</code></entry>
     </row>
     <row>
      <entry>H</entry>
      <entry><code>array</code> あるいは <code>object</code></entry>
      <entry><code>HashTable*</code></entry>
     </row>
     <row>
      <entry>l</entry>
      <entry><code>long</code></entry>
      <entry><code>long</code></entry>
     </row>
     <row>
      <entry>L</entry>
      <entry><code>long</code> (LONG_MAX/LONG_MIN の範囲に収まるもの)</entry>
      <entry><code>long</code></entry>
     </row>
     <row>
      <entry>o</entry>
      <entry><code>object</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>O</entry>
      <entry><code>object</code> (指定した <code>zend_class_entry</code> のもの)</entry>
      <entry><code>zval*</code>, <code>zend_class_entry*</code></entry>
     </row>
     <row>
      <entry>p</entry>
      <entry><code>string</code> (有効なパス)</entry>
      <entry><code>char*</code>, <code>int</code></entry>
     </row>
     <row>
      <entry>r</entry>
      <entry><code>resource</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>s</entry>
      <entry><code>string</code></entry>
      <entry><code>char*</code>, <code>int</code></entry>
     </row>
     <row>
      <entry>z</entry>
      <entry><code>mixed</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>Z</entry>
      <entry><code>mixed</code></entry>
      <entry><code>zval**</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>
    型指定子が <code>O</code> の場合、ローカルの <code>zend_class_entry*</code> は
    <code>zend_parse_parameter</code> への入力 (型指定子の一部) と見なされます。
   </para>
  </note>
  
  <table xml:id="internals2.funcs.parameters.advanced">
   <title>高度な型指定子</title>
   <tgroup cols="3">
     <thead>
     <row>
      <entry>指定子</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>*</entry>
      <entry>直前の型の引数が 0 個以上</entry>
     </row>
     <row>
      <entry>+</entry>
      <entry>直前の型の引数が 1 個以上</entry>
     </row>
     <row>
      <entry>|</entry>
      <entry>残りのパラメータは任意である</entry>
     </row>
     <row>
      <entry>/</entry>
      <entry>後に続くパラメータを <code>SEPARATE_ZVAL_IF_NOT_REF</code> します。</entry>
     </row>
     <row>
      <entry>!</entry>
      <entry>
       直前のパラメータが、指定した型あるいは <code>null</code> のどちらかになるものとします。
       'b'、'l'、'd' の場合は、対応する <code>bool*</code>、<code>long*</code>、<code>double*</code>
       の後に zend_bool* 型の引数を追加する必要があります。<code>null</code>
       を受け取った場合は、ここに <code>true</code> が設定されます。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <note>
   <para>パラメータのパースについての詳細は、ソース配布物に含まれる <code>README.PARAMETER_PARSING_API</code> を参照ください。</para>
  </note>
  
  <para>
   一度 <code>Hacker</code> の関数が実行されたら、実行するよう実装されているかどうかにかかわらず、エンジン向けの <code>return_value</code> を設定します。
   <code>RETURN_</code> マクロと <code>RETVAL_</code> マクロは
   <code>Z_*_P</code> の単なるラッパーで、<code>return_value</code> と組み合わせて使います。
  </para>
  
  <note>
   <para>
    <code>RETURN_</code> マクロはその場で関数の実行を終了します (つまり、<code>return;</code> します) が、
    <code>RETVAL_</code> は、<code>return_value</code> を設定してからも実行を続けます。
   </para>
  </note>
  
  <para>
   これで、関数の仕組みについて、それなりに理解できたことでしょう。
   メソッドの仕組みについても、ある程度は理解できたはずです。
  </para>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
