<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325661 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa -->
<refentry xml:id="function.call-user-func-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>call_user_func_array</refname>
  <refpurpose>パラメータの配列を指定してコールバック関数をコールする</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>call_user_func_array</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>param_arr</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>param_arr</parameter> にパラメータを指定して、
   <parameter>callback</parameter> で指定したユーザー定義関数をコールします。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       コールする<type>callable</type>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>param_arr</parameter></term>
     <listitem>
      <para>
       コールバック関数に渡すパラメータを指定する配列。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   コールバック関数の結果、あるいはエラー時に &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        オブジェクト指向のキーワード、たとえば <literal>parent</literal> や
        <literal>self</literal> などの処理方法が変わりました。
        これまでは、ダブルコロン構文を使ってこれらをコールすると
        <constant>E_STRICT</constant> 警告が発生していました。静的コールと判断されたからです。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>call_user_func_array</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($arg, $arg2) {
    echo __FUNCTION__, " got $arg and $arg2\n";
}
class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " got $arg and $arg2\n";
    }
}


// foobar() 関数に引数を 2 つ渡してコールします
call_user_func_array("foobar", array("one", "two"));

// $foo->bar() メソッドに引数を 2 つ渡してコールします
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("three", "four"));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar got one and two
foo::bar got three and four
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func_array</function> での名前空間の使用法</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($name) {
        print "Hello {$name}!\n";
    }
}

// PHP 5.3.0 以降
call_user_func_array(__NAMESPACE__ .'\Foo::test', array('Hannes'));

// PHP 5.3.0 以降
call_user_func_array(array(__NAMESPACE__ .'\Foo', 'test'), array('Philip'));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Hello Hannes!
Hello Philip!
]]>
    </screen>
   </example>
   <example>
    <title>ラムダ関数の使用</title>
    <programlisting role="php">
<![CDATA[
<?php

$func = function($arg1, $arg2) {
    return $arg1 * $arg2;
};

var_dump(call_user_func_array($func, array(2, 4))); /* PHP 5.3.0 以降 */

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(8)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    PHP 5.4 より前のバージョンでは、
    <parameter>param_arr</parameter> 内で参照される変数は、
    関数に参照渡しされます。これは、
    その関数がパラメータを参照渡しで受け取ることを期待しているかどうかにかかわらず同じです。
    この形式でコール時に参照渡しをしても、廃止予定であるという notice
    は発生しません。とはいえ、それが廃止予定であることに変わりはなく、
    PHP 5.4 では削除されました。
    さらに、この形式は PHP の組み込み関数には適用できません。
    組み込み関数については関数のシグネチャが優先されます。
    参照渡しを期待しているところに値で渡すと警告が発生し、
    <function>call_user_func</function> は &false; を返します
    (これには例外があります。参照カウンタが 1、つまりリテラルなどの場合です。
    というのも、値を参照に変えても悪影響はないし、
    値に書き込んでも何の効果もないからです。しかし、この例外に頼ってはいけません。
    参照カウンタというのはあくまでも内部実装レベルの話であり、
    今後もずっとそうであるとは限らないからです)。
   </para>
  </note>
  &note.func-callback-exceptions;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member>&seealso.callback;</member>
    <member><methodname>ReflectionFunction::invokeArgs</methodname></member>
    <member><methodname>ReflectionMethod::invokeArgs</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
