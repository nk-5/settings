<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322138 Maintainer: takagi Status: ready -->
 <sect1 xml:id="internals2.structure.modstruct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>zend_module 構造体</title>
  <para>
   PHP 拡張モジュールのソースファイルの中には、
   C プログラマにとって目新しいものがいくつか含まれています。
   これらの中でも最も重要であり、
   拡張モジュールを開発するにあたって最初にさわることになるのが
   <literal>zend_module</literal> 構造体です。
   この構造体には豊富な情報が格納されており、
   その拡張モジュールの依存性やバージョン、コールバック、
   その他重要なデータを Zend Engine に伝える役割を果たします。
   この構造体の中身は、何度も大幅に変更されています。
   ここでは、PHP 5.2 の時点の情報をもとにして説明します。
   PHP 5.3 では少々変更されている点もあります。
  </para>
  
  <para>
   <filename>counter.c</filename> での <literal>zend_module</literal>
   の宣言は、次のようになります。これは、
   <command>ext_skel --extname=counter</command>
   で生成したものをもとにして、既に存在しないいくつかの構造体を削除したものです。
  </para>
  
  <example xml:id="internals2.structure.modstruct.example-decl">
   <title>counter 拡張モジュールにおける zend_module の宣言部</title>
   <programlisting role="c">
<![CDATA[
/* {{{ counter_module_entry
 */
zend_module_entry counter_module_entry = {
    STANDARD_MODULE_HEADER,
    "counter",
    counter_functions,
    PHP_MINIT(counter),
    PHP_MSHUTDOWN(counter),
    PHP_RINIT(counter),        /* Replace with NULL if there's nothing to do at request start */
    PHP_RSHUTDOWN(counter),    /* Replace with NULL if there's nothing to do at request end */
    PHP_MINFO(counter),
    "0.1", /* Replace with version number for your extension */
    STANDARD_MODULE_PROPERTIES
};
/* }}} */
]]>
   </programlisting>
  </example>
  
  <para>
   最初はちょっとひるむかも知れませんが、
   大半の部分はよく見れば非常に単純です。
   次に示すのは、PHP 5.3 の <filename>zend_modules.h</filename>
   における <literal>zend_module</literal> の宣言部です。
  </para>
  
  <example xml:id="internals2.structure.modstruct.struct-defn">
   <title>PHP 5.3 における zend_module の定義</title>
   <programlisting role="c">
<![CDATA[
struct _zend_module_entry {
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;
    const struct _zend_ini_entry *ini_entry;
    const struct _zend_module_dep *deps;
    const char *name;
    const struct _zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    const char *version;
    size_t globals_size;
#ifdef ZTS
    ts_rsrc_id* globals_id_ptr;
#else
    void* globals_ptr;
#endif
    void (*globals_ctor)(void *global TSRMLS_DC);
    void (*globals_dtor)(void *global TSRMLS_DC);
    int (*post_deactivate_func)(void);
    int module_started;
    unsigned char type;
    void *handle;
    int module_number;
};
]]>
   </programlisting>
  </example>
  
  <para>
   これらのフィールドの多くは、決して拡張モジュールの作者が触ることはありません。
   数多くのマクロが標準で用意されており、
   そのマクロが適切な値を自動的に設定します。
   <constant>STANDARD_MODULE_HEADER</constant> マクロは、
   <varname>deps</varname> フィールドまでのすべての内容を埋めます。
   一方 <constant>STANDARD_MODULE_HEADER_EX</constant> は
   <varname>deps</varname> フィールドを空のままにしておき、
   開発者が使えるようにします。<varname>name</varname> から
   <varname>version</varname> までのすべてのフィールドは、開発者が設定する必要があります。
   その後、<constant>STANDARD_MODULE_PROPERTIES</constant>
   マクロで構造体の残りのフィールドを埋めます。あるいは
   <constant>STANDARD_MODULE_PROPERTIES_EX</constant> マクロを使用すると、
   extension global と post-deactivation function のフィールドを空のままにします。
   いまどきの拡張モジュールのほとんどは、モジュールグローバルを使用します。
  </para>
  
  <note>
   <para>
    ショートカットマクロに頼らず、構造体のフィールドをすべて自分で設定したい場合は、
    この表の値を使用します。
    <emphasis>これはお勧めしません。</emphasis>
    そのフィールドの &quot;正しい&quot; 値は変わる可能性があります。
    可能な限りマクロを使用するようにしましょう。
   </para>
  </note>

  <table xml:id="internals2.structure.modstruct.struct-values">
   <title>モジュール構造体のフィールドの値</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>フィールド</entry>
      <entry>値</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry>
       <varname>size</varname>
       <footnote xml:id="internals2.structure.modstruct.struct-values.not-for-dev">
        <para>
         このフィールドは、モジュール開発者が使うものではありません。
        </para>
       </footnote>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-smhe">
        <para>
         このフィールドは <constant>STANDARD_MODULE_HEADER_EX</constant> が設定します。
        </para>
       </footnote>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-smh">
        <para>
         このフィールドは <constant>STANDARD_MODULE_HEADER</constant> が設定します。
        </para>
       </footnote>
      </entry>
      <entry><code>sizeof(zend_module_entry)</code></entry>
      <entry>
       この構造体の大きさ (バイト数)。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>zend_api</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smhe"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smh"/>
      </entry>
      <entry><constant>ZEND_MODULE_API_NO</constant></entry>
      <entry>
       モジュールをコンパイルした Zend API のバージョン。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>zend_debug</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smhe"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smh"/>
      </entry>
      <entry><constant>ZEND_DEBUG</constant></entry>
      <entry>
       モジュールがデバッグモードでコンパイルされていることを示すフラグ。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>zts</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smhe"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smh"/>
      </entry>
      <entry><constant>USING_ZTS</constant></entry>
      <entry>
       モジュールが ZTS (TSRM) を有効にしてコンパイルされていることを示すフラグ
       (<xref linkend="internals2.memory"/> を参照ください)。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>ini_entry</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smh"/>
      </entry>
      <entry>&null;</entry>
      <entry>
       このポインタは Zend の内部で用い、
       モジュールで宣言した非ローカルの INI エントリへの参照を保持します。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>deps</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smh"/>
      </entry>
      <entry>&null;</entry>
      <entry>
       モジュールの依存性一覧へのポインタ。
      </entry>
     </row>

     <row>
      <entry>
       <varname>name</varname>
      </entry>
      <entry>&quot;mymodule&quot;</entry>
      <entry>
       モジュールの名前。これは
       &quot;spl&quot; あるいは &quot;standard&quot;
       のような短い名前です。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>functions</varname>
      </entry>
      <entry>mymodule_functions</entry>
      <entry>
       モジュールの関数テーブルへのポインタ。
       Zend は、これを使用してモジュール内の関数をユーザー空間に公開します。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>module_startup_func</varname>
      </entry>
      <entry>PHP_MINIT(mymodule)</entry>
      <entry>
       コールバック関数です。Zend は、特定の PHP インスタンスで
       そのモジュールが最初にロードされるときにこれをコールします。
      </entry>
     </row>

     <row>
      <entry>
       <varname>module_shutdown_func</varname>
      </entry>
      <entry>PHP_MSHUTDOWN(mymodule)</entry>
      <entry>
       コールバック関数です。Zend は、特定の PHP インスタンスから
       そのモジュールがアンロードされるとき (通常は最後のシャットダウン時) にこれをコールします。
      </entry>
     </row>

     <row>
      <entry>
       <varname>request_startup_func</varname>
      </entry>
      <entry>PHP_RINIT(mymodule)</entry>
      <entry>
       コールバック関数です。Zend は、各リクエストの開始時にこれをコールします。
       これは、可能な限り短くするか <literal>NULL</literal> にしておかなければなりません。
       リクエストのたびにこれをコールするコストがかかるからです。
      </entry>
     </row>

     <row>
      <entry>
       <varname>request_shutdown_func</varname>
      </entry>
      <entry>PHP_RSHUTDOWN(mymodule)</entry>
      <entry>
       コールバック関数です。Zend は、各リクエストの終了時にこれをコールします。
       これは、可能な限り短くするか <literal>NULL</literal> にしておかなければなりません。
       リクエストのたびにこれをコールするコストがかかるからです。
      </entry>
     </row>

     <row>
      <entry>
       <varname>info_func</varname>
      </entry>
      <entry>PHP_MINFO(mymodule)</entry>
      <entry>
       コールバック関数です。Zend は、<function>phpinfo</function>
       関数がコールされたときにこれをコールします。
      </entry>
     </row>

     <row>
      <entry>
       <varname>version</varname>
      </entry>
      <entry><constant>NO_VERSION_YET</constant></entry>
      <entry>
       モジュールのバージョンを表す文字列。モジュールの作者が指定したものです。
       バージョン番号の形式は、
       version_compare() に対応したもの (たとえば &quot;1.0.5-dev&quot;) か
       CVS や SVN のリビジョン番号 (たとえば &quot;$Rev$&quot;)
       にあわせたものにしておくことを推奨します。
      </entry>
     </row>

     <row>
      <entry>
       <varname>globals_size</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-smp">
        <para>
         このフィールドは <constant>STANDARD_MODULE_PROPERTIES</constant> が設定します。
        </para>
       </footnote>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-nmg">
        <para>
         このフィールドは <constant>NO_MODULE_GLOBALS</constant> が設定します。
        </para>
       </footnote>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-pmg">
        <para>
         このフィールドは <constant>PHP_MODULE_GLOBALS</constant> が設定します。
        </para>
       </footnote>
      </entry>
      <entry>sizeof(zend_mymodule_globals)</entry>
      <entry>
       このモジュール用のグローバル構造体が存在する場合のサイズ。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>globals_id_ptr</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-nmg"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-pmg"/>
       <footnote xml:id="internals2.structure.modstruct.struct-values.only-with-zts">
        <para>
         このフィールドが存在するのは <constant>USING_ZTS</constant> が &true;
         のときだけです。
        </para>
       </footnote>
      </entry>
      <entry>&amp;mymodule_globals_id</entry>
      <entry morerows="1">
       定数 <constant>USING_ZTS</constant> が &true; かどうかによって、
       これらふたつのフィールドのうちのいずれかひとつだけが存在します。
       最初のほうはモジュールのグローバル用の TSRM アロケーションテーブルへのインデックス、
       後のほうはグローバルへの直接のポインタとなります。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>globals_ptr</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-nmg"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-pmg"/>
       <footnote xml:id="internals2.structure.modstruct.struct-values.only-without-zts">
        <para>
         このフィールドが存在するのは <constant>USING_ZTS</constant> が &false;
         のときだけです。
        </para>
       </footnote>
      </entry>
      <entry>&amp;mymodule_globals</entry>
     </row>
     
     <row>
      <entry>
       <varname>globals_ctor</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-nmg"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-pmg"/>
      </entry>
      <entry>PHP_GINIT(mymodule)</entry>
      <entry>
       この関数は <varname>module_startup_func</varname> の <emphasis>前に</emphasis>
       コールされ、モジュールのグローバルを初期化します。
      </entry>
     </row>

     <row>
      <entry>
       <varname>globals_dtor</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-nmg"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-pmg"/>
      </entry>
      <entry>PHP_GSHUTDOWN(mymodule)</entry>
      <entry>
       この関数は <varname>module_shutdown_func</varname> の <emphasis>後に</emphasis>
       コールされ、モジュールのグローバルを破棄します。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>post_deactivate_func</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
      </entry>
      <entry>ZEND_MODULE_POST_ZEND_DEACTIVATE_N(mymodule)</entry>
      <entry>
       この関数は、リクエストの終了処理の後で Zend からコールされます。
       めったに使われることはありません。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>module_started</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-smpe">
        <para>
         このフィールドは <constant>STANDARD_MODULE_PROPERTIES_EX</constant> が設定します。
        </para>
       </footnote>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
      </entry>
      <entry>0</entry>
      <entry morerows="3">
       これらのフィールドは、Zend の内部管理用の情報を扱うために使用します。
      </entry>
     </row>
     
     <row>
      <entry>
       <varname>type</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smpe"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
      </entry>
      <entry>0</entry>
     </row>
     
     <row>
      <entry>
       <varname>handle</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smpe"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
      </entry>
      <entry>&null;</entry>
     </row>
    
     <row>
      <entry>
       <varname>module_number</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.not-for-dev"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smpe"/>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-smp"/>
      </entry>
      <entry>0</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <sect2 xml:id="internals2.structure.modstruct.filling-it-in">
   <title>構造体の設定の実例</title>

   <para>
    これだけ多くのフィールドがあると、
    どれが何のためのものなのかがなかなかわかりにくいものです。
    ここで、サンプルの "counter" 拡張モジュールにおける
    <literal>zend_module</literal> の定義の最終形を見てみましょう。
   </para>
   
   <example xml:id="internals2.structure.modstruct.filling-it-in.counter-mod-ex">
    <title>Counter 拡張モジュールの定義</title>
    <programlisting role="c">
<![CDATA[
/* {{{ counter_module_entry
 */
zend_module_entry counter_module_entry = {
    STANDARD_MODULE_HEADER,
    "counter",
    counter_functions,
    PHP_MINIT(counter),
    PHP_MSHUTDOWN(counter),
    PHP_RINIT(counter),
    PHP_RSHUTDOWN(counter),
    PHP_MINFO(counter),
    NO_VERSION_YET,
    PHP_MODULE_GLOBALS(counter),
    PHP_GINIT(counter),
    PHP_GSHUTDOWN(counter),
    NULL,
    STANDARD_MODULE_PROPERTIES_EX
};
/* }}} */
]]>
    </programlisting>
   </example>
   
   <itemizedlist>
    <listitem>
     <simpara>
      このモジュールは他の何にも依存していないので、
      <constant>STANDARD_MODULE_HEADER</constant> を使用します。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      &quot;counter&quot; がこの拡張モジュールの名前で、
      このモジュールが Zend に渡すさまざまなコールバック関数の名前がこれをもとに決まります。
      "counter" は、モジュール、グローバル、そしてリクエスト単位の
      初期化関数とシャットダウン関数を使用し、<function>phpinfo</function>
      用の情報も提供します。したがって、7 つのコールバックをすべて定義することになります。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      モジュール定義を含むファイルの前のほうには
      <type>zend_function_entry *</type> 型の変数
      <varname>counter_functions</varname> が定義されているはずです。
      この部分では、そのモジュールがユーザーに公開する関数の一覧が見られます。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      <constant>NO_VERSION_YET</constant> は、そのモジュールにバージョンがないことを
      Zend に教えてあげるうまいやりかたです。実際に使用するモジュールの場合は、
      この部分には <literal>&quot;1.0&quot;</literal> などを入れることになるでしょう。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      "counter" はモジュール単位のグローバル変数を使用するので、
      <constant>PHP_MODULE_GLOBALS</constant> を使用しています。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      このモジュールには後処理後の関数がないので、&null; を指定しています。
     </simpara>
    </listitem>
    
    <listitem>
     <simpara>
      このモジュールはグローバル変数を <emphasis>使う</emphasis> ので、
      構造体の最後には
      <constant>STANDARD_MODULE_PROPERTIES_EX</constant> を使用しています。
     </simpara>
    </listitem>
   
   </itemizedlist>

  </sect2>

  <sect2 xml:id="internals2.structure.modstruct.php53">
   <title>5.2 と 5.3 の違いは?</title>
   
   <simpara>
    何もありません。
    PHP 5.2 と PHP 5.3 での <literal>zend_module</literal>
    構造体の唯一の違いは、いくつかの <modifier>const</modifier> キーワードだけです。
   </simpara>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
