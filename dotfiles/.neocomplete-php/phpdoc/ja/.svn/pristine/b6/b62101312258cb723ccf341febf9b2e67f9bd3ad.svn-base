<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333207 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->

 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>static キーワード</title>

  <tip>
   <simpara>
    このページでは、<literal>static</literal>
    キーワードを使って静的なメソッドやプロパティを定義する方法を説明します。
    <literal>static</literal> は、
    <link linkend="language.variables.scope.static">静的な変数の定義</link>
    や
    <link linkend="language.oop5.late-static-bindings">静的遅延束縛</link>
    にも使えます。これらの場合の <literal>static</literal> の使い方は、
    それぞれのページを参照ください。
   </simpara>
  </tip>

 <para>
  クラスプロパティもしくはメソッドを static として宣言することで、
  クラスのインスタンス化の必要なしにアクセスすることができます。
  static なプロパティは、インスタンス化されたクラスオブジェクトから
  アクセスすることはできません (static なメソッドにはアクセスできます)。
 </para>

 <para>
  PHP 4 との互換性を維持するため、
  <link linkend="language.oop5.visibility">可視性</link>の宣言が
  ない場合、そのプロパティまたはメソッドは、
  <literal>public</literal>として宣言されていると
  みなされます。
 </para>

 <para>
  static メソッドは、オブジェクトのインスタンスを生成せずに
  コールすることができます。疑似変数 <varname>$this</varname> は、
  static として宣言されたメソッドの内部から利用することはできません。
 </para>

 <para>
  static プロパティは、矢印演算子 -&gt; によりオブジェクトからアクセス
  することはできません。
 </para>

 <para>
  static でないメソッドを静的にコールすると、<constant>E_STRICT</constant> レベルの
  警告が発生します。
  </para>

  <para>
   他の PHP 静的変数と同様、
   静的プロパティの初期化はリテラルあるいは定数でのみ可能です。
   式で初期化することはできません。
   つまり、静的プロパティを (たとえば) 整数値や配列で初期化することはできますが、
   他の変数の値や関数の返り値、オブジェクトなどで初期化することはできません。
 </para>

  <para>
   PHP 5.3.0 以降では、変数を用いてクラスを参照することも可能です。
   変数の値に (<literal>self</literal> や <literal>parent</literal>、
   <literal>static</literal> といった)
   キーワードを指定することはできません。
  </para>

 <example>
  <title>static プロパティの例</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Undefined "Property" my_static

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n"; // PHP 5.3.0 以降で対応

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>static メソッドの例</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod(); // PHP 5.3.0 で対応
?>
]]>
  </programlisting>
 </example>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
