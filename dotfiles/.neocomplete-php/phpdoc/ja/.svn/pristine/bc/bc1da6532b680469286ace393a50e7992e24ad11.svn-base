<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297060 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka,takagi -->
<!-- Author: Wez Furlong <wez@thebrainroom.com>
  Please contact me before making any major amendments to the
  content of this section.  Splitting/Merging are fine if they are
  required for php-doc restructuring purposes - just drop me a line
  if you make a change (so I can update my local copy).
-->
 <sect2 xml:id="internals2.ze1.streams.common-api" xmlns="http://docbook.org/ns/docbook">
   <title>ストリーム共通APIリファレンス</title>

  <refentry xml:id="internals2.ze1.streams.php-stream-stat-path">
  <refnamediv>
   <refname>php_stream_stat_path</refname>
   <refpurpose>ファイルまたはURLのステータスを得る</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_stat_path</methodname>
    <methodparam><type>char *</type><parameter>path</parameter></methodparam>
    <methodparam><type>php_stream_statbuf *</type><parameter>ssb</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_stat_path</function> は、
    <parameter>path</parameter>で指定したファイルまたはURLを調べ、
    ファイルサイズ、アクセス権、作成日時といった情報を返します。
    返り値は成功時に0、エラー時に-1となります。返される情報の詳細に
    ついては、
    <link linkend="internals2.ze1.streams.struct-php-stream-statbuf">php_stream_statbuf</link>.
    を参照ください。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-stat">
  <refnamediv>
   <refname>php_stream_stat</refname>
   <refpurpose>ストリームを保持するストレージに関する情報を得る</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_stat</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
    <methodparam><type>php_stream_statbuf *</type><parameter>ssb</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_stat</function> は、<parameter>stream</parameter>
    にバインドされているストレージに関する情報を調べ、ファイルサイズ、
    アクセス権、作成日時といった情報を返します。
    返り値は成功時に0、エラー時に-1となります。返される情報の詳細に
    ついては、
    <link linkend="internals2.ze1.streams.struct-php-stream-statbuf">php_stream_statbuf</link>.
    を参照ください。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-open-wrapper">
  <refnamediv>
   <refname>php_stream_open_wrapper</refname>
   <refpurpose>ファイルまたはURLをオープンする</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>php_stream *</type><methodname>php_stream_open_wrapper</methodname>
    <methodparam><type>char *</type><parameter>path</parameter></methodparam>
    <methodparam><type>char *</type><parameter>mode</parameter></methodparam>
    <methodparam><type>int</type><parameter>options</parameter></methodparam>
    <methodparam><type>char **</type><parameter>opened</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_open_wrapper</function> は <parameter>path</parameter>
    で指定されたファイルやURLなどのラップされたリソースのストリームを開きます。
    <parameter>mode</parameter> によって、ストリームを読み出し用、書き出し用、
    追記用、あるいはその組み合わせで開くことができます。指定できる種々のモード
    については下記の表をご覧ください。それらの文字列に加え、文字 'b' を
    モード文字列の2文字目、または末尾に含めることができます。
    この文字 'b' は、該当するストリームの実装に対し、バイナリセーフなモードで
    ストリームを開くよう指示します。
   </para>
   <para>
    文字 'b' は、すべての POSIX に準拠したシステム上では、バイナリファイルと
    テキストファイルが同列に扱われるため、無視されます。アクセスするデータ
    において、8 ビットすべてが重要な際には、この 'b' 文字を指定しておくのは、
    'b' フラグが意味を持つシステムでも同じスクリプトを動かせるので、
    よいアイディアといえます。
   </para>
   <para>
    ストリーム API によって作成されたすべてのローカルにあるファイルの
    パーミッションは、オペレーティングシステムのデフォルトに従って
    設定されます - Unix ベースのシステムでは、ファイルを作成したプロセスの
    umask が反映されます。また、Windows では、ファイルを作成したプロセスが
    ファイルを所有します。
    リモートにあるファイルについては、ファイルを開くのに用いた URL ラッパー
    の設定や、リモートのサーバーに与えられた信頼情報に応じて作成されます。
   </para>
   <para>
    <variablelist>
     <varlistentry>
      <term>
       <constant>r</constant>
      </term>
      <listitem>
       <simpara>
        ファイルを読み出し用に開きます。このとき、ストリームの位置は、
        ファイルの先頭に移動されます。
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <constant>r+</constant>
      </term>
      <listitem>
       <simpara>
        ファイルを読み書き用に開きます。このとき、ストリームの位置は、
        ファイルの先頭に移動されます。
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <constant>w</constant>
      </term>
      <listitem>
       <simpara>
        ファイルの内容を長さ 0 に切り詰めるか、新規にファイルを作成し、
        書き出しモードで開きます。このとき、ストリームの位置は、
        ファイルの先頭に移動されます。
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <constant>w+</constant>
       </term>
      <listitem>
       <simpara>
        ファイルを読み書き用に開きます。もし指定されたファイルが存在
        しない場合は、新規に作成し、存在する場合は、長さを切り詰めます。
        このとき、ストリームの位置は、ファイルの先頭に移動されます。
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <constant>a</constant>
      </term>
      <listitem>
       <simpara>
        ファイルを書き出し用に開きます。もしファイルが存在しない場合は、
        新規に作成します。このとき、ストリームの位置は、ファイルの
        末尾に移動されます。
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <constant>a+</constant>
      </term>
      <listitem>
       <simpara>
        ファイルを読み書き用に開きます。もし指定されたファイルが存在
        しない場合は、新規に作成します。このとき、ストリームの位置は、
        ファイルの末尾に移動されます。
       </simpara>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
    <para>
    <parameter>options</parameter> は、ストリームへのパスや URL をどのように
    解釈するかや、セーフモードチェック、ストリームを開くときにエラーが
    発生した場合のアクションに影響します。このオプションに関しては、
    <link linkend="internals2.ze1.streams.options">Stream open options</link>
    を参照ください。
   </para>
   <para>
    もし <parameter>opened</parameter> が NULL でなければ、実際に
    開かれたファイルやリソースの名前がセットされます。これは、
    オプションに include_path に列挙されたパスからファイルを探すよう指示する
    <constant>USE_PATH</constant> が含まれている時に重要になります。
    呼び出し元は、最後にこのパラメータによって返されたファイル名を
    <function>efree</function> の呼び出しによって開放する必要があります。
   </para>
   <note>
    <simpara>
     もし、<constant>STREAM_MUST_SEEK</constant> を <parameter>options</parameter>
     に指定した場合、<parameter>opened</parameter> に返されたファイルへのパス
     は、実際に返されるストリームのものと違う場合があります。しかし、これは
     シーク可能なストリームを作るのに用いられた元のストリームの名前になります。
    </simpara>
   </note>
  </refsect1>
 </refentry>


 <refentry xml:id="internals2.ze1.streams.php-stream-read">
  <refnamediv>
   <refname>php_stream_read</refname>
   <refpurpose>ストリームからバッファに指定バイト数読み込む</refpurpose>
  </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_read</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
      <methodparam><type>char *</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>count</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_read</function> は <parameter>count</parameter>
     バイトで指定されたバイト数まで <parameter>stream</parameter> から
     データを読み取り、バッファ <parameter>buf</parameter> にコピーします。
    </para>
    <para>
     <function>php_stream_read</function> は、正常に読み込むことのできた
     バイト数を返します。読み込みが失敗したのか、ファイルの終端に達したのか
     をこから知ることはできませんので、<function>php_stream_eof</function>
     を、<acronym>EOF</acronym> 条件のテストに使います。
    </para>
    <para>
     ストリームの内部位置は、次回以降続きから読めるよう、
     読み込まれた分だけ進められます。
    </para>
    <para>
     もし、<parameter>count</parameter> バイトよりも少ないデータしか揃って
     いない場合、この関数は、ストリームのブロックモードの設定に応じて、
     すべてのデータが揃うまでブロックします(待ちます)。デフォルトでは、
     ストリームはブロックモードで開かれます。
     もし通常のファイルから読み込む場合は、ブロックモードはあまり意味を
     持ちません。ストリームが、<acronym>EOF</acronym> に達した場合は、
     <function>php_stream_read</function> は、<parameter>count</parameter>
     よりも少ない値を返し、次回以降は、0 を返します。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-stream-write">
   <refnamediv>
    <refname>php_stream_write</refname>
    <refpurpose>バッファからストリームに指定バイト数書き込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_write</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
      <methodparam><type>const char *</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>count</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_write</function> は、<parameter>count</parameter>
     バイトのデータを <parameter>buf</parameter> から
     <parameter>stream</parameter> に書き出します。
    </para>
    <para>
     <function>php_stream_write</function> は正常に書き込むことのできた
     バイト数を返します。もし、何らかのエラーがあった場合は、
     書き込むことのできたバイト数は <parameter>count</parameter> よりも
     小さくなります。
    </para>
    <para>
     ストリームの内部位置は、次回以降続きから書き込めるよう、
     読み込まれた分だけ進められます。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-stream-eof">
   <refnamediv>
    <refname>php_stream_eof</refname>
    <refpurpose>ストリームがファイル終端に達したかどうか調べる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_eof</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_eof</function> は、<parameter>stream</parameter> が、
     ファイルの終端に達したかどうかを調べます。
    </para>
    <para>
     <function>php_stream_eof</function> が 1 を返すということは、
     <acronym>EOF</acronym> に達したことを意味します。0 ならば、
     まだ <acronym>EOF</acronym> でなく、-1 はエラーを意味します。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-stream-getc">
   <refnamediv>
    <refname>php_stream_getc</refname>
    <refpurpose>ストリームから1バイト読み込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_getc</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_getc</function> は <parameter>stream</parameter>
     から 1 文字読み込み、unsigned char を int としてキャストした形で
     返します。 ファイルの終端に達したか、エラーが発生した場合は、
     <acronym>EOF</acronym> を返します。
    </para>
    <para>
     <function>php_stream_getc</function> のブロックに関する挙動は、
     <function>php_stream_read</function> のものと一緒です。
    </para>
    <para>
     正常に実行できた場合、ストリームの内部位置は 1 だけ進められます。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-stream-gets">
   <refnamediv>
    <refname>php_stream_gets</refname>
    <refpurpose>ストリームからバッファに1行分のデータを読み込む</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>char *</type><methodname>php_stream_gets</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
      <methodparam><type>char *</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>maxlen</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_gets</function> は、最大で <parameter>count</parameter>-1
     バイトまでのデータを <parameter>stream</parameter> から読み込み、
     バッファ <parameter>buf</parameter> にコピーします。読み込みは、
     <acronym>EOF</acronym> あるいは行末記号に到達した時点でストップします。
     もし、行末まで読み込まれた場合、行末記号は、<parameter>buf</parameter>
     の一部として含まれます。NUL 終端文字が、バッファの末尾に付加されます。
    </para>
    <para>
     <function>php_stream_read</function> は正常に終了すると、<parameter>buf</parameter>
     を、その他の場合は NULL を返します。
    </para>
    <para>
     ストリームの内部位置は、次回以降続きから読めるよう、
     読み込まれた分だけ進められます。
    </para>
    <para>
     この関数のブロックに関する挙動は、<function>php_stream_read</function>
     のものと一緒です。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-stream-close">
   <refnamediv>
    <refname>php_stream_close</refname>
    <refpurpose>ストリームを閉じる</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_close</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_close</function> は、<parameter>stream</parameter> を
     安全にクローズし、それに関連付けられたリソースを同時に開放します。
     一旦 <parameter>stream</parameter> を閉じると、その値は不定になります。
     再び利用してはいけません。
    </para>
    <para>
     <function>php_stream_close</function> は正常にストリームを閉じられた
     場合、0 を、エラーが発生した場合には、<acronym>EOF</acronym>
     を返します。関数の実行の成否にかかわらず、<parameter>stream</parameter>
     は不定になりますので、この関数の実行後に利用してはいけません。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-stream-flush">
   <refnamediv>
    <refname>php_stream_flush</refname>
    <refpurpose>ストリームバッファをストレージにフラッシュする</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_flush</methodname>
      <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_flush</function> は、<parameter>stream</parameter>
     の書き込みバッファに保持されたデータを下層にあるストレージに
     コミットします。
    </para>
    <para>
     <function>php_stream_flush</function> は、バッファをフラッシュできた場合に
     あるいは、バッファをフラッシュする必要がなかった場合に、0 を返します。
     エラーが発生した場合は、<acronym>EOF</acronym> を返します。
    </para>
   </refsect1>
  </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-seek">
  <refnamediv>
   <refname>php_stream_seek</refname>
   <refpurpose>ストリーム内で移動する</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_seek</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
    <methodparam><type>off_t</type><parameter>offset</parameter></methodparam>
    <methodparam><type>int</type><parameter>whence</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_seek</function> は <parameter>stream</parameter>
    の内部位置を移動します。
    新しい位置は、<parameter>offset</parameter> の値を、
    <parameter>whence</parameter> で示された位置に加算することで決定されます。
    <parameter>whence</parameter> が <constant>SEEK_SET</constant> にセット
    されていた場合は、ストリームの開始位置を、<constant>SEEK_CUR</constant>
    の場合は、ストリームの現在位置を、<constant>SEEK_END</constant> の場合は、
    ストリームの終端位置を、それぞれ計算の基準とします。
   </para>
   <para>
    <function>php_stream_seek</function> は成功時に 0 を、失敗時に -1 を
    返します。
   </para>
   <note>
    <para>
     すべての種類のストリームがシーク動作をサポートしているわけでは
     ありませんが、ストリーム API は、<parameter>whence</parameter>
     <constant>SEEK_CUR</constant> に設定されていて、かつ
     <parameter>offset</parameter> が正の値の場合、
     <function>php_stream_read</function> で <parameter>offset</parameter>
     バイト分だけ読み込んで、読み込まれた内容を破棄することで、シークを
     エミュレートしようとします。
    </para>
    <para>
     エミュレーションは、下層にあるストリームの実装が、シークをサポート
     していないときのみに行われます。つまり、仮に開かれているストリームが
     ファイルベースのストリームで、それがシークできないパイプを
     ラップしていたとしても、ストリーム API はエミュレーションを行いません。
     ファイルベースのストリームはシーク動作を実装しているからです。
     このとき、シークは失敗し、エラーが呼び出し元に返されます。
    </para>
   </note>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-tell">
  <refnamediv>
   <refname>php_stream_tell</refname>
   <refpurpose>ストリーム内の位置を調べる</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>off_t</type><methodname>php_stream_tell</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_tell</function> は、<parameter>stream</parameter> の
    内部位置をストリームの開始位置からの相対値で返します。
    エラーが発生した場合は -1 が返されます。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-copy-to-stream">
  <refnamediv>
   <refname>php_stream_copy_to_stream</refname>
   <refpurpose>
    あるストリームから別のストリームへデータをコピーする
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>size_t</type><methodname>php_stream_copy_to_stream</methodname>
    <methodparam><type>php_stream *</type><parameter>src</parameter></methodparam>
    <methodparam><type>php_stream *</type><parameter>dest</parameter></methodparam>
    <methodparam><type>size_t</type><parameter>maxlen</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_copy_to_stream</function> は、最大 <parameter>maxlen</parameter>
    バイトのデータを <parameter>src</parameter> から読み込み、
    <parameter>dest</parameter> に書き出したのち、正常にコピーできた
    バイト数を返します。
   </para>
   <para>
    <parameter>src</parameter> ストリームにある残りの(内部位置移行にある)
    データすべてをコピーしたい場合は、
    定数 <constant>PHP_STREAM_COPY_ALL</constant> を、
    <parameter>maxlen</parameter> に指定してください。
   </para>
   <note>
    <simpara>
     この関数は、データを、メモリマップができればそれを使い、
     最大限効率的な方法でコピーを行おうとします。
    </simpara>
   </note>
   </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-copy-to-mem">
  <refnamediv>
   <refname>php_stream_copy_to_mem</refname>
   <refpurpose>
    ストリームから確保されたバッファにデータをコピーする
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>size_t</type><methodname>php_stream_copy_to_mem</methodname>
    <methodparam><type>php_stream *</type><parameter>src</parameter></methodparam>
    <methodparam><type>char **</type><parameter>buf</parameter></methodparam>
    <methodparam><type>size_t</type><parameter>maxlen</parameter></methodparam>
    <methodparam><type>int</type><parameter>persistent</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_copy_to_mem</function> は <parameter>maxlen</parameter>+1
    バイトのバッファを <function>pemalloc</function>
    (パラメータ <parameter>persistent</parameter> はそのまま渡されます)
    を使ってバッファを確保したのち、最大 <parameter>maxlen</parameter> バイトを
    <parameter>src</parameter> から読み込んで、その内容を確保されたバッファに
    格納します。
   </para>
   <para>
    確保されたバッファを <parameter>buf</parameter> で示されたポインタに
    返したのち、正常に読み込めたバイト数を返します。
    呼び出し下は、返されたバッファを、同じ <parameter>persistent</parameter>
    パラメータとともに <function>pefree</function> で開放する必要があります。
   </para>
   <para>
    <parameter>src</parameter> ストリームにある残りの(内部位置移行にある)
    データすべてをコピーしたい場合は、
    定数 <constant>PHP_STREAM_COPY_ALL</constant> を、
    <parameter>maxlen</parameter> に指定してください。
   </para>
   <note>
    <simpara>
     この関数は、データを、メモリマップができればそれを使い、
     最大限効率的な方法でコピーを行おうとします。
    </simpara>
   </note>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-make-seekable">
   <refnamediv>
   <refname>php_stream_make_seekable</refname>
   <refpurpose>ストリームをシーク可能なストリームへ変換する</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_make_seekable</methodname>
    <methodparam><type>php_stream *</type><parameter>origstream</parameter></methodparam>
    <methodparam><type>php_stream **</type><parameter>newstream</parameter></methodparam>
    <methodparam><type>int</type><parameter>flags</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_make_seekable</function> は、まず <parameter>origstream</parameter> が
    シーク可能かどうか調べます。もしシークできない場合は、新たに一時的ストリーム
    を作り、元のストリームのデータをすべてそこにコピーします。
    成功の場合は、<parameter>newstream</parameter> には、元のストリームが
    シーク可能だったとしても、常に利用可能なストリームが返されます。
   </para>
   <para>
    <parameter>flags</parameter> で、どのような形のシーク可能なストリームが
    返されるかを指定することができます。デフォルトのシーク可能なストリームを
    利用したい場合は、<constant>PHP_STREAM_NO_PREFERENCE</constant> を
    (通常では動的に増大するメモリ上のバッファを利用するが、
    もしストリーム内のデータが巨大な場合は、テンポラリファイルに裏打ちされた
    ストリームに切り替える)、または通常のテンポラリファイルに裏打ちされた
    ストリームを利用したい場合は、<constant>PHP_STREAM_PREFER_STDIO</constant>
    を指定してください。
   </para>
   <para>
    <table>
     <title><function>php_stream_make_seekable</function> の返り値</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Value</entry>
        <entry>Meaning</entry>
        </row>
      </thead>
      <tbody>

       <row>
        <entry>PHP_STREAM_UNCHANGED</entry>
        <entry>元のストリームがシーク可能だった。<parameter>newstream</parameter> には <parameter>origstream</parameter> がセットされます。
        </entry>
       </row>

       <row>
        <entry>PHP_STREAM_RELEASED</entry>
        <entry>元のストリームはシーク可能ではないので、開放された。
         <parameter>newstream</parameter> には、新たに作成されたシーク可能なストリームがセットされます。
         以後、<parameter>origstream</parameter> にアクセスしてはいけません。
        </entry>
       </row>

       <row>
        <entry>PHP_STREAM_FAILED</entry>
        <entry>ストリームの変換中にエラーが発生した。
         <parameter>newstream</parameter> には NULL がセットされます。
         このとき <parameter>origstream</parameter> はまだ有効なストリームです。
        </entry>
       </row>

       <row>
        <entry>PHP_STREAM_CRITICAL</entry>
        <entry>ストリームの変換中にエラーが発生し、元のストリームは <parameter>origstream</parameter>
         不定な状態になっている。<parameter>newstream</parameter> には
         NULL がセットされます。このときは、<parameter>origstream</parameter>
         を閉じることを強く推奨します。
        </entry>
       </row>

      </tbody>
     </tgroup>
    </table>
   </para>
   <note>
    <simpara>
     新しいストリームに対してシークを行い書き込みを行うような場合、
     そのストリームは、必ずしも元のストリームと同じリソースに
     関連付けられていると保証されているわけではないので、
     この関数を呼び出す意味はあまりありません。
    </simpara>
   </note>
   <note>
    <simpara>
     もし、前方へのシークのみが必要なときは、この関数を利用してストリームを
     シーク可能にする必要はありません。ストリーム API は、
     whence パラメータが <constant>SEEK_CUR</constant> の時、前方シークを
     エミュレートするからです。
    </simpara>
   </note>
   <note>
    <simpara>
     もし、<parameter>origstream</parameter> がネットワークベースのストリーム
     の場合は、この関数は、すべてのデータが読み込まれるまでブロックします。
    </simpara>
   </note>
    <note>
    <simpara>
     絶対に、PHP スクリプト内で使用されているファイルポインタを参照する
     ストリームを、<parameter>origstream</parameter> に指定しないでください。
     この関数は、そのストリームを閉じる場合があるので、スクリプト内で次に
     そのファイルポインタに対してアクセスが行われた場合に、クラッシュが
     起こる可能性があります。
    </simpara>
   </note>
   <note>
    <simpara>
     ほとんどの場合において、この関数は、<parameter>origstream</parameter>
     が新たに開かれたストリームで、しかもストリーム層においてデータが
     バッファリングされていない時にのみ成功します。これにより、
     また、この関数は正しく使うには多少複雑なので、できれば、
     この関数を直接呼び出すのではなく、
     <function>php_stream_open_wrapper</function> を使い、
     <constant>PHP_STREAM_MUST_SEEK</constant> をオプションとして渡す方法
     を検討してみてください。
    </simpara>
   </note>
    </refsect1>
 </refentry>


 <refentry xml:id="internals2.ze1.streams.php-stream-cast">
   <refnamediv>
   <refname>php_stream_cast</refname>
   <refpurpose>
    ストリームをFILE*またはソケットのような他の形式に変換する
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_cast</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
    <methodparam><type>int</type><parameter>castas</parameter></methodparam>
    <methodparam><type>void **</type><parameter>ret</parameter></methodparam>
    <methodparam><type>int</type><parameter>flags</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_cast</function> は <parameter>stream</parameter> で
    指定されたストリームを <parameter>castas</parameter> で指示されたリソースに
    変換しようと試みます。
    もし、<parameter>ret</parameter> が NULL であった場合は、実際に
    変換は行われず、単にストリームに対してそのような変換が可能であるかどうか
    だけを調べます。(しかし、この場合何らかのストリームの状態が変化することが
    あります。)
    もし、<parameter>flags</parameter> に <constant>REPORT_ERRORS</constant> が
    セットされていた場合は、変換中にエラーがあると、エラーメッセージが
    表示されます。
   </para>
   <note>
    <para>
     この関数は、成功時に <constant>SUCCESS</constant> を、失敗時に <constant>FAILURE</constant> を返します。
     返り値の判定の際は単純に値の真偽を見るのではなく、
     定数 <constant>SUCCESS</constant> や <constant>FAILURE</constant> と
     明示的に比較しなければならないことに注意してください。
     これらの定数値は単純なブール値ではないからです。
    </para>
   </note>
   <para>
    <table>
     <title><parameter>castas</parameter> に指定できるリソースの種類</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>値</entry>
        <entry>意味</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PHP_STREAM_AS_STDIO</entry>
        <entry>ストリームを表す ANSI FILE* ファイルポインタを要求する</entry>
       </row>
       <row>
        <entry>PHP_STREAM_AS_FD</entry>
        <entry>ストリームを表す POSIX ファイルデスクリプタを要求する</entry>
       </row>
       <row>
        <entry>PHP_STREAM_AS_SOCKETD</entry>
        <entry>ストリームを表すソケットのデスクリプタを要求する</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    上に示したような基本的なリソースの種類を指定するのに加え、
    変換動作を、リソースの種類を表す値と次に示した値とを OR 演算子で
    組み合わせることでしていすることができます:
    <table>
     <title>Resource types for <parameter>castas</parameter></title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>値</entry>
        <entry>意味</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PHP_STREAM_CAST_TRY_HARD</entry>
        <entry>別のリソースをあえて利用するなど、できるだけ変換が成功するような試行を行う</entry>
       </row>
       <row>
        <entry>PHP_STREAM_CAST_RELEASE</entry>
        <entry>ストリームAPI に、この関数を呼び出した
        ストリームAPI 以外のコード (おそらくはサードパーティのライブラリ)
        の内部で、ストリームがラップしているリソースやハンドルを閉じることを
        通知します。これにより、<parameter>stream</parameter> が、
        ストリームの背後にあるハンドルそのものを閉じずに
        <parameter>ret</parameter> に返したところで閉じられます。
        このとき、この関数が成功したら、
        <parameter>stream</parameter> はその時点で閉じられたと判断されるべきで、
        以降そのストリームを使ってはいけません。
        </entry>
       </row>
      </tbody>
      </tgroup>
     </table>
    </para>
    <note>
     <simpara>
      もし使っているシステム(glibc 2 または以降を使っているシステム)が
      <function>fopencookie</function> をサポートしている場合、
      ストリーム API は常にどのストリームからも ANSI FILE * ポインタを
      合成できます。この特長はあらゆる PHP ストリームをサードパーティの
      ライブラリに渡せるので非常に便利ですが、一方で、移植可能性は高く
      ありません。この場合は、あなたの作成した拡張モジュールを配布する際に、
      移植可能性についての表示を行っておいたほうがよいでしょう。
      もし fopencookie による合成が望ましくない場合は、問題とするストリームが
      ネイティブに FILE* をサポートしているかどうか <function>php_stream_is</function> で調べましょう。
     </simpara>
    </note>
    <note>
     <simpara>
      ソケットベースのストリームを FILE* に変換する際、ストリーム API は
      <function>fdopen</function> を使ってそれを生成します。
      そうすることは、ストリーム API のコールと ANSI 標準入出力 API のコールを
      交互に行った際に、ストリーム層においてバッファされたデータが失われる
      危険性を生じることに注意してください。
     </simpara>
    </note>
    <para>
     <function>php_stream_is</function> と <function>php_stream_can_cast</function> も参照ください。
    </para>
   </refsect1>
  </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-can-cast">
  <refnamediv>
   <refname>php_stream_can_cast</refname>
   <refpurpose>
    ストリームがFILE*またはソケットのような他の形式に変換できるかどうかを
    調べる
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_can_cast</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
    <methodparam><type>int</type><parameter>castas</parameter></methodparam>
   </methodsynopsis>
   <para>
    この関数の挙動は、<function>php_stream_cast</function> の <parameter>ret</parameter>
    引数を NULL にし、<parameter>flags</parameter> を 0 にした時の呼び出しと等価です。
    要求された形にストリームが変換できるときは、<constant>SUCCESS</constant>
    を、変換ができないときは、<constant>FAILURE</constant> を返します。
   </para>
   <note>
    <simpara>
     この関数は実際に変換を行うわけではありませんが、何らかのストリームの状態が
     変化する可能性があります。
    </simpara>
    </note>
   <note>
    <simpara>
     この関数の返り値は、<function>php_stream_cast</function> で説明されたように、
     明示的に定数と比較される必要があります。
    </simpara>
   </note>
   <para>
    <function>php_stream_cast</function> と <function>php_stream_is</function> も参照ください。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-is-persistent">
  <refnamediv>
   <refname>php_stream_is_persistent</refname>
   <refpurpose>
    ストリームが持続的なストリームであるかどうかを調べる
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_is_persistent</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_is_persistent</function> は、ストリームが恒久的であると、1 を、そうでない場合は 0 を返します。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-is">
  <refnamediv>
   <refname>php_stream_is</refname>
   <refpurpose>ストリームが特定の型であるかどうかを調べる</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_stream_is</methodname>
    <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
    <methodparam><type>int</type><parameter>istype</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>php_stream_is</function> は <parameter>stream</parameter> が
    <parameter>istype</parameter> で指定された型である時に 1 を、そうでない場合に
    0 を返します。
    <table>
     <title><parameter>istype</parameter>に指定できる値</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>値</entry>
        <entry>意味</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PHP_STREAM_IS_STDIO</entry>
        <entry>ストリームは標準入出力の実装を用いて実装されている</entry>
       </row>
       <row>
        <entry>PHP_STREAM_IS_SOCKET</entry>
        <entry>ストリームはソケットを用いて実装されている</entry>
       </row>
       <row>
        <entry>PHP_STREAM_IS_USERSPACE</entry>
        <entry>ストリームはユーザー空間にあるオブジェクトを用いて実装されている</entry>
       </row>
       <row>
        <entry>PHP_STREAM_IS_MEMORY</entry>
        <entry>ストリームは動的にサイズを増やすメモリーストリームの実装を用いて実装されている</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   </para>
   <note>
    <simpara>
     PHP_STREAM_IS_XXX "定数は" 実際には、ストリーム操作を定義する構造体への
     ポインタです。もしあなたの拡張モジュールや、別の拡張モジュール内で、
     新たなストリームの実装が定義されている場合、同時にこの関数による比較に
     使えるような PHP_STREAM_IS_XXX 定数をそのヘッダーファイル内で
     定義しておくべきです。
    </simpara>
   </note>
   <note>
    <simpara>
     この関数は、単純な(かつ高速な) ポインターの比較だけを行うよう
     実装されており、ストリームの状態を変更することはありません。
    </simpara>
   </note>
   <para>
    <function>php_stream_cast</function> や <function>php_stream_can_cast</function> も参照ください。
   </para>
   </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-passthru">
  <refnamediv>
   <refname>php_stream_passthru</refname>
   <refpurpose>ストリームから残りのデータを全て出力する</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
     <type>size_t</type><methodname>php_stream_passthru</methodname>
     <methodparam><type>php_stream *</type><parameter>stream</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>php_stream_passthru</function> は、<parameter>stream</parameter>
     に残されたすべてのデータを、現在有効な出力バッファに対して出力し、
     何バイト出力されたかを返します。
     もし出力バッファリングが無効になっている場合は、データは
     直接出力先に書き込まれます。この出力先は、PHP がウェブサーバーの上で
     動いている際にはブラウザになり、CLI ベースの PHP の場合は標準出力
     となります。
     この関数はパフォーマンス向上のため、可能であればメモリマッピング
     を利用します。
    </para>
   </refsect1>
  </refentry>

  <refentry xml:id="internals2.ze1.streams.php-register-url-stream-wrapper">
  <refnamediv>
   <refname>php_register_url_stream_wrapper</refname>
   <refpurpose>ストリームAPI用のラッパーを登録する</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_register_url_stream_wrapper</methodname>
    <methodparam><type>char *</type><parameter>protocol</parameter></methodparam>
    <methodparam><type>php_stream_wrapper *</type><parameter>wrapper</parameter></methodparam>
    <methodparam><type>TSRMLS_DC</type><parameter></parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_register_url_stream_wrapper</function> は <parameter>wrapper</parameter> を <parameter>protocol</parameter> で指定されたハンドラとして
    登録します。
   </para>
   <note>
    <simpara>
     もしこの関数をロード可能なモジュールから呼び出す場合、
     必ず <function>php_unregister_url_stream_wrapper</function> を
     そのモジュールのシャットダウンルーチンから呼び出してください。
     そうしないと、PHP はクラッシュしてしまいます。
    </simpara>
   </note>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-unregister-url-stream-wrapper">
  <refnamediv>
   <refname>php_unregister_url_stream_wrapper</refname>
   <refpurpose>ストリームAPI用のラッパーの登録を解除する</refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>int</type><methodname>php_unregister_url_stream_wrapper</methodname>
    <methodparam><type>char *</type><parameter>protocol</parameter></methodparam>
    <methodparam><type>TSRMLS_DC</type><parameter></parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_unregister_url_stream_wrapper</function> は
    <parameter>protocol</parameter> に関連付けられたラッパーの登録を解除します。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-open-wrapper-ex">
  <refnamediv>
   <refname>php_stream_open_wrapper_ex</refname>
   <refpurpose>
    コンテキストを指定して、ファイルまたはURLにストリームをオープンする
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>php_stream *</type><methodname>php_stream_open_wrapper_ex</methodname>
    <methodparam><type>char *</type><parameter>path</parameter></methodparam>
    <methodparam><type>char *</type><parameter>mode</parameter></methodparam>
    <methodparam><type>int</type><parameter>options</parameter></methodparam>
    <methodparam><type>char **</type><parameter>opened</parameter></methodparam>
    <methodparam><type>php_stream_context *</type><parameter>context</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_open_wrapper_ex</function> は
    <function>php_stream_open_wrapper</function> と非常に似ていますが、
    php_stream_context オブジェクトを <parameter>context</parameter> で
    指定することができる点で異なります。
    ストリームコンテキストに関する詳細は
    <link linkend="stream.contexts">ストリームコンテキスト</link>
    を参照ください。
   </para>
  </refsect1>
 </refentry>

 <refentry xml:id="internals2.ze1.streams.php-stream-open-wrapper-as-file">
  <refnamediv>
   <refname>php_stream_open_wrapper_as_file</refname>
   <refpurpose>
    ファイルまたはURLをオープンし、FILE*に変換する
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>説明</title>
   <methodsynopsis role="c">
    <type>FILE *</type><methodname>php_stream_open_wrapper_as_file</methodname>
    <methodparam><type>char *</type><parameter>path</parameter></methodparam>
    <methodparam><type>char *</type><parameter>mode</parameter></methodparam>
    <methodparam><type>int</type><parameter>options</parameter></methodparam>
    <methodparam><type>char **</type><parameter>opened</parameter></methodparam>
   </methodsynopsis>
   <para>
    <function>php_stream_open_wrapper_as_file</function> は
    <function>php_stream_open_wrapper</function> と非常に似ていますが、
    ストリームを ANSI 標準入出力の FILE* ポインタに変換してストリームの代わりに
    それを返す点が異なります。
    この関数は、サードパーティのライブラリに FILE* を直接渡すための
    近道として用意されています。
   </para>
  </refsect1>
 </refentry>
  <refentry xml:id="internals2.ze1.streams.php-stream-filter-register-factory">
   <refnamediv>
    <refname>php_stream_filter_register_factory</refname>
    <refpurpose>フィルタファクトリをストリーム API に登録する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <methodsynopsis role="c">
     <type>int</type><methodname>php_stream_filter_register_factory</methodname>
     <methodparam><type>const char *</type><parameter>filterpattern</parameter></methodparam>
     <methodparam><type>php_stream_filter_factory *</type><parameter>factory</parameter></methodparam>
    </methodsynopsis>
    <para>
     この関数を使用して、
     <parameter>filterpattern</parameter> という名前のフィルタファクトリを登録します。
     <parameter>filterpattern</parameter> には、通常の文字列
     (たとえば <literal>myfilter</literal>) あるいはグローバルパターン
     (たとえば <literal>myfilterclass.*</literal>) を使用できます。
     これを用いると、ひとつのフィルタで、起動されたフィルタの名前に応じて
     (たとえば <literal>myfilterclass.foo</literal>、<literal>myfilterclass.bar</literal>
     など...) 異なる処理をさせることができます。
    </para>
    <note>
     <simpara>
      読み込み可能なモジュールとして登録したフィルタは、MSHUTDOWN 時に
      php_stream_filter_unregister_factory() をコールしなければなりません。
     </simpara>
    </note>
   </refsect1>
  </refentry>
  <refentry xml:id="internals2.ze1.streams.php-stream-filter-unregister-factory">
   <refnamediv>
    <refname>php_stream_filter_unregister_factory</refname>
    <refpurpose>Stream API へのフィルタファクトリの登録を解除する</refpurpose>
   </refnamediv>
   <refsect1>
    <title>説明</title>
    <methodsynopsis role="c">
     <type>int</type><methodname>php_stream_filter_unregister_factory</methodname>
     <methodparam><type>const char *</type><parameter>filterpattern</parameter></methodparam>
    </methodsynopsis>
    <para>
     <parameter>filterpattern</parameter> で指定したフィルタファクトリの登録を解除します。
     このフィルタは、もう使用できなくなります。
    </para>
    <note>
     <simpara>
      読み込み可能なモジュールとして登録したフィルタは、MSHUTDOWN 時に
      php_stream_filter_unregister_factory() をコールしなければなりません。
     </simpara>
    </note>
   </refsect1>
  </refentry>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

