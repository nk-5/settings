<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317502 Maintainer: takagi Status: ready -->

 <sect2 xml:id="internals2.ze1.zendapi.layout" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"> 
  <title>ソース配置</title>
  <note>
   <para>
    この章の残りの部分に進む前に、お好みの Web サーバーの (変更されていない)
    ソースを取得しておきましょう。ここでは、Apache
    (<link xlink:href="&url.apache;"/> で取得できます) を使用します。また、もちろん PHP のソース
    (<link xlink:href="&url.php;"/> にあります - 言うまでもないですよね?) も必要です。
   </para>
   <para>
    PHP の動作環境を自分でコンパイルして作成できるようにしておいて
    ください! この方法についてはここでは触れませんが、この章の内容を
    学習しようとするのなら、最低限知っておくべき基本的な内容です。
   </para>
  </note> 
  <para>
   コードの内容について説明する前に、PHP のファイルを探索する助けになるよう
   ソースツリーの内容に慣れておくべきです。これは、拡張モジュールを
   開発したりデバッグしたりする際の必須技能です。
  </para> 
<!--  <para>
   After extracting the PHP archive, you'll see a directory layout similar to that in <xref linkend="fig.dir-layout"/>.
  </para> 
  <figure xml:id="fig.dir-layout"> 
   <title>Main directory layout of the PHP source tree.</title>
   <graphic fileref="en/internals2/ze1/zendapi/figures/Extending_Zend_1a_Directory_Layout.png"/> 
  </figure> -->
  <para>
   以下の表では、主なディレクトリの内容について説明しています。
  </para>
  <informaltable> 
   <tgroup cols="2">
    <colspec colnum="1" colname="col1" colwidth="1.00*"/>
    <colspec colnum="2" colname="col2" colwidth="3.74*"/> 
    <tbody> 
     <row> 
      <entry colname="col1">ディレクトリ</entry> 
      <entry colname="col2">内容</entry> 
     </row> 
     <row> 
      <entry colname="col1"><filename>php-src</filename></entry> 
      <entry colname="col2">
       PHP 本体のソースファイルおよびヘッダファイル。
       PHP の API 定義やマクロなどはここにあります (重要)。
       それ以外のものは、このディレクトリの下位階層にあります。
      </entry> 
     </row> 
     <row> 
      <entry colname="col1"><filename>php-src/ext</filename></entry> 
      <entry colname="col2">
       動的モジュール、組み込みモジュールのソース置き場。
       デフォルトでは、PHP 本体のソースツリーに統合された「公式」
       モジュールが配置されています。PHP 4.0 以降、これらの標準
       拡張モジュールを (そのモジュールがサポートしていれば)
       動的モジュールとしてコンパイルすることが可能となりました。
      </entry> 
     </row> 
     <row>
      <entry colname="col1"><filename>php-src/main</filename></entry>
      <entry colname="col2">
       このディレクトリには PHP 本体のマクロや定義があります (重要)。
      </entry>
     </row>
     <row> 
      <entry colname="col1"><filename>php-src/pear</filename></entry> 
      <entry colname="col2">
       PHP Extension and Application Repository (PEAR) のディレクトリです。
       ここには PEAR のコアファイルが含まれます。
      </entry> 
     </row> 
     <row> 
      <entry colname="col1"><filename>php-src/sapi</filename></entry> 
      <entry colname="col2">
       さまざまなサーバー用の抽象化レイヤのコードを含みます。
      </entry> 
     </row> 
     <row> 
      <entry colname="col1"><filename>TSRM</filename></entry>
      <entry colname="col2">
       Zend および PHP の "Thread Safe Resource Manager" (TSRM)
       の場所です。
      </entry> 
     </row> 
     <row> 
      <entry colname="col1"><filename>ZendEngine2</filename></entry>
      <entry colname="col2">
       Zend エンジンのファイルがあります。この中で、Zend の API
       定義やマクロなどのすべてが見つけられるでしょう (重要)。
      </entry> 
     </row> 
    </tbody> 
   </tgroup> 
  </informaltable> 
  <para>
   PHP パッケージに含まれるすべてのファイルについて取り上げることは
   この章の範囲を超えています。しかし、以下のファイルについては
   詳しく見ておくべきでしょう。
   <itemizedlist> 
    <listitem> 
     <para>
      PHP の main ディレクトリにある <filename>php-src/main/php.h</filename>。
      このファイルには PHP のマクロおよび API 定義の大半が含まれています。
     </para> 
    </listitem> 
    <listitem> 
     <para>
      Zend ディレクトリにある <filename>php-src/Zend/zend.h</filename>。
      このファイルには Zend のマクロおよび定義の大半が含まれています。
     </para> 
    </listitem> 
    <listitem> 
     <para>
      これもまた Zend ディレクトリにある <filename>php-src/Zend/zend_API.h</filename>。
      ここでは Zend の API を定義しています。
     </para> 
    </listitem> 
   </itemizedlist>
   これらのファイルからインクルードされているいくつかのファイルについても
   見ておきましょう。例えば、Zend エンジンの実行や PHP の初期化ファイルの
   サポートに関連するファイルが含まれます。これらのファイルを読んだ後で、
   パッケージ全体を見回し、ファイルやモジュールの相互依存性 -
   各ファイル・モジュールがお互いにどのようにかかわりあっているのか、
   どのようにお互いを使用しているのか - を調べましょう。これにより、
   PHP のコーディングスタイルにも慣れることができます。PHP を
   拡張しようと思うなら、早いうちにこのスタイルに適応すべきです。
  </para>
  
  <sect3 xml:id="internals2.ze1.zendapi.layout.conventions"> 
   <title>拡張規約</title> 
   <para>
    Zend は、ある規約に基づいて構築されています。
    この標準規約を破ることを避けるため、
    以下の節で説明する規則を守らなければなりません。
   </para> 
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.layout.macros"> 
   <title>マクロ</title> 
   <para>
    重要なタスクのほぼ全てについて、Zend では便利なマクロを定義しています。
    以下の表および図で、基本的な関数・構造体およびマクロについて
    説明しています。マクロ定義のほとんどは
    <filename>zend.h</filename> あるいは <filename>zend_API.h</filename>
    にあります。この章を勉強したあとで、
    これらのファイルをじっくり読んでみることをお勧めします
    (もちろん今この場で読んでもよいのですが、
    まだこの段階ではすべてを理解することはできないでしょう)。
   </para>
  </sect3>
  
  <sect3 xml:id="internals2.ze1.zendapi.layout.memory-management"> 
   <title>メモリ管理</title> 
   <para>
    特にサーバーソフトウェアにとって、リソース管理は重大な問題です。
    メモリは最も貴重なリソースのひとつなので、
    メモリ管理には最大限の注意を払わねばなりません。
    メモリ管理の一部は Zend によって抽象化されており、
    この抽象化を使用すべきなのは明白です。この抽象化を使用することにより、
    Zend はすべてのメモリ割り当てを完全に制御できるようになります。
    そのブロックが使用中なのかどうかを Zend が判断し、
    未使用のブロックや参照されていないブロックを自動的に開放することで
    メモリリークを防ぐことができます。
    このために使用する関数を、以下の表にまとめます。
    <informaltable> 
     <tgroup cols="2">
      <colspec colnum="1" colname="col1" colwidth="1.00*"/>
      <colspec colnum="2" colname="col2" colwidth="1.62*"/> 
      <tbody> 
       <row> 
        <entry colname="col1">関数</entry> 
        <entry colname="col2">説明</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>emalloc</function></entry> 
        <entry colname="col2"><function>malloc</function> の代わりに使用します。</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>efree</function></entry> 
        <entry colname="col2"><function>free</function> の代わりに使用します。</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>estrdup</function></entry> 
        <entry colname="col2"><function>strdup</function> の代わりに使用します。</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>estrndup</function></entry>
        <entry colname="col2"><function>strndup</function> の代わりに使用します。
         <function>estrdup</function> より高速で、バイナリセーフです。
         複製する文字列の長さが事前にわかっている場合には、
         この関数を使用することを推奨します。</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>ecalloc</function></entry> 
        <entry colname="col2"><function>calloc</function> の代わりに使用します。</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>erealloc</function></entry>
        <entry colname="col2"><function>realloc</function> の代わりに使用します。</entry> 
       </row> 
      </tbody> 
     </tgroup> 
    </informaltable> 
    <function>emalloc</function> および
    <function>estrdup</function>、<function>estrndup</function>、
    <function>ecalloc</function>、<function>erealloc</function>
    は、内部メモリを確保します。<function>efree</function>
    は、これらの関数で確保したブロックを開放します。
    <function>e*</function> 関数が管理するメモリは、
    現在のプロセス内でローカルであるものとして扱われます。
    このプロセスによって実行されているスクリプトが終了すると、
    すぐにメモリが破棄されます。
    <warning> 
     <para>
      スクリプトの終了後も残り続けるメモリを確保するために、
      <function>malloc</function> および <function>free</function>
      を使用することも可能です。しかし、これらの関数を使用するのは
      Zend API がどうしてもそれを要求している場合に限定し、
      最大限の注意を払うようにしてください。それ以外の場合に使用すると、
      メモリリークが発生する恐れがあります。
     </para> 
    </warning>
    Zend は、マルチスレッド Web サーバーをサポートするための
    スレッドセーフなりソース管理機能も提供しています。
    この機能を使用する場合は、複数スレッドを同時に実行できるようにするため、
    すべてのグローバル変数をローカルの構造体に割り当てなければなりません。
    この文書が書かれた時点では Zend のスレッドセーフモードはまだ完成していません。
    そのため、この文書ではこれ以上この機能について取り上げません。
   </para> 
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.layout.dir-and-file"> 
   <title>ディレクトリ関数およびファイル関数</title> 
   <para>
    Zend モジュール内では、以下のディレクトリ関数およびファイル関数を使用しなければなりません。
    これらの関数の機能はそれぞれ対応する C 関数と同じですが、
    さらにスレッドレベルでの仮想実行ディレクトリがサポートされています。
    <informaltable> 
     <tgroup cols="2">
      <colspec colnum="1" colname="col1" colwidth="*"/>
      <colspec colnum="2" colname="col2" colwidth="*"/> 
      <tbody> 
       <row> 
        <entry colname="col1">Zend 関数</entry> 
        <entry colname="col2">標準 C 関数</entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_GETCWD</function></entry>
        <entry colname="col2"><function>getcwd</function></entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_FOPEN</function></entry> 
        <entry colname="col2"><function>fopen</function></entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_OPEN</function></entry> 
        <entry colname="col2"><function>open</function></entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_CHDIR</function></entry> 
        <entry colname="col2"><function>chdir</function></entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_GETWD</function></entry> 
        <entry colname="col2"><function>getwd</function></entry> 
       </row> 
       <row> 
        <entry
               colname="col1"><function>V_CHDIR_FILE</function></entry> 
        <entry colname="col2">
         ファイルのパスを引数として受け取り、
         現在の実行ディレクトリをそのファイルのディレクトリに移動します。
        </entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_STAT</function></entry> 
        <entry colname="col2"><function>stat</function></entry> 
       </row> 
       <row> 
        <entry colname="col1"><function>V_LSTAT</function></entry> 
        <entry colname="col2"><function>lstat</function></entry> 
       </row> 
      </tbody> 
     </tgroup> 
    </informaltable></para> 
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.layout.string-handling"> 
   <title>文字列の処理</title> 
   <para>
    Zend エンジンでは、文字列はその他の値
    (整数値、論理値など) と少し異なる方法で処理されます。
    これらの値を保存するために、追加のメモリを確保する必要はありません。
    関数から文字列を返したい場合は、新しい文字列変数を
    シンボルテーブルかそれに類似のものに登録します。
    その文字列が使用するメモリは、先ほど説明した <function>e*</function>
    関数で事前に確保しておかなければなりません
    (この段階では、まだあまりピンとこないかもしれません。
    とりあえずは頭の片隅に置いておいてください。あとでもう一度説明します)。
   </para> 
  </sect3>

  <sect3 xml:id="internals2.ze1.zendapi.layout.complex-types"> 
   <title>複雑な型</title> 
   <para>
    配列やオブジェクトのような複雑な型については、扱いかたが異なります。
    Zend はこれらの型を扱うための API を提供しており、
    これらの型はハッシュテーブルとして保存されます。
   </para> 
   <note>
    <para>
     これ以降のサンプルソースでは、
     読みやすさを考慮して integer などの単純な型のみを使用します。
     より高度な型を作成する方法については、この章の後半で説明します。
    </para>
   </note>
  </sect3>
 </sect2>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
