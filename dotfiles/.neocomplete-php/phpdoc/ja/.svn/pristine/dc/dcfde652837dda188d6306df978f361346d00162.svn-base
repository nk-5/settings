<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330081 Maintainer: takagi Status: ready -->
<sect1 xml:id="internals2.memory.persistence" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>データの永続化</title>
 
 <simpara>
  ここでいう「データの永続化」とは、現在のリクエストの間はずっと生き続けることを想定したあらゆるデータを指します。
  エンジン内でのメモリ管理はリクエスト単位での割り当てを重視していますが、必ずしもこれが現実的であったり適切であったりするわけではありません。
  永続メモリは、たとえば外部ライブラリの要件を満たすために必要になることがあります。
  また、<code>ハック</code>の際にも便利です。
 </simpara>
 
 <simpara>
  永続メモリのよくある使い道は、データベースサーバーとの持続的な接続をできるようにすることです。
  これはあまり望ましいことではありませんが、永続メモリの使い道としては一番よくあるものです。
 </simpara>
 
 <note>
  <simpara>
   これらの関数にはすべて、追加のパラメータ persistent があります。これを false にすると、
   エンジンは通常のアロケータ (emalloc) を使い、永続化しなくなります。メモリを永続化する場合はシステムのアロケータを使います。
   しかしたいていの場合、メインメモリ API のように NULL ポインタを返すことはできません。
  </simpara>
 </note>
 
 <table xml:id="internals2.memory.management.papis">
  <title>永続メモリ API</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>プロトタイプ</entry>
     <entry>説明</entry>
    </row>
   </thead>
   <tbody>
    
    <row>
     <entry><code>void *pemalloc(size_t size, zend_bool persistent)</code></entry>
     <entry><code>size</code> バイトのメモリを確保します。</entry>
    </row>
    
    <row>
     <entry><code>void *pecalloc(size_t nmemb, size_t size, zend_bool persistent)</code></entry>
     <entry>
      <code>size</code> バイトのバッファを <code>nmemb</code> 要素だけ確保し、
      ゼロで初期化します。
     </entry>
    </row>
    
    <row>
     <entry><code>void *perealloc(void *ptr, size_t size, zend_bool persistent)</code></entry>
     <entry>
      <code>emalloc</code> を使って確保したバッファ <code>ptr</code> のサイズを変更し、
      <code>size</code> バイトにします。
     </entry>
    </row>
    
    <row>
     <entry><code>void pefree(void *ptr, zend_bool persistent)</code></entry>
     <entry>
      <code>ptr</code> が指すバッファを解放します。このバッファは
      <code>pemalloc</code> で確保したものでなければいけません。
     </entry>
    </row>
    
    <row>
     <entry>
      <code>void *safe_pemalloc(size_t nmemb, size_t size, size_t offset, zend_bool persistent)</code>
     </entry>
     <entry>
      <code>size</code> バイトのバッファを <code>nmemb</code> ブロックぶんと、さらに
      <code>offset</code> バイトを確保します。
      <code>pemalloc(nmemb * size + offset)</code> と似ていますが、
      オーバーフロー対策の特別な保護が追加されています。
     </entry>
    </row>
    
    <row>
     <entry><code>char *pestrdup(const char *s, zend_bool persistent)</code></entry>
     <entry>
      NULL 終端文字列 <code>s</code> を保持できるだけのバッファを確保し、
      <code>s</code> をそのバッファにコピーします。
     </entry>
    </row>
    
    <row>
     <entry>
      <code>char *pestrndup(const char *s, unsigned int length, zend_bool persistent)</code>
     </entry>
     <entry>
      <code>pestrdup</code> と似ていますが、NULL 終端文字列の長さが既知である場合に使います。
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 
 <caution>
  <simpara>
   大切なのは、永続化させるために確保したメモリはエンジン側での最適化や追跡が行われないということです。
   memory_limit に縛られることもありません。さらに、エンジンの<code>ハッカー</code>が作った変数では永続メモリを使ってはいけません。
  </simpara>
 </caution>
</sect1>
