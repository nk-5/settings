<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka,takagi -->
<!-- Author: Wez Furlong <wez@thebrainroom.com>
  Please contact me before making any major amendments to the
  content of this section.  Splitting/Merging are fine if they are
  required for php-doc restructuring purposes - just drop me a line
  if you make a change (so I can update my local copy).
-->

<sect1 xml:id="internals2.ze1.streams" xmlns="http://docbook.org/ns/docbook">
 <title>PHP 拡張モジュールの作者用のストリーム API</title>
 <para>
  <note>
   <para>
    この章で説明する関数は PHP のソースコード内で用いられるものであり、
    PHP の関数ではありません。PHP のユーザー用のストリーム関数については
    <link linkend="book.stream">ストリーム関数のリファレンス</link>
    をご覧ください。
   </para>
  </note>
 </para>
 <sect2 xml:id="internals2.ze1.streams.overview">
  <title>概要</title>
  <para>
    PHPストリームAPIは、PHP拡張モジュールにファイルおよびソケット処理
    用の統一化された手段を導入するものです。
    共通の操作を行なうための標準関数を有する単一のAPIを使用することに
    より、ストリームAPIは拡張モジュールがファイル、ソケット、URL、メモリ
    スクリプトが定義したオブジェクトにアクセスすることを可能にします。
    ストリームは、新規ストリームを登録するために動的にロードされる
    モジュール(およびスクリプト!)とすることができる実行時に拡張可能な
    APIです。
  </para>
  <para>
    ストリームAPIの目的は、ファイル、URL、その他のストリームにできるデータ
    ソースを平易な統一されたAPIにより、開発者が容易にオープンできるように
    することです。APIは、ほぼANSI C stdio関数と(多くの主な関数について同等
    の意味を有しており、)類似しています。このため、Cプログラマは、
    ストリームに慣れている印象を受けるはずです。
  </para>
  <para>
    ストリームAPIは、いくつかの異なるレベルを処理します。
    基本レベルでは、APIはストリーマブルなデータソースを表す
    php_streamオブジェクトを定義します。
    やや高いレベルでは、APIは、URLからのデータおよびメタデータの取得を
    サポートするために低レベルAPIをラップしたphp_stream_wrapper
    オブジェクトを定義します。
    追加のパラメータ <literal>context</literal> は、
    ほとんどのストリーム作成関数で使用できます。
    これはラッパーの <literal>stream_opener</literal>
    メソッドに渡され、ラッパーの挙動を微調整します。
  </para>
  <para>
   あらゆるストリームは、一度オープンされると任意の数の
   <literal>filters</literal> を適用することができます。
   これは、ストリームがデータを読み書きする際にそのデータを加工します。
  </para>
  <para>
    ストリームは、ファイル処理の他の形式にキャスト(変換)でき、
    大きな問題もなくサードパーティ製のライブラリと組み合わせて使用する
    ことができます。これにより、これらのライブラリがURLソースからデータに
    直接アクセスできるようになります。
    使用するシステムに<function>fopencookie</function>または
    <function>funopen</function>関数がある場合、
    任意のPHPストリームをANSI stdioを使う任意のライブラリに渡すことさえ
    できます!
  </para>
 </sect2>

 <sect2 xml:id="internals2.ze1.streams.basics">
  <title>ストリームの基本</title>
  <para>
    ストリームの使用方法は、ANSI stdio関数の使用と非常に似ています。
    主な違いは、使用を開始するストリームを得る方法です。
    多くの場合、ストリームのハンドルを得るために
    <function>php_stream_open_wrapper</function>を使用します。
    この関数の動作は、以下の例で示すようにfopenと非常によくにています。
  </para>
  <para>
     <example>
     <title>PHPホームページを表示するための簡単なストリームの例</title>
      <programlisting role="c">
<![CDATA[
php_stream * stream = php_stream_open_wrapper("http://www.php.net", "rb", REPORT_ERRORS, NULL);
if (stream) {
    while(!php_stream_eof(stream)) {
        char buf[1024];
        
        if (php_stream_gets(stream, buf, sizeof(buf))) {
            printf(buf);
        } else {
            break;
        }
    }
    php_stream_close(stream);
}
]]>
      </programlisting>
     </example>
  </para>
  <para>
    以下の表にその他の一般的なANSI stdio関数と等価なストリーム関数を
    示します。注記で除外されていない限り、関数の意味は同じです。
     <table>
      <title>ANSI stdioと等価なストリームAPI関数</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>ANSI stdio関数</entry>
         <entry>PHP ストリーム関数</entry>
         <entry>注意</entry>
        </row>
       </thead>
       <tbody>

        <row>
         <entry>fopen</entry>
         <entry>php_stream_open_wrapper</entry>
         <entry>ストリームではパラメータが増えています</entry>
        </row>

        <row>
         <entry>fclose</entry>
         <entry>php_stream_close</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fgets</entry>
         <entry>php_stream_gets</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fread</entry>
         <entry>php_stream_read</entry>
         <entry>パラメータnmembの値を1と仮定すると、プロトタイプはread(2)により似ることになります</entry>
        </row>

        <row>
         <entry>fwrite</entry>
         <entry>php_stream_write</entry>
         <entry>パラメータnmembの値を1と仮定すると、プロトタイプはwrite(2)により似ることになります</entry>
        </row>

        <row>
         <entry>fseek</entry>
         <entry>php_stream_seek</entry>
         <entry></entry>
        </row>

        <row>
         <entry>ftell</entry>
         <entry>php_stream_tell</entry>
         <entry></entry>
        </row>

        <row>
         <entry>rewind</entry>
         <entry>php_stream_rewind</entry>
         <entry></entry>
        </row>

        <row>
         <entry>feof</entry>
         <entry>php_stream_eof</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fgetc</entry>
         <entry>php_stream_getc</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fputc</entry>
         <entry>php_stream_putc</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fflush</entry>
         <entry>php_stream_flush</entry>
         <entry></entry>
        </row>

        <row>
         <entry>puts</entry>
         <entry>php_stream_puts</entry>
         <entry>fputsではなく、putsと同じ意味</entry>
        </row>

        <row>
         <entry>fstat</entry>
         <entry>php_stream_stat</entry>
         <entry>ストリームはより情報の多いstat構造体を有しています</entry>
        </row>
         
       </tbody>
      </tgroup>
     </table>
   
  </para>
 </sect2>

 <sect2 xml:id="internals2.ze1.streams.resources">
  <title>リソースとしてのストリーム</title>
  <para>
   すべてのストリームは、作成されるとリソースとして登録されます。これにより、
   たとえ致命的なエラーが発生したとしても適切な後処理が行われることが保障されます。
   PHP のすべてのファイルシステム関数は、ストリームリソースに対して操作することができます。
   つまり、あなたの作成した拡張モジュールは、
   通常の PHP ファイルポインタをパラメータとして受け取って
   結果をストリームで返すことができるということです。
   ストリーム API により、この処理が楽にできるようになっています。
  </para>
  <para>
     <example>
      <title>ストリームをパラメータとして受け取る方法</title>
      <programlisting role="c">
<![CDATA[
PHP_FUNCTION(example_write_hello)
{
    zval *zstream;
    php_stream *stream;
    
    if (FAILURE == zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &zstream))
        return;
    
    php_stream_from_zval(stream, &zstream);

    /* これでストリームを使うことができます。しかし、ストリームの
       "所有者" はこの関数ではなく、呼び出し元のスクリプトです。
       つまり、この関数内でストリームを閉じてはいけないということです。
       そんなことをすると PHP がクラッシュしてしまいます! */

    php_stream_write(stream, "hello\n");
        
    RETURN_TRUE();
}
]]>
      </programlisting>
     </example>
  </para>
  <para>
     <example>
      <title>関数からストリームを返す方法</title>
      <programlisting role="c">
<![CDATA[
PHP_FUNCTION(example_open_php_home_page)
{
    php_stream *stream;
    
    stream = php_stream_open_wrapper("http://www.php.net", "rb", REPORT_ERRORS, NULL);
    
    php_stream_to_zval(stream, return_value);

    /* これ以降、ストリームの "所有者" は呼び出し元スクリプトとなります。
       もしここでストリームを閉じると、PHP がクラッシュしてしまいます! */
}
]]>
      </programlisting>
     </example>
  </para>
  <para>
   ストリームの後始末が自動的に行われることから、
   わざわざ後始末を気にしたりしないずさんなプログラマでいても大丈夫と思われるかもしれません。
   確かにそれでもうまくいくでしょうが、いくつかの理由からこれはお勧めできません。
   ストリームのオープン中はシステムリソースがロックされるので、
   使用済みのファイルをオープンしたままにしておくと、
   他のプロセスがファイルにアクセスできなくなります。
   大量のファイルを扱うスクリプトでは、
   使用済みのリソースを溜め込み続けるとメモリやファイル記述子の番号がいっぱいになってしまいます。
   その結果ウェブサーバーがリクエストを受け付けられないようになります。
   どうです? あまりいい話ではないでしょう?
   ストリーム API には、すっきりとしたコードが書けるような細工が組み込まれています。
   ストリームを閉じるべき場所で閉じていない場合は、
   ウェブサーバーのエラーログに有用なデバッグ情報が出力されます。
  </para>
  <note>
   <simpara>
    拡張モジュールの開発中は、常にデバッグビルド版の PHP を使用するようにしましょう
    (configure の際に <option>--enable-debug</option> を指定します)。
    そうすることで、メモリリークやストリームのリークに関する重要な警告を受け取れるようになります。
   </simpara>
  </note>
  <para>
   時には、リクエストを持続させるためにストリームをオープンし続けることが有用なこともあるでしょう。
   例えばログを記録したり結果をファイルにトレースする場合などです。
   このようなストリームについて、確実に後始末を行うコードを書くことはさほど難しくありません。
   しかしその数行のコードがどうしても必要なのかというと、そうではないでしょう。
   このような場合にコードを書く手間を省くため、ストリームに対して
   「このストリームの後始末は自動処理にまかせる」という印をつけることができます。
   こうすると、ストリームの後始末が自動的に行われた際に、
   ストリーム API は何の警告も発しなくなります。この印をつけるには
   <function>php_stream_auto_cleanup</function> を使用します。
  </para>
 </sect2>
<!-- Disable these until references are fixed
 &internals2.ze1.streams.common;
 &internals2.ze1.streams.dir;
 &internals2.ze1.streams.file;
 &internals2.ze1.streams.socket;
 &internals2.ze1.streams.structs;
-->
 &internals2.ze1.streams.constants;
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

