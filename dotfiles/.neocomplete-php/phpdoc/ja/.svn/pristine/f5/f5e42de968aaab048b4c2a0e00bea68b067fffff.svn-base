<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331736 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->

<sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
 <title>アクセス権</title>
 <para>
  プロパティまたはメソッドのアクセス権 (visibility) は、
  キーワード: <emphasis>public</emphasis>, <emphasis>protected</emphasis>
  または <emphasis>private</emphasis> を指定することにより定義できます。
  public 宣言されたクラスのメンバーには、どこからでもアクセス可能です。
  protected 宣言されたメンバーには、
  そのクラス自身と継承したクラス、親クラスからのみアクセスできます。
  private 宣言されたメンバーには、そのメンバーを定義したクラスからのみアクセスできます。
 </para>

  <sect2 xml:id="language.oop5.visibility-members">
   <title>プロパティのアクセス権</title>
  <para>
   クラスのプロパティは、public, private, または protected
   として定義しなくてはなりません。<emphasis>var</emphasis>
   を使って宣言した場合、
   そのプロパティは public として定義されます。
  </para>
  <para>
   <example>
    <title>プロパティの宣言</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * MyClass の定義
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // 動作します
echo $obj->protected; // Fatal エラー
echo $obj->private; // Fatal エラー
$obj->printHello(); // Public、Protected そして Private を表示します


/**
 * MyClass2 の定義
 */
class MyClass2 extends MyClass
{
    // public および protected メソッドは再定義できますが、
    // private はできません。
    protected $protected = 'Protected2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // 動作します
echo $obj2->protected; // Fatal エラー
echo $obj2->private; // 未定義です
$obj2->printHello(); // Public、Protected2、Undefined を表示します

?> 
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    キーワード <emphasis>var</emphasis> で変数を宣言する
    PHP 4 の方法は、互換性を保つために今でもサポートされています
    (これは public と同じ扱いになります)。PHP 5.1.3 より前では、
    これを使用すると <constant>E_STRICT</constant>
    警告が発生します。
   </simpara>
  </note>
 </sect2>

 <sect2 xml:id="language.oop5.visiblity-methods">
  <title>メソッドのアクセス権</title>
  <para>
   クラスメソッドは、public, private, または protected
   として定義します。アクセス権を明示せずに宣言したメソッドは、
   public となります。
  </para>
  <para>
   <example>
    <title>メソッドの宣言</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * MyClass の定義
 */
class MyClass
{
    // public コンストラクタの宣言
    public function __construct() { }

    // public メソッドの宣言
    public function MyPublic() { }

    // protected メソッドの宣言
    protected function MyProtected() { }

    // private メソッドの宣言
    private function MyPrivate() { }

    // これは public となります
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // 動作します
$myclass->MyProtected(); // Fatal エラー
$myclass->MyPrivate(); // Fatal エラー
$myclass->Foo(); // Public、Protected および Private が動作します


/**
 * MyClass2 の定義
 */
class MyClass2 extends MyClass
{
    // これは public となります
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Fatal エラー
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // 動作します
$myclass2->Foo2(); // Public および Protected は動作しますが、Private は動作しません

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>他のオブジェクトからのアクセス権</title>
   <para>
    同じ型のオブジェクト間では、たとえ同一のインスタンスでなくても
    お互いの private メンバーや protected メンバーにアクセスすることができます。
    これは、そのオブジェクトの内部ではオブジェクトの実装の詳細が既知であるからです。
   </para>
   <example>
    <title>同じ型のオブジェクトの private メンバーへのアクセス</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Accessed the private method.';
    }

    public function baz(Test $other)
    {
        // private プロパティを変更することができます
        $other->foo = 'hello';
        var_dump($other->foo);

        // private メソッドをコールすることもできます
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "hello"
Accessed the private method.
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
